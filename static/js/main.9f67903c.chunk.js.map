{"version":3,"sources":["config/domain.js","redux/taskReducer.js","config/helpers.js","config/axios.js","redux/tasksThunks.js","components/Subtask/Subtask.js","components/Subtask/SubtaskEdit.js","components/Do/Do.js","redux/projectsThunks.js","components/ParentTask/ParentTask.js","redux/daysThunks.js","components/ModalForm/ModalForm.js","components/ModalForm/ProjectForm.js","components/ModalForm/TaskForm.js","components/ModalForm/ModalNew.js","components/ModalForm/DayNew.js","components/MainHeader/MainHeader.js","components/Action/Action.js","components/Task/Task.js","pages/Tasks.js","components/Project/Project.js","pages/Projects.js","pages/Today.js","components/Goal/Goal.js","pages/Goals.js","App.js","redux/goalsThunks.js","redux/store.js","index.js"],"names":["CURRENT_TASK","id","name","type","period","balance","parent","goal","today","repeat","plan","date","done","donedate","action","repeatday","BALANCE","TASK_TYPES","DATE_CONSTANTS","eng","ru","days","MODAL_TYPES","tasksSlice","createSlice","initialState","goals","tasks","projects","currentTask","isFetching","modalIsOpen","typeOfModal","todaytasks","doneTasks","daytext","error","reducers","toggleFetching","state","setTasks","payload","setDoneTasks","setDay","saveTask","newTasks","map","task","addTask","deleteTask","filter","deleteProject","newProjects","project","setProjects","setPlan","filtertype","setWeek","week","doTask","find","hasParent","setCurrentTask","setModal","openNewTask","setProject","setTask","closeModal","changeCurrentTask","value","addSubtask","subtasks","setCurrentDay","setCurrentPlan","isplan","setSearch","search","setGoals","setError","actions","setPlanTasks","setTodayTasks","selectTasks","filterTodayTasks","Date","moment","sort","important","instance","axios","create","baseURL","defaults","headers","common","localStorage","getItem","saveTaskThunk","dispatch","a","put","response","statusText","addTaskThunk","newTask","post","data","doTaskThunk","Subtask","change","useState","useDispatch","dateFormat","dateFormatArray","split","className","onClick","get","SubtaskEdit","close","input","setInput","onChange","e","target","onKeyPress","event","charCode","autoFocus","Do","current","useSelector","doneHandler","getProjectsThunk","getProjectThunk","project_id","ParentTask","isParent","setIsParent","startChooseParent","length","Option","Select","showSearch","style","width","values","children","filterOption","option","toLowerCase","indexOf","addDayTextThunk","text","customStyles","content","top","left","right","bottom","marginRight","transform","modals","isSubtask","setIsSubtask","handleChangeType","child","key","preventDefault","size","defaultChecked","subtask","index","loading","delete","handleChangeData","handleChangeDate","dateString","setDateFromConstants","dateConstant","date_constant","item","result","add","format","getDateFromConstant","parentname","parentid","Group","task_id","new","setName","day","setText","ctrlKey","ModalForm","ModalComponent","isOpen","onRequestClose","ariaHideApp","MainHeader","to","Action","classes","push","join","Task","taskClasses","daysBetweenFromToday","diff","isparent","Tasks","dates","i","dateObject","raw","show","getDatesForPeriod","todayTasks","inboxTasks","otherTasks","tasksForDate","Project","childname","childdate","openProject","Projects","setFilter","navClickHandler","textContent","filteredProjects","toUpperCase","Today","Goal","description","Goals","App","handlers","MOVE_UP","getData","useEffect","keyMap","exact","path","component","configureStore","reducer","taskReducer","middleware","getDefaultMiddleware","devTools","process","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.9f67903c.chunk.js","sourcesContent":["export const taskFilter = ['все', \"задача\", \"проект\", \"привычка\", \"другое\"]\r\n\r\n\r\nexport const OPTIONS = {\r\n    type: [\r\n        { value: 'задача', label: 'Задача' },\r\n        { value: 'привычка', label: 'Привычка' }\r\n    ],\r\n    balance: [\r\n        { value: 'работа', label: 'Работа' },\r\n        { value: 'проект', label: 'Проект' },\r\n        { value: 'развитие', label: 'Развитие' },\r\n        { value: 'семья', label: 'Семья' },\r\n        { value: 'здоровье', label: 'Здоровье' },\r\n    ],\r\n    period: [\r\n        { value: 15, label: 15 },\r\n        { value: 30, label: 30 },\r\n        { value: 45, label: 45 },\r\n        { value: 60, label: 60 },\r\n        { value: 90, label: 90 },\r\n    ],\r\n    plan: [\r\n        { value: 'today', label: 'today' },\r\n        { value: 'inbox', label: 'inbox' },\r\n        { value: 'upcoming', label: 'upcoming' },\r\n        { value: 'later', label: 'later' },\r\n    ]\r\n}\r\n\r\nexport const CURRENT_TASK = {\r\n    id: 0,\r\n    name: '',\r\n    type: 'задача',\r\n    period: 0,\r\n    balance: '',\r\n    parent: 0,\r\n    goal: false,\r\n    today: false,\r\n    repeat: false,\r\n    plan: 'inbox',\r\n    date: null,\r\n    done: false,\r\n    donedate: null,\r\n    action: null,\r\n    repeatday: 0\r\n}\r\n\r\nexport const BALANCE = ['работа', 'проект', \"семья\", \"здоровье\", \"быт\", \"развитие\", \"отдых\"]\r\nexport const PLANS = ['today', 'week', 'upcoming', \"later\"]\r\n\r\nexport const TASK_TYPES = {\r\n    plan: 'plan',\r\n    done: 'done'\r\n}\r\n\r\nexport const DATE_CONSTANTS = [\r\n    { eng: 'today', ru: 'сегодня', days: 0 }, { eng: 'tomorrow', ru: 'завтра', days: 1 }, { eng: 'aftertomorrow', ru: 'послезавтра', days: 2 }\r\n]\r\n\r\nexport const MODAL_TYPES = {\r\n    new: 'new',\r\n    project: 'project',\r\n    task: 'task',\r\n    day: 'day',\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\"\r\nimport { CURRENT_TASK, MODAL_TYPES } from \"../config/domain\";\r\n\r\n\r\n\r\n\r\nexport const tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        goals: [],\r\n        tasks: [],\r\n        projects: [],\r\n        currentTask: null,\r\n        isFetching: false,\r\n        modalIsOpen: false,\r\n        typeOfModal: 'new',\r\n        todaytasks: [],\r\n        doneTasks: [],\r\n        daytext: false,\r\n        error: ''\r\n        // today: [],\r\n        \r\n        // week: [],\r\n        // plan: 'today',\r\n        // filtertype: 'plan',\r\n        \r\n        \r\n        \r\n        // date: '',\r\n        // isplan: false,\r\n        // search: ''\r\n    },\r\n    reducers: {\r\n        toggleFetching: state => {\r\n            state.isFetching = !state.isFetching\r\n        },\r\n        setTasks: (state, action) => {\r\n            state.tasks = action.payload\r\n            state.isFetching = false\r\n        },\r\n        // setTodayTasks: (state, action) => {\r\n        //     state.todaytasks = action.payload\r\n        //     // state.doneTasks = action.payload.doneTasks\r\n        // },\r\n        setDoneTasks: (state, action) => {\r\n            state.doneTasks = action.payload\r\n        },\r\n        setDay: (state, action) => {\r\n            if (action.payload) {\r\n                state.daytext = true\r\n                state.isFetching = false\r\n                state.modalIsOpen = false\r\n            }            \r\n        },\r\n        saveTask: (state) => {\r\n            const newTasks = state.tasks.map(task => task.id === state.currentTask.id ? ({...state.currentTask}) : task)\r\n            state.tasks = newTasks\r\n            state.isFetching = false\r\n            state.modalIsOpen = false\r\n        },\r\n        addTask: (state, action) => {\r\n            state.tasks = [...state.tasks, action.payload]\r\n            state.isFetching = false\r\n            state.modalIsOpen = false\r\n        },\r\n        deleteTask: (state, action) => {\r\n            const newTasks = state.tasks.filter(task => task.id !== state.currentTask.id)\r\n            state.tasks = newTasks\r\n        },\r\n        deleteProject: (state, action) => {\r\n            const newProjects = state.projects.filter(project => project.id !== action.payload)\r\n            state.projects = newProjects\r\n        },\r\n        setProjects: (state, action) => {\r\n            state.projects = action.payload\r\n        },\r\n        setPlan: (state, action) => {\r\n            state.plan = action.payload.plan\r\n            state.filtertype = action.payload.filtertype\r\n        },\r\n        setWeek: (state, action) => {\r\n            state.week = action.payload\r\n        },\r\n        doTask: (state, action) => {\r\n\r\n            const { id, parent } = action.payload\r\n            const task = state.tasks.find(task => task.id === id)\r\n            const newTasks = state.tasks.filter(task => task.id !== id)\r\n            state.tasks = newTasks\r\n            state.doneTasks = [...state.doneTasks, task]\r\n\r\n            // открыть родителя если это была подзадача\r\n            // const parentTask = state.tasks.find(task => task.id === parent)\r\n\r\n            if (action.payload.parent.hasParent) {\r\n                state.modalIsOpen = true\r\n                state.typeOfModal = MODAL_TYPES.project\r\n                state.currentTask = action.payload.parent.project\r\n            } else {\r\n                state.modalIsOpen = false\r\n            }\r\n            state.isFetching = false\r\n        },\r\n        setCurrentTask: (state, action) => {\r\n            state.currentTask = action.payload\r\n        },\r\n        setModal: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = action.payload.typeOfModal\r\n            // const subtasks = state.tasks.filter(task => task.child === action.payload.currentTask.id && !task.done)\r\n            // state.currentTask = { ...action.payload.currentTask, subtasks: subtasks }\r\n        },\r\n        openNewTask: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = MODAL_TYPES.new\r\n            state.currentTask = CURRENT_TASK\r\n        },\r\n        setProject: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = MODAL_TYPES.project\r\n            state.currentTask = action.payload\r\n            state.isFetching = false\r\n        },\r\n        setTask: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = MODAL_TYPES.task\r\n            state.currentTask = action.payload\r\n            state.isFetching = false\r\n        },\r\n        \r\n        closeModal: state => {\r\n            state.modalIsOpen = false\r\n        },\r\n        changeCurrentTask: (state, action) => {\r\n            state.currentTask = { ...state.currentTask, [action.payload.type]: action.payload.value }\r\n            const newTasks = state.tasks.map(task => task.id === state.currentTask.id ? {...task, [action.payload.type]: action.payload.value} : task)\r\n            state.tasks = newTasks\r\n        },\r\n        addSubtask: (state, action) => {\r\n            state.tasks = [...state.tasks, action.payload]\r\n            // state.tasks[action.payload.plan] = [...state.tasks[action.payload.plan], action.payload]\r\n            state.currentTask.subtasks = [...state.currentTask.subtasks, action.payload]\r\n            state.isFetching = false\r\n        },\r\n        setCurrentDay: (state, action) => {\r\n            state.date = action.payload\r\n        },\r\n        setCurrentPlan: (state, action) => {\r\n            state.isplan = action.payload\r\n        },\r\n        setSearch: (state, action) => {\r\n            state.search = action.payload\r\n        },\r\n        setGoals: (state, action) => {\r\n            state.goals = action.payload  \r\n            state.isFetching = false        \r\n        },\r\n        setError: (state, action) => {\r\n            state.error = action.payload  \r\n            state.isFetching = false        \r\n        },\r\n        \r\n    },\r\n});\r\n\r\n\r\n// actions\r\n\r\nexport const { toggleFetching,\r\n    setTasks, addTask, deleteTask, saveTask, doTask,\r\n    setPlanTasks, setTodayTasks, setDoneTasks,\r\n    setProjects, deleteProject, setProject,\r\n    setCurrentTask, changeCurrentTask,\r\n    addSubtask,\r\n    openNewTask,\r\n    setModal, closeModal,\r\n    setDay,\r\n    setTask,\r\n    setGoals,\r\n    setError\r\n    // setPlan,\r\n    // upTask,\r\n    // setCurrentDay, setCurrentPlan,\r\n    // setSearch,\r\n    // changePlan,    \r\n} = tasksSlice.actions;\r\n\r\n\r\n\r\nexport const selectTasks = state => state\r\n\r\n\r\nexport default tasksSlice.reducer;","import moment from 'moment';\r\nimport { DATE_CONSTANTS } from './domain';\r\n\r\nexport const getTimeFromMins = mins => {\r\n    let hours = Math.trunc(mins / 60);\r\n    let minutes = mins % 60;\r\n    return hours + '-' + minutes.toString().padStart(2, 0);\r\n};\r\n\r\nexport const getDatesForPeriod = period => {\r\n    const dates = []\r\n    for (let i = 1; i < period; i++) {\r\n        const date = moment().add(i, 'days')\r\n        const dateObject = { raw: date.format('YYYY-MM-DD'), show: date.format('DD.MM dddd') }\r\n        dates.push(dateObject)\r\n        // onlyDates.push(date.format('YYYY-MM-DD'))\r\n    }\r\n    return dates\r\n};\r\n\r\n\r\nexport const getDateFromConstant = date_constant => {\r\n    const objectFromDateConstant = DATE_CONSTANTS.find(item => item.eng === date_constant)\r\n    const days = objectFromDateConstant.days\r\n    const today = moment()\r\n    const result = today.add(days, 'days')\r\n    const formatResult = moment(result).format('YYYY-MM-DD')\r\n    return formatResult\r\n};\r\n\r\n\r\nexport const filterTodayTasks = tasks => {\r\n    const today = new Date()\r\n    return tasks\r\n        .filter(task => moment(task.date) <= today)\r\n        .sort(task => task.important ? -1 : 1)\r\n        .sort(task => task.goal ? -1 : 1)\r\n}\r\n\r\nexport const getAuthToken = () => {\r\n    const token = localStorage.getItem('do')\r\n    return token\r\n}","import axios from 'axios';\r\nimport { getAuthToken } from './helpers'\r\n\r\n\r\nconst instance = axios.create({\r\n    // baseURL: 'http://localhost:5002/api/'\r\n    baseURL: 'http://82.146.40.11:5002/api/'\r\n});\r\n\r\ninstance.defaults.headers.common = { 'Authorization': `Bearer ${getAuthToken()}` }\r\nexport default instance;","import { saveTask, toggleFetching, deleteTask, setProject, closeModal, setError, setTasks, setTask, setDoneTasks, addTask, addSubtask, doTask } from \"./taskReducer\"\r\nimport axios from '../config/axios'\r\n\r\n\r\n\r\nexport const getTasksThunk = () => async dispatch => {    \r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('tasks')\r\n        dispatch(setTasks(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    } \r\n}\r\n\r\nexport const getTaskThunk = (id) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('tasks/' + id)\r\n        dispatch(setTask(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    } \r\n}\r\n\r\nexport const getDoneTasksThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('tasks/done')\r\n        dispatch(setDoneTasks(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    } \r\n}\r\n\r\n\r\n\r\nexport const saveTaskThunk = (task) => async dispatch => {\r\n\r\n    try {\r\n        dispatch(toggleFetching())\r\n        await axios.put('tasks', task)\r\n        dispatch(saveTask())\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    } \r\n\r\n\r\n    // dispatch(toggleFetching())\r\n    // API.editTask(task)\r\n    //     .then(response => {\r\n    //         dispatch(saveTask())\r\n    //     })\r\n}\r\n\r\n\r\nexport const addTaskThunk = (newTask) => async dispatch => {\r\n\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.post('tasks', newTask)\r\n        dispatch(addTask(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    } \r\n\r\n\r\n\r\n    // dispatch(toggleFetching())\r\n    // API.addTask(newTask)\r\n    //     .then(response => {\r\n    //         dispatch(addTask(response))\r\n    //         dispatch(toggleFetching())\r\n    //         dispatch(closeModal())\r\n    //     })\r\n}\r\n\r\nexport const doTaskThunk = (id) => async dispatch => {\r\n\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.post('tasks/do', { id })\r\n        dispatch(doTask({ id, parent: data }))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    } \r\n\r\n\r\n    // dispatch(toggleFetching())\r\n    // API.do(id)\r\n    //     .then(response => {\r\n    //         dispatch(doTask({ id, parent: response }))\r\n    //         dispatch(toggleFetching())\r\n    //         // dispatch(closeModal())\r\n    //     })\r\n}\r\n\r\n\r\nexport const deleteTaskThunk = (task_id, parent) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        await axios.delete('tasks/' + task_id)\r\n        dispatch(deleteTask(task_id))\r\n        if (parent) {\r\n            // const project = await API.project.getProject(parent)\r\n            const { data } = await axios.get('projects/' + parent)\r\n            dispatch(setProject(data))\r\n        } else {\r\n            dispatch(closeModal())\r\n            dispatch(toggleFetching())\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    } \r\n\r\n\r\n    // dispatch(toggleFetching())\r\n    // await API.deleteTask(task_id)\r\n    // dispatch(deleteTask(task_id))\r\n    // if (parent) {\r\n    //     const project = await API.project.getProject(parent)\r\n    //     dispatch(setProject(project))\r\n    // } else {\r\n    //     dispatch(closeModal())\r\n    //     dispatch(toggleFetching())\r\n    // }\r\n}\r\n\r\nexport const addSubtaskThunk = (newTask) => async dispatch => {\r\n\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.post('tasks', newTask)\r\n        dispatch(addSubtask(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    } \r\n\r\n\r\n\r\n    // dispatch(toggleFetching())\r\n    // API.addTask(newTask)\r\n    //     .then(response => {\r\n    //         dispatch(addSubtask(response))\r\n    //         dispatch(toggleFetching())\r\n    //     })\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { getTaskThunk } from '../../redux/tasksThunks';\r\nimport { MODAL_TYPES } from '../../config/domain';\r\nimport './Subtask.css'\r\n\r\n// const DragHandle = sortableHandle(() => <span className='draghandler'>:::</span>);\r\n\r\n\r\nexport const Subtask = ({ task, change }) => {\r\n\r\n    const [input, setInput] = useState(task.name)\r\n    const dispatch = useDispatch()\r\n\r\n    const clickHandler = () => {\r\n        dispatch(getTaskThunk(task.id))\r\n    }\r\n\r\n\r\n    const handleBlur = () => {\r\n        if (input !== '') {\r\n            change(task.id, input)\r\n        }\r\n    }\r\n\r\n    let dateFormat = ''\r\n    if (task.date) {\r\n        const dateFormatArray = task.date.split('-')\r\n        dateFormat = dateFormatArray[2] + '.' + dateFormatArray[1]\r\n    }\r\n\r\n\r\n    return (\r\n        <div\r\n            className='subtask'\r\n            onClick={clickHandler}\r\n        >\r\n            {/* <DragHandle /> */}\r\n            <span>\r\n                {task.name}\r\n            </span>\r\n            {/* <input\r\n                className='subtask_input'\r\n                value={input}\r\n                onChange={e => setInput(e.target.value)}\r\n                onBlur={handleBlur}\r\n                autoFocus={task.name === ''}\r\n            /> */}\r\n            <div className='subtask_info'>\r\n                <span className='subtask_plan'>{dateFormat}</span>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n// export default SortableElement(Subtask)","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { addSubtaskThunk } from '../../redux/tasksThunks';\r\nimport { CURRENT_TASK } from '../../config/domain';\r\n\r\nimport './Subtask.css'\r\n\r\n\r\nexport const SubtaskEdit = ({ name = '', close, goal, balance, parent }) => {\r\n\r\n    const [input, setInput] = useState(name)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13) {\r\n            dispatch(addSubtaskThunk({...CURRENT_TASK, goal, balance, parent, name: input}))\r\n            close()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='subtask'>\r\n            <input\r\n                className='subtask_input'\r\n                value={input}\r\n                onChange={e => setInput(e.target.value)}\r\n                onKeyPress={saveKeyHandler}\r\n                autoFocus={name === ''}\r\n            />\r\n        </div>\r\n    );\r\n};","import { Spin } from 'antd';\r\nimport React, { useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectTasks } from '../../redux/taskReducer';\r\nimport { doTaskThunk } from '../../redux/tasksThunks';\r\n\r\nimport './Do.css'\r\n\r\n\r\nexport const Do = ({ task }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [current, setCurrent] = useState(false)\r\n\r\n    const { isFetching } = useSelector(selectTasks)\r\n\r\n    const doneHandler = async () => {\r\n        await dispatch(doTaskThunk(task.id))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                (isFetching && current)\r\n                    ? <Spin />\r\n                    : <div\r\n                        className='docheck'\r\n                        onClick={doneHandler}\r\n                    />\r\n            }\r\n        </>\r\n\r\n        // <div\r\n        //     className='docheck'\r\n        //     onClick={doneHandler}\r\n        // />\r\n    )\r\n}","import { setError, setProjects, toggleFetching, setProject } from \"./taskReducer\"\r\nimport axios from '../config/axios'\r\n\r\nexport const getProjectsThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('projects')\r\n        dispatch(setProjects(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}\r\n\r\nexport const getProjectThunk = (project_id) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('projects/' + project_id)\r\n        dispatch(setProject(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}\r\n\r\nexport const deleteProjectThunk = (project_id) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.delete('projects/' + project_id)\r\n        // dispatch(setProject(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Select } from 'antd';\r\n\r\nimport { selectTasks, changeCurrentTask } from '../../redux/taskReducer';\r\nimport { getProjectsThunk, getProjectThunk } from '../../redux/projectsThunks';\r\nimport './ParentTask.css'\r\n\r\n\r\nexport const ParentTask = ({ id, name }) => {\r\n\r\n    const [isParent, setIsParent] = useState(false)\r\n    const { projects, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const startChooseParent = async () => {\r\n        if (projects.length === 0) {\r\n            dispatch(getProjectsThunk())\r\n        }\r\n        setIsParent(true)\r\n    }\r\n\r\n    const handleChangeType = (value, values) => {\r\n        // dispatch(changeCurrentTask({ type: 'parentid', value: values.value }))\r\n        dispatch(changeCurrentTask({ type: 'parent', value: values.value }))\r\n        dispatch(changeCurrentTask({ type: 'parentname', value: values.children }))\r\n        const project = projects.find(project => project.id === value)\r\n        dispatch(changeCurrentTask({ type: 'balance', value: project.balance }))\r\n        dispatch(changeCurrentTask({ type: 'goal', value: project.goal }))\r\n    }\r\n\r\n    const clickHandler = () => {\r\n        dispatch(getProjectThunk(id))\r\n    }\r\n\r\n    const { Option } = Select;\r\n\r\n    if (isParent) {\r\n        return (\r\n            <Select\r\n                showSearch\r\n                style={{ width: '100%' }}\r\n                // onChange={value => handleChangeType(value, 'child')} value={currentTask.child}\r\n                onChange={handleChangeType}\r\n                // value={currentTask.child}\r\n                filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                }\r\n            >\r\n                {\r\n                    projects.map(task => <Option value={task.id}>{task.name}</Option>)\r\n                }\r\n            </Select>\r\n        )\r\n    }\r\n\r\n\r\n    if (!name) {\r\n        return (\r\n            <a\r\n                onClick={startChooseParent}\r\n            >\r\n                Добавить родителя\r\n            </a>)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='parenttask'\r\n                onClick={clickHandler}\r\n\r\n            >\r\n                {name}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n// export const ParentTask = ({ task }) => {\r\n\r\n//     const dispacth = useDispatch()\r\n\r\n//     const clickHandler = () => {\r\n//         dispacth(setModal({typeOfModal: 'edit', currentTask: task}))\r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             <div\r\n//                 className='parenttask'\r\n//                 onClick={clickHandler}\r\n\r\n//             >\r\n//                 {task.name}\r\n//             </div>\r\n//         </>\r\n//     )\r\n// }","import { setError, setDay, toggleFetching } from \"./taskReducer\"\r\nimport axios from '../config/axios'\r\n\r\n\r\nexport const getDayThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('days')\r\n        dispatch(setDay(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}\r\n\r\nexport const addDayTextThunk = (text) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.post('days', { text })\r\n        dispatch(setDay(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n\r\n\r\n\r\n\r\n    // dispatch(toggleFetching())\r\n    // await API.days.addDayText(text)\r\n    // dispatch(setDay(true))\r\n    // dispatch(closeModal())\r\n    // dispatch(toggleFetching())\r\n}\r\n","import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\nimport { ModalNew } from './ModalNew';\r\n\r\nimport './ModalForm.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectTasks, closeModal } from '../../redux/taskReducer';\r\nimport { ProjectForm } from './ProjectForm';\r\nimport { TaskForm } from './TaskForm';\r\nimport { DayNew } from './DayNew';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        width: '500px',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n};\r\n\r\n\r\nconst modals = {\r\n    project: ProjectForm,\r\n    task: TaskForm,\r\n    new: ModalNew,\r\n    day: DayNew,\r\n};\r\n\r\n\r\nexport const ModalForm = () => {\r\n\r\n    const { modalIsOpen, typeOfModal } = useSelector(selectTasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const ModalComponent = modals[typeOfModal];\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalIsOpen}\r\n            onRequestClose={() => dispatch(closeModal())}\r\n            ariaHideApp={false}\r\n            style={customStyles}\r\n        >\r\n            <ModalComponent />\r\n        </Modal>\r\n    )\r\n}","import { useState } from 'react';\r\nimport { Select, Button, Switch } from 'antd';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Subtask } from '../Subtask/Subtask';\r\nimport { SubtaskEdit } from '../Subtask/SubtaskEdit';\r\nimport { Do } from '../Do/Do';\r\n\r\nimport { changeCurrentTask, selectTasks } from '../../redux/taskReducer';\r\nimport { saveTaskThunk } from '../../redux/tasksThunks';\r\nimport { deleteProjectThunk } from '../../redux/projectsThunks';\r\n\r\nimport './ModalForm.css'\r\n\r\n\r\n\r\n\r\nexport const ProjectForm = () => {\r\n\r\n    const { Option } = Select;\r\n    const { currentTask, tasks, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [isSubtask, setIsSubtask] = useState(false)\r\n\r\n    const handleChangeName = e => {\r\n        // changeCurrentTask('name', e.target.value)\r\n        dispatch(changeCurrentTask({ type: 'name', value: e.target.value }))\r\n    }\r\n\r\n    const handleChangeType = (value, option) => {\r\n        dispatch(changeCurrentTask({ type: option, value }))\r\n    }\r\n\r\n\r\n    // const keyPressHandler = e => {\r\n    //     if (e.keyCode === 13 && e.ctrlKey) {\r\n    //         setIsSubtask(true)\r\n    //     }\r\n    // }\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deleteProjectThunk(currentTask.id))\r\n    }\r\n\r\n    const saveCurrentTask = () => {\r\n        if (currentTask.balance) {\r\n            dispatch(saveTaskThunk(currentTask))\r\n        }\r\n    }\r\n\r\n    // const sortHandler = async ({ oldIndex, newIndex }) => {\r\n    //     // setTasks(tasks => arrayMove(tasks, oldIndex, newIndex))\r\n    //     // await API.reindex(plan, oldIndex, newIndex)\r\n    // }\r\n\r\n    const parentTasks = tasks.find(task => task.id === currentTask.child)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className='flex'>\r\n                    <Do task={currentTask} />\r\n                    <TextareaAutosize\r\n                        className='inputtext inputtext-name'\r\n                        value={currentTask.name}\r\n                        onChange={handleChangeName}\r\n                        onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault()}}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className='input_block'>\r\n                <div className='input_div'>\r\n                    <div>Сфера жизни</div>\r\n                    <Select\r\n                        onChange={value => handleChangeType(value, 'balance')}\r\n                        value={currentTask.balance}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value=\"работа\">работа</Option>\r\n                        <Option value=\"проект\">проект</Option>\r\n                        <Option value=\"развитие\">развитие</Option>\r\n                        <Option value=\"семья\">семья</Option>\r\n                        <Option value=\"здоровье\">здоровье</Option>\r\n                        <Option value=\"быт\">быт</Option>\r\n                        <Option value=\"отдых\">отдых</Option>\r\n                    </Select>\r\n                </div>\r\n                <div className='input_div'>\r\n                    <div>Цель</div>\r\n                    <Switch defaultChecked={currentTask.goal} onChange={value => handleChangeType(value, 'goal')} />\r\n                </div>\r\n            </div>\r\n            <div className='subtask_block'>\r\n                <div>Подзадачи</div>\r\n                <div\r\n                    onClick={() => setIsSubtask(true)}\r\n                    className='subtask_button'\r\n                >\r\n                    +\r\n                </div>\r\n            </div>\r\n            {\r\n                currentTask.subtasks.map((subtask, index) => (\r\n                    <Subtask\r\n                        task={subtask}\r\n                        key={subtask.id}\r\n                        index={index}\r\n                    />\r\n                ))\r\n            }\r\n            {\r\n                isSubtask\r\n                    ? <SubtaskEdit\r\n                        close={() => setIsSubtask(false)}\r\n                        goal={currentTask.goal}\r\n                        balance={currentTask.balance}\r\n                        parent={currentTask.id}\r\n                    />\r\n                    : null\r\n            }\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveCurrentTask}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n                <Button\r\n                    onClick={deleteHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Удалить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { DatePicker, Select, Button, Radio, Switch } from 'antd';\r\nimport moment from 'moment';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { ParentTask } from '../ParentTask/ParentTask';\r\nimport { Do } from '../Do/Do';\r\nimport { changeCurrentTask, selectTasks } from '../../redux/taskReducer';\r\nimport { deleteTaskThunk, saveTaskThunk } from '../../redux/tasksThunks';\r\nimport { getDateFromConstant } from '../../config/helpers';\r\nimport { DATE_CONSTANTS } from '../../config/domain';\r\n\r\nimport './ModalForm.css'\r\n\r\n\r\n\r\nexport const TaskForm = () => {\r\n\r\n    const { Option } = Select;\r\n    const { currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleChangeName = e => {\r\n        changeCurrentTask('name', e.target.value)\r\n        dispatch(changeCurrentTask({ type: 'name', value: e.target.value }))\r\n    }\r\n\r\n    const handleChangeData = (value, type) => {\r\n        if (value.target) {\r\n            dispatch(changeCurrentTask({ type, value: value.target.value }))\r\n        } else {\r\n            dispatch(changeCurrentTask({ type, value }))\r\n        }\r\n\r\n    }\r\n\r\n    const handleChangeDate = (date, dateString) => {\r\n        dispatch(changeCurrentTask({ type: 'date', value: dateString }))\r\n    }\r\n\r\n    const setDateFromConstants = (dateConstant) => {\r\n        const date = getDateFromConstant(dateConstant)\r\n        dispatch(changeCurrentTask({ type: 'date', value: date }))\r\n    }\r\n\r\n    // const keyPressHandler = e => {\r\n    //     if (e.keyCode === 13 && e.ctrlKey) {\r\n    //         setIsSubtask(true)\r\n    //     }\r\n    // }\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deleteTaskThunk(currentTask.id, currentTask.parent))\r\n    }\r\n\r\n    const saveCurrentTask = () => {\r\n        if (!currentTask.balance && currentTask.child === 0) {\r\n            return\r\n        }\r\n        dispatch(saveTaskThunk(currentTask))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ParentTask\r\n                name={currentTask.parentname}\r\n                id={currentTask.parentid}\r\n            />\r\n\r\n            <div>\r\n                <div className='flex'>\r\n                    <Do task={currentTask} />\r\n                    <TextareaAutosize\r\n                        className='inputtext inputtext-name'\r\n                        value={currentTask.name}\r\n                        onChange={handleChangeName}\r\n                    />\r\n                </div>\r\n            </div>\r\n            {\r\n                currentTask.date\r\n                    ? <div className='input_block'>\r\n                        <div className='input_div'>\r\n                            <div>Дата</div>\r\n                            <DatePicker\r\n                                // value={currentTask.date ? moment(currentTask.date, 'YYYY-MM-DD') : null}\r\n                                value={currentTask.date ? moment(currentTask.date) : null}\r\n                                onChange={handleChangeDate}\r\n                                // onChange={value => handleChangeData(value, 'date')}\r\n                                style={{ width: 200 }}\r\n                                size='large'\r\n                            />\r\n                            <div>\r\n                                {\r\n                                    DATE_CONSTANTS.map(item => <span key={item.eng} className='date_constant' onClick={() => setDateFromConstants(item.eng)}>{item.ru}</span>)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='input_div'>\r\n                            <div>Важно</div>\r\n                            <Switch defaultChecked={currentTask.important} onChange={value => handleChangeData(value, 'important')} />\r\n                        </div>\r\n                    </div>\r\n                    : <>\r\n                        <div className='input_block'>\r\n\r\n                            <div className='input_div'>\r\n                                <div>Тип задачи</div>\r\n                                <Radio.Group onChange={value => handleChangeData(value, 'type')} value={currentTask.type}>\r\n                                    <Radio value={\"задача\"}>задача</Radio>\r\n                                    <Radio value={\"проект\"}>проект</Radio>\r\n                                </Radio.Group>\r\n                            </div>\r\n\r\n                            <div className='input_div'>\r\n                                <div>Сфера жизни</div>\r\n                                <Select\r\n                                    onChange={value => handleChangeData(value, 'balance')}\r\n                                    value={currentTask.balance}\r\n                                    style={{ width: 200 }}\r\n                                    size='large'\r\n                                >\r\n                                    <Option value=\"работа\">работа</Option>\r\n                                    <Option value=\"проект\">проект</Option>\r\n                                    <Option value=\"развитие\">развитие</Option>\r\n                                    <Option value=\"семья\">семья</Option>\r\n                                    <Option value=\"здоровье\">здоровье</Option>\r\n                                    <Option value=\"быт\">быт</Option>\r\n                                    <Option value=\"отдых\">отдых</Option>\r\n                                </Select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='input_block'>\r\n                            <div className='input_div'>\r\n                                <div>Цель</div>\r\n                                <Switch defaultChecked={currentTask.goal} onChange={value => handleChangeData(value, 'goal')} />\r\n                            </div>\r\n                            <div className='input_div'>\r\n                                <div>Важно</div>\r\n                                <Switch defaultChecked={currentTask.important} onChange={value => handleChangeData(value, 'important')} />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='input_block'>\r\n                            <div className='input_div'>\r\n                                <div>Дата</div>\r\n                                <DatePicker\r\n                                    // value={currentTask.date ? moment(currentTask.date, 'YYYY-MM-DD') : null}\r\n                                    value={currentTask.date ? moment(currentTask.date) : null}\r\n                                    onChange={handleChangeDate}\r\n                                    // onChange={value => handleChangeData(value, 'date')}\r\n                                    style={{ width: 200 }}\r\n                                    size='large'\r\n                                />\r\n                                <div>\r\n                                    {\r\n                                        DATE_CONSTANTS.map(item => <span key={item.eng} className='date_constant' onClick={() => setDateFromConstants(item.eng)}>{item.ru}</span>)\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n            }\r\n\r\n\r\n\r\n\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveCurrentTask}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n                <Button\r\n                    onClick={deleteHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Удалить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { Button } from 'antd';\r\n\r\nimport { selectTasks } from '../../redux/taskReducer';\r\nimport { addTaskThunk } from '../../redux/tasksThunks';\r\n\r\nimport './ModalForm.css'\r\n\r\nexport const ModalNew = () => {\r\n\r\n    const [name, setName] = useState('')\r\n\r\n    const { currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13) {\r\n            event.preventDefault();\r\n            if (name !== '') {\r\n                dispatch(addTaskThunk({ ...currentTask, name: name }))\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveHandler = () => {\r\n        if (name !== '') {\r\n            dispatch(addTaskThunk({ ...currentTask, name: name }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onKeyPress={saveKeyHandler}\r\n        >\r\n            <TextareaAutosize\r\n                value={name}\r\n                className='inputtext inputtext-name'\r\n                onChange={e => setName(e.target.value)}\r\n                autoFocus\r\n            />\r\n            {/* <input\r\n                value={name}\r\n                className='input_name'\r\n                onChange={e => setName(e.target.value)}\r\n                autoFocus\r\n            /> */}\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { Button } from 'antd';\r\n\r\nimport { selectTasks } from '../../redux/taskReducer';\r\n// import { addTaskThunk } from '../../redux/thunks';\r\nimport { addDayTextThunk } from '../../redux/daysThunks';\r\n\r\nimport './ModalForm.css'\r\n\r\nexport const DayNew = () => {\r\n\r\n    const [text, setText] = useState('')\r\n\r\n    const { currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13 && event.ctrlKey) {\r\n            if (text !== '') {\r\n                dispatch(addDayTextThunk(text))\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveHandler = () => {\r\n        if (text !== '') {\r\n            dispatch(addDayTextThunk(text))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onKeyPress={saveKeyHandler}\r\n        >\r\n            <TextareaAutosize\r\n                value={text}\r\n                className='inputtext inputtext-day'\r\n                onChange={e => setText(e.target.value)}\r\n                autoFocus\r\n            />\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { selectTasks, setModal } from '../../redux/taskReducer';\r\nimport { MODAL_TYPES } from '../../config/domain';\r\n\r\nimport './MainHeader.css'\r\n\r\n\r\nexport const MainHeader = () => {\r\n\r\n    const { daytext } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const openDayModal = () => {\r\n        dispatch(setModal({typeOfModal: MODAL_TYPES.day}))\r\n    }\r\n\r\n    return (\r\n        <div className='mainheader'>\r\n            <div>\r\n                <NavLink className='mainheader_item' to='/goals'>Цели</NavLink>\r\n                <NavLink className='mainheader_item' to='/projects'>Проекты</NavLink>\r\n                <NavLink className='mainheader_item' to='/tasks'>Общее планирование</NavLink>\r\n                <NavLink className='mainheader_item' to='/today'>Планирование дня</NavLink>\r\n                <NavLink className='mainheader_item' to='/do'>Выполнение</NavLink>\r\n                {\r\n                    daytext ? null : <span onClick={openDayModal} className='dayinform'>Вступительное слово</span>\r\n                }\r\n                <span></span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './Action.css'\r\n\r\nexport const Action = ({ important, date }) => {\r\n\r\n    const classes = ['action']\r\n    if (important) {\r\n        classes.push('important')\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n        >\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport moment from 'moment';\r\n\r\nimport { setCurrentTask, setModal } from '../../redux/taskReducer';\r\nimport { Do } from '../Do/Do';\r\nimport { Action } from '../Action/Action';\r\nimport { TASK_TYPES } from '../../config/domain';\r\n\r\nimport './index.css'\r\n\r\n\r\nexport const Task = ({ value, type }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const clickHandler = () => {\r\n        dispatch(setModal({ typeOfModal: 'task' }))\r\n        dispatch(setCurrentTask(value))\r\n    }\r\n\r\n    let taskClasses = ['task']\r\n    if (type === TASK_TYPES.done) {\r\n        taskClasses.push('task-done')\r\n    }\r\n\r\n    let classes = ['task_name']\r\n    if (value.goal) {\r\n        classes.push('task_goal')\r\n    }\r\n\r\n    // if (value.plan === 'today' && moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     classes.push('goal')\r\n    // }\r\n\r\n\r\n\r\n    // if (value.type === 'проект') {\r\n    //     classes.push('project')\r\n    // }\r\n\r\n    // let dateClasses = ['task_tag']\r\n    // if (moment(today).isSame(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('day_today')\r\n    // }\r\n    // if (moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('importantTag')\r\n    // }\r\n\r\n    // let periodClasses = ['task_tag']\r\n    // if (value.period === 5) {\r\n    //     periodClasses.push('importantTag')\r\n    // }\r\n\r\n    const daysBetweenFromToday = moment().diff(moment(value.date, 'YYYY-MM-DD'), 'days')\r\n\r\n    return (\r\n        <div\r\n            className={taskClasses.join(' ')}\r\n        >\r\n            <div className='task_left'>\r\n                <div className='task_tools'>\r\n                    <Action important={value.important || value.goal} date={value.date} />\r\n                    <Do task={value} />\r\n                </div>\r\n                <div\r\n                    className='task_name'\r\n                    onClick={clickHandler}\r\n                >\r\n                    <span\r\n                        className={classes.join(' ')}\r\n                    >\r\n                        {value.name}\r\n                    </span>\r\n                    {\r\n                        value.parentname\r\n                            ? <span className='task_children'>\r\n                                {`<  ${value.parentname}`}\r\n                            </span>\r\n                            : value.isparent\r\n                                ? <span className='task_children'>{' >'}</span>\r\n                                : null\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className='task_right'>\r\n                <span className={!!daysBetweenFromToday ? 'task_tag task-overdue': 'task_tag'}>{!!daysBetweenFromToday && daysBetweenFromToday}</span>\r\n                <span className='task_tag'>{value.balance}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { useSelector } from 'react-redux';\r\n\r\nimport { selectTasks } from '../redux/taskReducer';\r\nimport { Task } from '../components/Task/Task';\r\nimport { TASK_TYPES } from '../config/domain';\r\nimport { filterTodayTasks, getDatesForPeriod } from '../config/helpers';\r\n\r\n\r\n\r\nexport const Tasks = () => {\r\n\r\n    const { tasks } = useSelector(selectTasks)\r\n\r\n    const dates = getDatesForPeriod(14)\r\n\r\n    const todayTasks = filterTodayTasks(tasks)\r\n    const inboxTasks = tasks.filter(task => !task.date && !task.parent)\r\n    const otherTasks = tasks.filter(task => task.date)\r\n\r\n    return (\r\n        <>\r\n            <div className='block'>\r\n                <h3>Инбокс</h3>\r\n                {\r\n                    inboxTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                            type={TASK_TYPES.plan}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            <div className='block'>\r\n                <h3>СЕГОДНЯ</h3>\r\n                {\r\n                    todayTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                            type={TASK_TYPES.plan}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            {\r\n                dates.map((date, index) => {\r\n                    const tasksForDate = otherTasks.filter(task => task.date === date.raw)\r\n                    return (\r\n                        <div className='block' key={index}>\r\n                            <h3>{date.show}</h3>\r\n                            {\r\n                                tasksForDate.map((task, index) => (\r\n                                    <Task\r\n                                        key={task.id}\r\n                                        index={index}\r\n                                        value={task}\r\n                                        type={TASK_TYPES.plan}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { selectTasks } from '../../redux/taskReducer';\r\nimport { getProjectThunk } from '../../redux/projectsThunks';\r\n\r\nimport { Action } from '../Action/Action';\r\n\r\n\r\nexport const Project = ({ value, type, childname, childdate }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const today = new Date()\r\n\r\n    const { filtertype } = useSelector(selectTasks)\r\n\r\n    const openProject = async () => {\r\n        const task = await dispatch(getProjectThunk(value.id))        \r\n    }\r\n\r\n\r\n    let classes = ['task_name']\r\n    if (value.goal) {\r\n        classes.push('task_goal')\r\n    }\r\n\r\n    // if (value.plan === 'today' && moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     classes.push('goal')\r\n    // }\r\n\r\n\r\n\r\n    // if (value.type === 'проект') {\r\n    //     classes.push('project')\r\n    // }\r\n\r\n    // let dateClasses = ['task_tag']\r\n    // if (moment(today).isSame(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('day_today')\r\n    // }\r\n    // if (moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('importantTag')\r\n    // }\r\n\r\n    // let periodClasses = ['task_tag']\r\n    // if (value.period === 5) {\r\n    //     periodClasses.push('importantTag')\r\n    // }\r\n\r\n\r\n\r\n    return (\r\n        <div\r\n            className='task'\r\n            // onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: value }))}\r\n            onClick={openProject}\r\n        >\r\n            <div className='task_left'>\r\n                <div className='task_tools'>\r\n                    <Action type={value.action} />\r\n                </div>\r\n                <div\r\n                    className='task_name'\r\n                // onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: value }))}\r\n                >\r\n                    <span\r\n                        className={classes.join(' ')}\r\n                    >\r\n                        {value.name}\r\n                    </span>\r\n                </div>\r\n                {\r\n                    childname ? <span className='task_children'>{` > ${childname}`}</span> : null\r\n                }\r\n\r\n            </div>\r\n\r\n\r\n            <div className='task_right'>\r\n                <div>\r\n                    <span className='task_tag'>{childdate}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useSelector } from 'react-redux';\r\n\r\nimport { selectTasks } from '../redux/taskReducer';\r\nimport { BALANCE } from '../config/domain';\r\nimport { Project } from '../components/Project/Project';\r\nimport { useState } from 'react';\r\n\r\n\r\n\r\n\r\nexport const Projects = () => {\r\n\r\n    const [filter, setFilter] = useState(BALANCE[0])\r\n\r\n    const { projects } = useSelector(selectTasks)\r\n\r\n    // if (projects.length === 0) return null\r\n\r\n    const navClickHandler = event => {\r\n        setFilter(event.target.textContent.toLowerCase())\r\n    }\r\n\r\n\r\n\r\n    const filteredProjects = projects.filter(project => project.balance === filter)\r\n\r\n    return (\r\n        <div>\r\n            <div className='block'>\r\n                {\r\n                    BALANCE.map(item => (\r\n                        <span\r\n                            className={`nav${filter === item ? ' nav-active' : ''}`}\r\n                            onClick={navClickHandler}\r\n                            key={item}\r\n                        >\r\n                            {item.toUpperCase()}\r\n                        </span>)\r\n                    )\r\n                }\r\n            </div>\r\n\r\n            {\r\n                filteredProjects.map(project => {\r\n                    return (\r\n                        <Project\r\n                            key={project.id}\r\n                            // index={index}\r\n                            value={project}\r\n                            childname={project.childname}\r\n                            childdate={project.childdate}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            {/* {\r\n                BALANCE.map(item => {\r\n                    const tasks = projects.filter(task => task.balance === item)\r\n                    return (\r\n                        <div className='block' key={item}>\r\n                            <h3>{item.toUpperCase()}</h3>\r\n                            {\r\n                                tasks.map((task, index) => (\r\n                                    <Project\r\n                                        key={task.id}\r\n                                        index={index}\r\n                                        value={task}\r\n                                        childname={task.childname}\r\n                                        childdate={task.childdate}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                })\r\n            } */}\r\n        </div>\r\n    )\r\n}","import 'moment/locale/ru';\r\n\r\n\r\nimport { Task } from '../components/Task/Task';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectTasks } from '../redux/taskReducer';\r\nimport { filterTodayTasks } from '../config/helpers';\r\nimport { TASK_TYPES } from '../config/domain';\r\n\r\n\r\n\r\nexport const Today = () => {\r\n\r\n    const { tasks, doneTasks } = useSelector(selectTasks)\r\n\r\n    const todaytasks = filterTodayTasks(tasks)\r\n\r\n    return (\r\n        <div>\r\n            <div className='plantask_div'>\r\n                <h3>СЕГОДНЯ</h3>\r\n                {\r\n                    todaytasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            {\r\n                doneTasks.length > 0\r\n                    ? <div className='block'>\r\n                        <h3>ВЫПОЛНЕНО</h3>\r\n                        {\r\n                            doneTasks.map((task, index) => (\r\n                                <Task\r\n                                    key={task.id}\r\n                                    index={index}\r\n                                    value={task}\r\n                                    type={TASK_TYPES.done}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { selectTasks, setModal } from '../../redux/taskReducer';\r\nimport { getProjectThunk } from '../../redux/thunks';\r\n\r\nimport { Action } from '../Action/Action';\r\n\r\nimport './Goal.css'\r\n\r\n\r\nexport const Goal = ({ name, description, balance }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { filtertype } = useSelector(selectTasks)\r\n\r\n    const openProject = async () => {\r\n        // const task = await dispatch(getProjectThunk(value.id))        \r\n    }\r\n\r\n    return (\r\n        <div\r\n            className='goal'\r\n            // onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: value }))}\r\n            // onClick={openProject}\r\n        >            \r\n            <div className='goal_name'>{name}</div>\r\n            <div className='goal_description'>{description}</div>\r\n        </div>\r\n    )\r\n}","import { useSelector } from 'react-redux';\r\n\r\nimport { selectTasks } from '../redux/taskReducer';\r\nimport { Goal } from '../components/Goal/Goal';\r\n\r\n\r\nexport const Goals = () => {\r\n\r\n    const { goals } = useSelector(selectTasks)\r\n\r\n    // const navClickHandler = event => {\r\n    //     setFilter(event.target.textContent.toLowerCase())\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                goals.map(goal => {\r\n                    return (\r\n                        <Goal\r\n                            key={goal.id}\r\n                            // index={index}\r\n                            name={goal.name}\r\n                            description={goal.description}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { HotKeys, GlobalHotKeys } from 'react-hotkeys';\r\n\r\nimport { openNewTask, selectTasks } from './redux/taskReducer'\r\n// import { Focus } from './pages/Focus';\r\nimport { ModalForm } from './components/ModalForm/ModalForm';\r\nimport { MainHeader } from './components/MainHeader/MainHeader';\r\nimport { Tasks } from './pages/Tasks';\r\nimport { Projects } from './pages/Projects';\r\nimport { Today } from './pages/Today';\r\nimport { Goals } from './pages/Goals';\r\n\r\nimport { getProjectsThunk } from './redux/projectsThunks';\r\nimport { getTasksThunk, getDoneTasksThunk } from './redux/tasksThunks';\r\nimport { getDayThunk } from './redux/daysThunks';\r\nimport { getGoalsThunk } from './redux/goalsThunks';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './App.css'\r\n\r\n\r\n// import ErrorBoundary from './components/Error/ErrorBoundary';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const { error } = useSelector(selectTasks)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const keyMap = {\r\n    MOVE_UP: \"ctrl+enter\"\r\n  };\r\n\r\n  const handlers = {\r\n    MOVE_UP: event => dispatch(openNewTask())\r\n    // setModal({ typeOfModal: 'new', currentTask: CURRENT_TASK }))\r\n    // MOVE_UP: event => dispatch(setModal({ typeOfModal: 'new', currentTask: CURRENT_TASK }))\r\n  };\r\n\r\n\r\n  const getData = async () => {\r\n    await dispatch(getDayThunk())\r\n    await dispatch(getTasksThunk())\r\n    await dispatch(getDoneTasksThunk())\r\n    await dispatch(getProjectsThunk())\r\n    await dispatch(getGoalsThunk())\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData()\r\n  }, [])\r\n\r\n  if (error) {\r\n    return <div>{error}</div>\r\n  }\r\n\r\n  return (\r\n    <GlobalHotKeys keyMap={keyMap} handlers={handlers}>\r\n        <div className='App'>\r\n          <div className='wrapper'>\r\n            <MainHeader />\r\n            <Switch>\r\n              <Route exact path='/' component={Tasks} />\r\n              <Route exact path='/goals' component={Goals} />\r\n              <Route exact path='/tasks' component={Tasks} />\r\n              <Route exact path='/today' component={Today} />\r\n              <Route exact path='/projects' component={Projects} />\r\n              {/* <Route path='/focus' component={Focus} /> */}\r\n            </Switch>\r\n            <ModalForm />\r\n          </div>\r\n        </div>\r\n    </GlobalHotKeys>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { setError, setGoals, toggleFetching } from \"./taskReducer\"\r\nimport axios from '../config/axios'\r\n\r\n\r\n\r\nexport const getGoalsThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('goals')\r\n        dispatch(setGoals(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nexport default configureStore({\r\n  // reducer: {\r\n  //   state: taskReducer\r\n  // },\r\n  reducer: taskReducer  ,\r\n  middleware: getDefaultMiddleware(),\r\n  devTools: process.env.NODE_ENV !== 'production', // по необходимости\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport './index.css'\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}