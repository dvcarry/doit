{"version":3,"sources":["config/domain.js","redux/taskReducer.js","config/helpers.js","config/axios.js","redux/tasksThunks.js","components/Subtask/Subtask.js","components/Subtask/SubtaskEdit.js","components/Do/Do.js","redux/projectsThunks.js","components/ParentTask/ParentTask.js","redux/daysThunks.js","components/ModalForm/ModalForm.js","components/ModalForm/ProjectForm.js","components/ModalForm/TaskForm.js","components/ModalForm/ModalNew.js","components/ModalForm/DayNew.js","components/MainHeader/MainHeader.js","components/Action/Action.js","components/Task/Task.js","components/Breaks/Breaks.js","pages/Tasks.js","components/Project/Project.js","pages/Projects.js","pages/Today.js","components/Goal/Goal.js","pages/Goals.js","App.js","redux/goalsThunks.js","redux/store.js","index.js"],"names":["CURRENT_TASK","id","name","type","period","balance","parent","goal","today","repeat","plan","date","done","donedate","action","repeatday","BALANCE","TASK_TYPES","DATE_CONSTANTS","eng","ru","days","MODAL_TYPES","tasksSlice","createSlice","initialState","goals","tasks","projects","currentTask","isFetching","modalIsOpen","typeOfModal","todaytasks","doneTasks","daytext","error","breaks","focus","reducers","toggleFetching","state","setTasks","payload","setDoneTasks","setDay","saveTask","newTasks","map","task","addTask","deleteTask","filter","deleteProject","newProjects","project","setProjects","setPlan","filtertype","setWeek","week","doTask","find","hasParent","setCurrentTask","setModal","openNewTask","setProject","changeToProject","setTask","changeTask","newDoneTasks","closeModal","changeCurrentTask","addSubtask","subtasks","setCurrentDay","setCurrentPlan","isplan","setSearch","search","setGoals","setError","resetBreaks","setFocus","actions","setPlanTasks","setTodayTasks","selectTasks","filterTodayTasks","Date","moment","sort","wait","important","instance","axios","create","baseURL","defaults","headers","common","localStorage","getItem","saveTaskThunk","dispatch","a","put","response","statusText","addTaskThunk","newTask","post","data","doTaskThunk","changeToProjectThunk","task_id","changeCurrentTaskThunk","changedData","Subtask","change","useState","useDispatch","dateFormat","dateFormatArray","split","className","onClick","get","SubtaskEdit","close","input","setInput","value","onChange","e","target","onKeyPress","event","charCode","autoFocus","Do","current","useSelector","doneHandler","getProjectsThunk","getProjectThunk","project_id","Option","Select","ParentTask","isParent","setIsParent","startChooseParent","length","showSearch","style","width","values","addToProjectThunk","children","filterOption","option","toLowerCase","indexOf","addDayTextThunk","text","customStyles","content","top","left","right","bottom","marginRight","transform","modals","isSubtask","setIsSubtask","handleChangeType","child","key","preventDefault","size","defaultChecked","subtask","index","loading","delete","handleChangeData","console","log","setDateFromConstants","dateConstant","date_constant","item","result","add","format","getDateFromConstant","ImportantBlock","ActionBlock","DateBlock","dateString","BalanceBlock","PlannedTask","NotPlannedTask","parentname","parentid","new","setName","day","setText","ctrlKey","ModalForm","ModalComponent","isOpen","onRequestClose","ariaHideApp","MainHeader","to","Action","classes","push","join","Task","taskClasses","daysBetweenFromToday","diff","isparent","newDate","subtract","dateWithId","Breaks","message","showIcon","Tasks","dates","i","dateObject","raw","show","getDatesForPeriod","todayTasks","inboxTasks","otherTasks","tasksForDate","Project","childname","childdate","openProject","Projects","setFilter","navClickHandler","textContent","filteredProjects","toUpperCase","ALL","Today","focusTask","filteredBalance","Set","filteredTasks","filteredDoneTasks","Goal","description","Goals","App","handlers","MOVE_UP","getData","useEffect","keyMap","exact","path","component","configureStore","reducer","taskReducer","middleware","getDefaultMiddleware","devTools","process","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.36e4fb87.chunk.js","sourcesContent":["export const taskFilter = ['все', \"задача\", \"проект\", \"привычка\", \"другое\"]\r\n\r\n\r\nexport const OPTIONS = {\r\n    type: [\r\n        { value: 'задача', label: 'Задача' },\r\n        { value: 'привычка', label: 'Привычка' }\r\n    ],\r\n    balance: [\r\n        { value: 'работа', label: 'Работа' },\r\n        { value: 'проект', label: 'Проект' },\r\n        { value: 'развитие', label: 'Развитие' },\r\n        { value: 'семья', label: 'Семья' },\r\n        { value: 'здоровье', label: 'Здоровье' },\r\n    ],\r\n    period: [\r\n        { value: 15, label: 15 },\r\n        { value: 30, label: 30 },\r\n        { value: 45, label: 45 },\r\n        { value: 60, label: 60 },\r\n        { value: 90, label: 90 },\r\n    ],\r\n    plan: [\r\n        { value: 'today', label: 'today' },\r\n        { value: 'inbox', label: 'inbox' },\r\n        { value: 'upcoming', label: 'upcoming' },\r\n        { value: 'later', label: 'later' },\r\n    ]\r\n}\r\n\r\nexport const CURRENT_TASK = {\r\n    id: 0,\r\n    name: '',\r\n    type: 'задача',\r\n    period: 0,\r\n    balance: '',\r\n    parent: 0,\r\n    goal: false,\r\n    today: false,\r\n    repeat: false,\r\n    plan: 'inbox',\r\n    date: null,\r\n    done: false,\r\n    donedate: null,\r\n    action: null,\r\n    repeatday: 0\r\n}\r\n\r\nexport const BALANCE = ['работа', 'проект', \"семья\", \"здоровье\", \"быт\", \"развитие\", \"отдых\"]\r\nexport const PLANS = ['today', 'week', 'upcoming', \"later\"]\r\n\r\nexport const TASK_TYPES = {\r\n    plan: 'plan',\r\n    done: 'done',\r\n    today: 'today'\r\n}\r\n\r\nexport const DATE_CONSTANTS = [\r\n    { eng: 'today', ru: 'сегодня', days: 0 }, { eng: 'tomorrow', ru: 'завтра', days: 1 }, { eng: 'aftertomorrow', ru: 'послезавтра', days: 2 }\r\n]\r\n\r\nexport const MODAL_TYPES = {\r\n    new: 'new',\r\n    project: 'project',\r\n    task: 'task',\r\n    day: 'day',\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\"\r\nimport { CURRENT_TASK, MODAL_TYPES } from \"../config/domain\";\r\n\r\n\r\n\r\n\r\nexport const tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        goals: [],\r\n        tasks: [],\r\n        projects: [],\r\n        currentTask: null,\r\n        isFetching: false,\r\n        modalIsOpen: false,\r\n        typeOfModal: 'new',\r\n        todaytasks: [],\r\n        doneTasks: [],\r\n        daytext: false,\r\n        error: '',\r\n        breaks: 0,\r\n        focus: null\r\n    },\r\n    reducers: {\r\n        toggleFetching: state => {\r\n            state.isFetching = !state.isFetching\r\n        },\r\n        setTasks: (state, action) => {\r\n            state.tasks = action.payload\r\n            state.isFetching = false\r\n        },\r\n        // setTodayTasks: (state, action) => {\r\n        //     state.todaytasks = action.payload\r\n        //     // state.doneTasks = action.payload.doneTasks\r\n        // },\r\n        setDoneTasks: (state, action) => {\r\n            state.doneTasks = action.payload\r\n        },\r\n        setDay: (state, action) => {\r\n            if (action.payload) {\r\n                state.daytext = true\r\n                state.isFetching = false\r\n                state.modalIsOpen = false\r\n            }\r\n        },\r\n        saveTask: (state) => {\r\n            const newTasks = state.tasks.map(task => task.id === state.currentTask.id ? ({ ...state.currentTask }) : task)\r\n            state.tasks = newTasks\r\n            state.isFetching = false\r\n            state.modalIsOpen = false\r\n        },\r\n        addTask: (state, action) => {\r\n            state.tasks = [...state.tasks, action.payload]\r\n            state.isFetching = false\r\n            state.modalIsOpen = false\r\n        },\r\n        deleteTask: (state, action) => {\r\n            const newTasks = state.tasks.filter(task => task.id !== state.currentTask.id)\r\n            state.tasks = newTasks\r\n        },\r\n        deleteProject: (state, action) => {\r\n            const newProjects = state.projects.filter(project => project.id !== action.payload)\r\n            state.projects = newProjects\r\n        },\r\n        setProjects: (state, action) => {\r\n            state.projects = action.payload\r\n        },\r\n        setPlan: (state, action) => {\r\n            state.plan = action.payload.plan\r\n            state.filtertype = action.payload.filtertype\r\n        },\r\n        setWeek: (state, action) => {\r\n            state.week = action.payload\r\n        },\r\n        doTask: (state, action) => {\r\n\r\n            const { id, parent } = action.payload\r\n            const task = state.tasks.find(task => task.id === id)\r\n            const newTasks = state.tasks.filter(task => task.id !== id)\r\n            state.tasks = newTasks\r\n            state.doneTasks = [...state.doneTasks, task]\r\n\r\n            // открыть родителя если это была подзадача\r\n            // const parentTask = state.tasks.find(task => task.id === parent)\r\n\r\n            if (action.payload.parent.hasParent) {\r\n                state.modalIsOpen = true\r\n                state.typeOfModal = MODAL_TYPES.project\r\n                state.currentTask = action.payload.parent.project\r\n            } else {\r\n                state.modalIsOpen = false\r\n            }\r\n            state.breaks = state.breaks + 1\r\n            state.isFetching = false\r\n        },\r\n        setCurrentTask: (state, action) => {\r\n            state.currentTask = action.payload\r\n        },\r\n        setModal: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = action.payload.typeOfModal\r\n            // const subtasks = state.tasks.filter(task => task.child === action.payload.currentTask.id && !task.done)\r\n            // state.currentTask = { ...action.payload.currentTask, subtasks: subtasks }\r\n        },\r\n        openNewTask: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = MODAL_TYPES.new\r\n            state.currentTask = CURRENT_TASK\r\n        },\r\n        setProject: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = MODAL_TYPES.project\r\n            state.currentTask = action.payload\r\n            state.isFetching = false\r\n        },\r\n        changeToProject: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = MODAL_TYPES.project\r\n            state.currentTask = action.payload\r\n            const newTasks = state.tasks.filter(task => task.id !== action.payload.id)\r\n            state.tasks = newTasks\r\n            const newProjects = [...state.projects, action.payload]\r\n            state.projects = newProjects\r\n            state.isFetching = false\r\n        },\r\n        setTask: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = MODAL_TYPES.task\r\n            state.currentTask = action.payload\r\n            state.isFetching = false\r\n        },\r\n        changeTask: (state, action) => {\r\n            const newTasks = state.tasks.map(task => task.id === action.payload.id ? {...task, ...action.payload} : task)\r\n            state.tasks = newTasks\r\n            if (action.payload.donedate) {\r\n                const newDoneTasks = state.doneTasks.filter(task => task.id !== action.payload.id)\r\n                state.doneTasks = newDoneTasks\r\n            }\r\n            state.isFetching = false\r\n        },\r\n        closeModal: state => {\r\n            state.modalIsOpen = false\r\n        },\r\n        changeCurrentTask: (state, action) => {\r\n            state.currentTask = { ...state.currentTask, ...action.payload }\r\n            // state.currentTask = { ...state.currentTask, [action.payload.type]: action.payload.value }\r\n            const newTasks = state.tasks.map(task => task.id === state.currentTask.id ? { ...task, ...action.payload } : task)\r\n            // const newTasks = state.tasks.map(task => task.id === state.currentTask.id ? { ...task, [action.payload.type]: action.payload.value } : task)\r\n            state.tasks = newTasks\r\n            state.isFetching = false\r\n        },\r\n        addSubtask: (state, action) => {\r\n            state.tasks = [...state.tasks, action.payload]\r\n            // state.tasks[action.payload.plan] = [...state.tasks[action.payload.plan], action.payload]\r\n            state.currentTask.subtasks = [...state.currentTask.subtasks, action.payload]\r\n            state.isFetching = false\r\n        },\r\n        setCurrentDay: (state, action) => {\r\n            state.date = action.payload\r\n        },\r\n        setCurrentPlan: (state, action) => {\r\n            state.isplan = action.payload\r\n        },\r\n        setSearch: (state, action) => {\r\n            state.search = action.payload\r\n        },\r\n        setGoals: (state, action) => {\r\n            state.goals = action.payload\r\n            state.isFetching = false\r\n        },\r\n        setError: (state, action) => {\r\n            state.error = action.payload\r\n            state.isFetching = false\r\n        },\r\n        resetBreaks: (state, action) => {\r\n            state.breaks = 0\r\n        },\r\n        setFocus: (state, action) => {\r\n            state.focus = action.payload\r\n        },\r\n    },\r\n});\r\n\r\n\r\n// actions\r\n\r\nexport const { toggleFetching,\r\n    setTasks, addTask, deleteTask, saveTask, doTask, changeToProject,\r\n    setPlanTasks, setTodayTasks, setDoneTasks,\r\n    setProjects, deleteProject, setProject,\r\n    setCurrentTask, changeCurrentTask,\r\n    addSubtask,\r\n    openNewTask,\r\n    setModal, closeModal,\r\n    setDay,\r\n    setTask, changeTask,\r\n    setGoals,\r\n    setError,\r\n    resetBreaks,\r\n    setFocus,\r\n} = tasksSlice.actions;\r\n\r\n\r\nexport const selectTasks = state => state\r\n\r\n\r\nexport default tasksSlice.reducer;","import moment from 'moment';\r\nimport { DATE_CONSTANTS } from './domain';\r\n\r\nexport const getTimeFromMins = mins => {\r\n    let hours = Math.trunc(mins / 60);\r\n    let minutes = mins % 60;\r\n    return hours + '-' + minutes.toString().padStart(2, 0);\r\n};\r\n\r\nexport const getDatesForPeriod = period => {\r\n    const dates = []\r\n    for (let i = 1; i < period; i++) {\r\n        const date = moment().add(i, 'days')\r\n        const dateObject = { raw: date.format('YYYY-MM-DD'), show: date.format('DD.MM dddd') }\r\n        dates.push(dateObject)\r\n        // onlyDates.push(date.format('YYYY-MM-DD'))\r\n    }\r\n    return dates\r\n};\r\n\r\n\r\nexport const getDateFromConstant = date_constant => {\r\n    const objectFromDateConstant = DATE_CONSTANTS.find(item => item.eng === date_constant)\r\n    const days = objectFromDateConstant.days\r\n    const today = moment()\r\n    const result = today.add(days, 'days')\r\n    const formatResult = moment(result).format('YYYY-MM-DD')\r\n    return formatResult\r\n};\r\n\r\n\r\nexport const filterTodayTasks = tasks => {\r\n    const today = new Date()\r\n    return tasks\r\n        .filter(task => moment(task.date) <= today)\r\n        .sort(task => task.wait ? 1 : -1)\r\n        .sort(task => task.important ? -1 : 1)\r\n        .sort(task => task.goal ? -1 : 1)\r\n}\r\n\r\nexport const getAuthToken = () => {\r\n    const token = localStorage.getItem('do')\r\n    return token\r\n}","import axios from 'axios';\r\nimport { getAuthToken } from './helpers'\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:5002/api/'\r\n    // baseURL: 'http://82.146.40.11:5002/api/'\r\n});\r\n\r\ninstance.defaults.headers.common = { 'Authorization': `Bearer ${getAuthToken()}` }\r\nexport default instance;","import { saveTask, toggleFetching, deleteTask, changeCurrentTask, changeToProject, setProject, closeModal, setError, setTasks, setTask, setDoneTasks, addTask, addSubtask, doTask, changeTask } from \"./taskReducer\"\r\nimport axios from '../config/axios'\r\n\r\nexport const getTasksThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('tasks')\r\n        dispatch(setTasks(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const getTaskThunk = (id) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('tasks/' + id)\r\n        dispatch(setTask(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const getDoneTasksThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('tasks/done')\r\n        dispatch(setDoneTasks(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\n\r\nexport const saveTaskThunk = (task) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        await axios.put('tasks', task)\r\n        dispatch(saveTask())\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\n\r\nexport const addTaskThunk = (newTask) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.post('tasks', newTask)\r\n        dispatch(addTask(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const doTaskThunk = (id) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.post('tasks/do', { id })\r\n        dispatch(doTask({ id, parent: data }))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\n\r\nexport const deleteTaskThunk = (task_id, parent) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        await axios.delete('tasks/' + task_id)\r\n        dispatch(deleteTask(task_id))\r\n        if (parent) {\r\n            // const project = await API.project.getProject(parent)\r\n            const { data } = await axios.get('projects/' + parent)\r\n            dispatch(setProject(data))\r\n        } else {\r\n            dispatch(closeModal())\r\n            dispatch(toggleFetching())\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const changeToProjectThunk = (task_id) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.put('tasks/toproject', { id: task_id })\r\n        dispatch(changeToProject(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const addToProjectThunk = (id, parent) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.put('tasks/addtoproject', { id, parent})\r\n        // dispatch(changeToProject(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const changeSomeTaskThunk = (task_id, data) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const dateWithId = { id: task_id, ...data }\r\n        await axios.put('tasks/one', dateWithId)\r\n        dispatch(changeTask(dateWithId))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const changeCurrentTaskThunk = (task_id, data) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const changedData = { id: task_id, ...data }\r\n        await axios.put('tasks/one', changedData)\r\n        dispatch(changeCurrentTask(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const addSubtaskThunk = (newTask) => async dispatch => {\r\n\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.post('tasks', newTask)\r\n        dispatch(addSubtask(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { getTaskThunk } from '../../redux/tasksThunks';\r\nimport { MODAL_TYPES } from '../../config/domain';\r\nimport './Subtask.css'\r\n\r\n// const DragHandle = sortableHandle(() => <span className='draghandler'>:::</span>);\r\n\r\n\r\nexport const Subtask = ({ task, change }) => {\r\n\r\n    const [input, setInput] = useState(task.name)\r\n    const dispatch = useDispatch()\r\n\r\n    const clickHandler = () => {\r\n        dispatch(getTaskThunk(task.id))\r\n    }\r\n\r\n\r\n    const handleBlur = () => {\r\n        if (input !== '') {\r\n            change(task.id, input)\r\n        }\r\n    }\r\n\r\n    let dateFormat = ''\r\n    if (task.date) {\r\n        const dateFormatArray = task.date.split('-')\r\n        dateFormat = dateFormatArray[2] + '.' + dateFormatArray[1]\r\n    }\r\n\r\n\r\n    return (\r\n        <div\r\n            className='subtask'\r\n            onClick={clickHandler}\r\n        >\r\n            {/* <DragHandle /> */}\r\n            <span>\r\n                {task.name}\r\n            </span>\r\n            {/* <input\r\n                className='subtask_input'\r\n                value={input}\r\n                onChange={e => setInput(e.target.value)}\r\n                onBlur={handleBlur}\r\n                autoFocus={task.name === ''}\r\n            /> */}\r\n            <div className='subtask_info'>\r\n                <span className='subtask_plan'>{dateFormat}</span>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n// export default SortableElement(Subtask)","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { addSubtaskThunk } from '../../redux/tasksThunks';\r\nimport { CURRENT_TASK } from '../../config/domain';\r\n\r\nimport './Subtask.css'\r\n\r\n\r\nexport const SubtaskEdit = ({ name = '', close, goal, balance, parent }) => {\r\n\r\n    const [input, setInput] = useState(name)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13) {\r\n            dispatch(addSubtaskThunk({...CURRENT_TASK, goal, balance, parent, name: input}))\r\n            close()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='subtask'>\r\n            <input\r\n                className='subtask_input'\r\n                value={input}\r\n                onChange={e => setInput(e.target.value)}\r\n                onKeyPress={saveKeyHandler}\r\n                autoFocus={name === ''}\r\n            />\r\n        </div>\r\n    );\r\n};","import { Spin } from 'antd';\r\nimport React, { useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectTasks } from '../../redux/taskReducer';\r\nimport { doTaskThunk } from '../../redux/tasksThunks';\r\n\r\nimport './Do.css'\r\n\r\n\r\nexport const Do = ({ task }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [current, setCurrent] = useState(false)\r\n\r\n    const { isFetching } = useSelector(selectTasks)\r\n\r\n    const doneHandler = async () => {\r\n        await dispatch(doTaskThunk(task.id))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                (isFetching && current)\r\n                    ? <Spin />\r\n                    : <div\r\n                        className='docheck'\r\n                        onClick={doneHandler}\r\n                    />\r\n            }\r\n        </>\r\n\r\n        // <div\r\n        //     className='docheck'\r\n        //     onClick={doneHandler}\r\n        // />\r\n    )\r\n}","import { setError, setProjects, toggleFetching, setProject, closeModal, deleteProject } from \"./taskReducer\"\r\nimport axios from '../config/axios'\r\n\r\nexport const getProjectsThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('projects')\r\n        dispatch(setProjects(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}\r\n\r\nexport const getProjectThunk = (project_id) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('projects/' + project_id)\r\n        dispatch(setProject(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}\r\n\r\nexport const deleteProjectThunk = (project_id) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.delete('tasks/' + project_id)\r\n        dispatch(deleteProject(project_id))\r\n        dispatch(closeModal())\r\n        dispatch(toggleFetching())\r\n        // dispatch(setProject(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Select } from 'antd';\r\n\r\nimport { selectTasks, changeCurrentTask } from '../../redux/taskReducer';\r\nimport { getProjectsThunk, getProjectThunk } from '../../redux/projectsThunks';\r\nimport { addToProjectThunk, changeToProjectThunk } from '../../redux/tasksThunks';\r\n\r\nimport './ParentTask.css'\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nexport const ParentTask = ({ parent, name, id }) => {\r\n\r\n    const [isParent, setIsParent] = useState(false)\r\n    const { projects, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const startChooseParent = async () => {\r\n        if (projects.length === 0) {\r\n            dispatch(getProjectsThunk())\r\n        }\r\n        setIsParent(true)\r\n    }\r\n\r\n    const handleChangeType = (value, values) => {\r\n        dispatch(addToProjectThunk(id, value))\r\n        // dispatch(changeCurrentTask({ type: 'parentid', value: values.value }))\r\n        dispatch(changeCurrentTask({ type: 'parent', value: values.value }))\r\n        dispatch(changeCurrentTask({ type: 'parentname', value: values.children }))\r\n        const project = projects.find(project => project.id === value)\r\n        dispatch(changeCurrentTask({ type: 'balance', value: project.balance }))\r\n        dispatch(changeCurrentTask({ type: 'goal', value: project.goal }))\r\n    }\r\n\r\n    const clickHandler = () => {\r\n        dispatch(getProjectThunk(parent))\r\n    }\r\n    \r\n    const changeToProject = () => {\r\n        dispatch(changeToProjectThunk(id))\r\n    }\r\n\r\n    if (isParent) {\r\n        return (\r\n            <Select\r\n                showSearch\r\n                style={{ width: '100%' }}\r\n                // onChange={value => handleChangeType(value, 'child')} value={currentTask.child}\r\n                onChange={handleChangeType}\r\n                // value={currentTask.child}\r\n                filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                }\r\n            >\r\n                {\r\n                    projects.map(task => <Option value={task.id}>{task.name}</Option>)\r\n                }\r\n            </Select>\r\n        )\r\n    }\r\n\r\n    if (!name) {\r\n        return (\r\n            <div\r\n            className='parenttask'>\r\n                <a onClick={startChooseParent}>Добавить родителя</a>\r\n                <a onClick={changeToProject}>Сделать проектом</a>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='parenttask'\r\n                onClick={clickHandler}\r\n            >\r\n                {name}\r\n            </div>\r\n        </>\r\n    )\r\n};","import { setError, setDay, toggleFetching } from \"./taskReducer\"\r\nimport axios from '../config/axios'\r\n\r\n\r\nexport const getDayThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('days')\r\n        dispatch(setDay(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}\r\n\r\nexport const addDayTextThunk = (text) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.post('days', { text })\r\n        dispatch(setDay(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\nimport { ModalNew } from './ModalNew';\r\n\r\nimport './ModalForm.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectTasks, closeModal } from '../../redux/taskReducer';\r\nimport { ProjectForm } from './ProjectForm';\r\nimport { TaskForm } from './TaskForm';\r\nimport { DayNew } from './DayNew';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        width: '500px',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n};\r\n\r\n\r\nconst modals = {\r\n    project: ProjectForm,\r\n    task: TaskForm,\r\n    new: ModalNew,\r\n    day: DayNew,\r\n};\r\n\r\n\r\nexport const ModalForm = () => {\r\n\r\n    const { modalIsOpen, typeOfModal } = useSelector(selectTasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const ModalComponent = modals[typeOfModal];\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalIsOpen}\r\n            onRequestClose={() => dispatch(closeModal())}\r\n            ariaHideApp={false}\r\n            style={customStyles}\r\n        >\r\n            <ModalComponent />\r\n        </Modal>\r\n    )\r\n}","import { useState } from 'react';\r\nimport { Select, Button, Switch } from 'antd';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Subtask } from '../Subtask/Subtask';\r\nimport { SubtaskEdit } from '../Subtask/SubtaskEdit';\r\nimport { Do } from '../Do/Do';\r\n\r\nimport { changeCurrentTask, selectTasks } from '../../redux/taskReducer';\r\nimport { saveTaskThunk } from '../../redux/tasksThunks';\r\nimport { deleteProjectThunk } from '../../redux/projectsThunks';\r\n\r\nimport './ModalForm.css'\r\n\r\n\r\n\r\n\r\nexport const ProjectForm = () => {\r\n\r\n    const { Option } = Select;\r\n    const { currentTask, tasks, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [isSubtask, setIsSubtask] = useState(false)\r\n\r\n    const handleChangeName = e => {\r\n        // changeCurrentTask('name', e.target.value)\r\n        dispatch(changeCurrentTask({ type: 'name', value: e.target.value }))\r\n    }\r\n\r\n    const handleChangeType = (value, option) => {\r\n        dispatch(changeCurrentTask({ type: option, value }))\r\n    }\r\n\r\n\r\n    // const keyPressHandler = e => {\r\n    //     if (e.keyCode === 13 && e.ctrlKey) {\r\n    //         setIsSubtask(true)\r\n    //     }\r\n    // }\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deleteProjectThunk(currentTask.id))\r\n    }\r\n\r\n    const saveCurrentTask = () => {\r\n        if (currentTask.balance) {\r\n            dispatch(saveTaskThunk(currentTask))\r\n        }\r\n    }\r\n\r\n    // const sortHandler = async ({ oldIndex, newIndex }) => {\r\n    //     // setTasks(tasks => arrayMove(tasks, oldIndex, newIndex))\r\n    //     // await API.reindex(plan, oldIndex, newIndex)\r\n    // }\r\n\r\n    const parentTasks = tasks.find(task => task.id === currentTask.child)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className='flex'>\r\n                    <Do task={currentTask} />\r\n                    <TextareaAutosize\r\n                        className='inputtext inputtext-name'\r\n                        value={currentTask.name}\r\n                        onChange={handleChangeName}\r\n                        onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault()}}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className='input_block'>\r\n                <div className='input_div'>\r\n                    <div>Сфера жизни</div>\r\n                    <Select\r\n                        onChange={value => handleChangeType(value, 'balance')}\r\n                        value={currentTask.balance}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value=\"работа\">работа</Option>\r\n                        <Option value=\"проект\">проект</Option>\r\n                        <Option value=\"развитие\">развитие</Option>\r\n                        <Option value=\"семья\">семья</Option>\r\n                        <Option value=\"здоровье\">здоровье</Option>\r\n                        <Option value=\"быт\">быт</Option>\r\n                        <Option value=\"отдых\">отдых</Option>\r\n                    </Select>\r\n                </div>\r\n                <div className='input_div'>\r\n                    <div>Цель</div>\r\n                    <Switch defaultChecked={currentTask.goal} onChange={value => handleChangeType(value, 'goal')} />\r\n                </div>\r\n            </div>\r\n            <div className='subtask_block'>\r\n                <div>Подзадачи</div>\r\n                <div\r\n                    onClick={() => setIsSubtask(true)}\r\n                    className='subtask_button'\r\n                >\r\n                    +\r\n                </div>\r\n            </div>\r\n            {\r\n                currentTask.subtasks.map((subtask, index) => (\r\n                    <Subtask\r\n                        task={subtask}\r\n                        key={subtask.id}\r\n                        index={index}\r\n                    />\r\n                ))\r\n            }\r\n            {\r\n                isSubtask\r\n                    ? <SubtaskEdit\r\n                        close={() => setIsSubtask(false)}\r\n                        goal={currentTask.goal}\r\n                        balance={currentTask.balance}\r\n                        parent={currentTask.id}\r\n                    />\r\n                    : null\r\n            }\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveCurrentTask}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n                <Button\r\n                    onClick={deleteHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Удалить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { DatePicker, Select, Button, Radio, Switch } from 'antd';\r\nimport moment from 'moment';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { ParentTask } from '../ParentTask/ParentTask';\r\nimport { Do } from '../Do/Do';\r\nimport { changeCurrentTask, selectTasks, setProject } from '../../redux/taskReducer';\r\nimport { deleteTaskThunk, saveTaskThunk, changeToProjectThunk, changeCurrentTaskThunk } from '../../redux/tasksThunks';\r\nimport { getDateFromConstant } from '../../config/helpers';\r\nimport { DATE_CONSTANTS } from '../../config/domain';\r\n\r\nimport './ModalForm.css'\r\n\r\n\r\n\r\nexport const TaskForm = () => {\r\n\r\n    const { Option } = Select;\r\n    const { currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleChangeName = (e, type) => {\r\n        console.log(\"🚀 ~ file: TaskForm.js ~ line 29 ~ handleChangeName ~ e\", e, type)\r\n        dispatch(changeCurrentTaskThunk(currentTask.id, { name: e.target.value }))\r\n        // changeCurrentTask('name', e.target.value)\r\n        // dispatch(changeCurrentTask({ type: 'name', value: e.target.value }))\r\n    }\r\n\r\n    const handleChangeData = (value, type) => {\r\n        console.log(\"🚀 ~ file: TaskForm.js ~ line 31 ~ handleChangeData ~ type\", value)\r\n        dispatch(changeCurrentTaskThunk(currentTask.id, { [type]: value }))\r\n        // if (value.target) {\r\n        //     dispatch(changeCurrentTask({ type, value: value.target.value }))\r\n        // } else {\r\n        //     dispatch(changeCurrentTask({ type, value }))\r\n        // }\r\n        \r\n    }\r\n\r\n    const changeToProject = () => {\r\n        dispatch(changeToProjectThunk(currentTask.id))\r\n    }\r\n\r\n    const handleChangeDate = (date, dateString) => {\r\n        // dispatch(changeCurrentTask({ type: 'date', value: dateString }))\r\n        dispatch(changeCurrentTaskThunk(currentTask.id, { date: dateString }))\r\n    }\r\n\r\n    const setDateFromConstants = (dateConstant) => {\r\n        const date = getDateFromConstant(dateConstant)\r\n        dispatch(changeCurrentTaskThunk(currentTask.id, { date }))\r\n        // dispatch(changeCurrentTask({ type: 'date', value: date }))\r\n    }\r\n\r\n    // const keyPressHandler = e => {\r\n    //     if (e.keyCode === 13 && e.ctrlKey) {\r\n    //         setIsSubtask(true)\r\n    //     }\r\n    // }\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deleteTaskThunk(currentTask.id, currentTask.parent))\r\n    }\r\n\r\n    const saveCurrentTask = () => {\r\n        if (!currentTask.balance && currentTask.child === 0) {\r\n            return\r\n        }\r\n        dispatch(saveTaskThunk(currentTask))\r\n    }\r\n\r\n    const ImportantBlock = (\r\n        <div className='input_div'>\r\n            <div>Важно</div>\r\n            <Switch defaultChecked={currentTask.important} onChange={value => handleChangeData(value, 'important')} />\r\n        </div>\r\n    )\r\n\r\n    const ActionBlock = (\r\n        <div className='input_div'>\r\n            <div>Жду</div>\r\n            <Switch defaultChecked={currentTask.wait} onChange={value => handleChangeData(value, 'wait')} />\r\n        </div>\r\n    )\r\n\r\n    const DateBlock = (\r\n        <div className='input_div'>\r\n            <div>Дата</div>\r\n            <DatePicker\r\n                value={currentTask.date ? moment(currentTask.date) : null}\r\n                onChange={handleChangeDate}\r\n                style={{ width: 200 }}\r\n                size='large'\r\n            />\r\n            <div>\r\n                {\r\n                    DATE_CONSTANTS.map(item => (\r\n                        <span\r\n                            key={item.eng}\r\n                            className='date_constant'\r\n                            onClick={() => setDateFromConstants(item.eng)}\r\n                        >\r\n                            {item.ru}\r\n                        </span>))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const BalanceBlock = (\r\n        <div className='input_div'>\r\n            <div>Сфера жизни</div>\r\n            <Select\r\n                onChange={value => handleChangeData(value, 'balance')}\r\n                value={currentTask.balance}\r\n                style={{ width: 200 }}\r\n                size='large'\r\n            >\r\n                <Option value=\"работа\">работа</Option>\r\n                <Option value=\"проект\">проект</Option>\r\n                <Option value=\"развитие\">развитие</Option>\r\n                <Option value=\"семья\">семья</Option>\r\n                <Option value=\"здоровье\">здоровье</Option>\r\n                <Option value=\"быт\">быт</Option>\r\n                <Option value=\"отдых\">отдых</Option>\r\n            </Select>\r\n        </div>\r\n    )\r\n\r\n    const PlannedTask = (\r\n        <div className='input_block'>\r\n            {DateBlock}\r\n            <div className='input_block'>\r\n                {ImportantBlock}\r\n                {ActionBlock}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n    const NotPlannedTask = (\r\n        <>\r\n            <div className='input_block'>\r\n                {BalanceBlock}\r\n                {ImportantBlock}\r\n            </div>\r\n            {DateBlock}\r\n        </>\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ParentTask\r\n                name={currentTask.parentname}\r\n                parent={currentTask.parentid}\r\n                id={currentTask.id}\r\n            />\r\n            <div>\r\n                <div className='flex'>\r\n                    <Do task={currentTask} />\r\n                    <TextareaAutosize\r\n                        className='inputtext inputtext-name'\r\n                        value={currentTask.name}\r\n                        onChange={handleChangeName}\r\n                    />\r\n                </div>\r\n            </div>\r\n            {currentTask.parentid ? PlannedTask : NotPlannedTask}\r\n\r\n\r\n\r\n            {/* {\r\n                currentTask.date\r\n                    ? <div className='input_block'>\r\n                        <div className='input_div'>\r\n                            <div>Дата</div>\r\n                            <DatePicker\r\n                                value={currentTask.date ? moment(currentTask.date) : null}\r\n                                onChange={handleChangeDate}\r\n                                style={{ width: 200 }}\r\n                                size='large'\r\n                            />\r\n                            <div>\r\n                                {\r\n                                    DATE_CONSTANTS.map(item => <span key={item.eng} className='date_constant' onClick={() => setDateFromConstants(item.eng)}>{item.ru}</span>)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='input_div'>\r\n                            <div>Важно</div>\r\n                            <Switch defaultChecked={currentTask.important} onChange={value => handleChangeData(value, 'important')} />\r\n                        </div>\r\n                    </div>\r\n                    : <>\r\n                        <div className='input_block'>\r\n                            <div className='input_div'>\r\n                                <div>Тип задачи</div>\r\n                                <Radio.Group onChange={changeToProject} value={currentTask.type}>\r\n                                    <Radio value={\"задача\"}>задача</Radio>\r\n                                    <Radio value={\"проект\"}>проект</Radio>\r\n                                </Radio.Group>\r\n                            </div>\r\n\r\n                            <div className='input_div'>\r\n                                <div>Сфера жизни</div>\r\n                                <Select\r\n                                    onChange={value => handleChangeData(value, 'balance')}\r\n                                    value={currentTask.balance}\r\n                                    style={{ width: 200 }}\r\n                                    size='large'\r\n                                >\r\n                                    <Option value=\"работа\">работа</Option>\r\n                                    <Option value=\"проект\">проект</Option>\r\n                                    <Option value=\"развитие\">развитие</Option>\r\n                                    <Option value=\"семья\">семья</Option>\r\n                                    <Option value=\"здоровье\">здоровье</Option>\r\n                                    <Option value=\"быт\">быт</Option>\r\n                                    <Option value=\"отдых\">отдых</Option>\r\n                                </Select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='input_block'>\r\n                            <div className='input_div'>\r\n                                <div>Цель</div>\r\n                                <Switch defaultChecked={currentTask.goal} onChange={value => handleChangeData(value, 'goal')} />\r\n                            </div>\r\n                            <div className='input_div'>\r\n                                <div>Важно</div>\r\n                                <Switch defaultChecked={currentTask.important} onChange={value => handleChangeData(value, 'important')} />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='input_block'>\r\n                            <div className='input_div'>\r\n                                <div>Дата</div>\r\n                                <DatePicker\r\n                                    value={currentTask.date ? moment(currentTask.date) : null}\r\n                                    onChange={handleChangeDate}\r\n                                    style={{ width: 200 }}\r\n                                    size='large'\r\n                                />\r\n                                <div>\r\n                                    {\r\n                                        DATE_CONSTANTS.map(item => <span key={item.eng} className='date_constant' onClick={() => setDateFromConstants(item.eng)}>{item.ru}</span>)\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n            } */}\r\n\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveCurrentTask}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n                <Button\r\n                    onClick={deleteHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Удалить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { Button } from 'antd';\r\n\r\nimport { selectTasks } from '../../redux/taskReducer';\r\nimport { addTaskThunk } from '../../redux/tasksThunks';\r\n\r\nimport './ModalForm.css'\r\n\r\nexport const ModalNew = () => {\r\n\r\n    const [name, setName] = useState('')\r\n\r\n    const { currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13) {\r\n            event.preventDefault();\r\n            if (name !== '') {\r\n                dispatch(addTaskThunk({ ...currentTask, name: name }))\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveHandler = () => {\r\n        if (name !== '') {\r\n            dispatch(addTaskThunk({ ...currentTask, name: name }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onKeyPress={saveKeyHandler}\r\n        >\r\n            <TextareaAutosize\r\n                value={name}\r\n                className='inputtext inputtext-name'\r\n                onChange={e => setName(e.target.value)}\r\n                autoFocus\r\n            />\r\n            {/* <input\r\n                value={name}\r\n                className='input_name'\r\n                onChange={e => setName(e.target.value)}\r\n                autoFocus\r\n            /> */}\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { Button } from 'antd';\r\n\r\nimport { selectTasks } from '../../redux/taskReducer';\r\n// import { addTaskThunk } from '../../redux/thunks';\r\nimport { addDayTextThunk } from '../../redux/daysThunks';\r\n\r\nimport './ModalForm.css'\r\n\r\nexport const DayNew = () => {\r\n\r\n    const [text, setText] = useState('')\r\n\r\n    const { currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13 && event.ctrlKey) {\r\n            if (text !== '') {\r\n                dispatch(addDayTextThunk(text))\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveHandler = () => {\r\n        if (text !== '') {\r\n            dispatch(addDayTextThunk(text))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onKeyPress={saveKeyHandler}\r\n        >\r\n            <TextareaAutosize\r\n                value={text}\r\n                className='inputtext inputtext-day'\r\n                onChange={e => setText(e.target.value)}\r\n                autoFocus\r\n            />\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { selectTasks, setModal } from '../../redux/taskReducer';\r\nimport { MODAL_TYPES } from '../../config/domain';\r\n\r\nimport './MainHeader.css'\r\n\r\n\r\nexport const MainHeader = () => {\r\n\r\n    const { daytext } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const openDayModal = () => {\r\n        dispatch(setModal({typeOfModal: MODAL_TYPES.day}))\r\n    }\r\n\r\n    return (\r\n        <div className='mainheader'>\r\n            <div>\r\n                <NavLink className='mainheader_item' to='/goals'>Цели</NavLink>\r\n                <NavLink className='mainheader_item' to='/projects'>Проекты</NavLink>\r\n                <NavLink className='mainheader_item' to='/tasks'>Общее планирование</NavLink>\r\n                <NavLink className='mainheader_item' to='/today'>Выполнение</NavLink>\r\n                {\r\n                    daytext ? null : <span onClick={openDayModal} className='dayinform'>Вступительное слово</span>\r\n                }\r\n                <span></span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './Action.css'\r\n\r\nexport const Action = ({ important, date, wait }) => {\r\n\r\n    const classes = ['action']\r\n    if (important) {\r\n        classes.push('important')\r\n    }\r\n    if (wait) {\r\n        classes.push('wait')\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n        >\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport moment from 'moment';\r\n\r\nimport { setCurrentTask, setModal, setFocus } from '../../redux/taskReducer';\r\nimport { Do } from '../Do/Do';\r\nimport { Action } from '../Action/Action';\r\nimport { TASK_TYPES } from '../../config/domain';\r\n\r\nimport './index.css'\r\nimport { changeSomeTaskThunk } from '../../redux/tasksThunks';\r\n\r\n\r\nexport const Task = ({ value, type }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const clickHandler = () => {\r\n        dispatch(setModal({ typeOfModal: 'task' }))\r\n        dispatch(setCurrentTask(value))\r\n    }\r\n\r\n    const makeYesterdayHandler = () => {\r\n        const newDate = moment(value.donedate, 'YYYY-MM-DD').subtract(1, 'd').format('YYYY-MM-DD')\r\n        dispatch(changeSomeTaskThunk(value.id, { donedate: newDate }))\r\n    }\r\n\r\n    const focusHandler = () => {\r\n        dispatch(setFocus(value.id))\r\n    }\r\n\r\n    let taskClasses = ['task']\r\n    if (type === TASK_TYPES.done) {\r\n        taskClasses.push('task-done')\r\n    }\r\n\r\n    let classes = ['task_name']\r\n    if (value.goal) {\r\n        classes.push('task_goal')\r\n    }\r\n\r\n    // if (value.plan === 'today' && moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     classes.push('goal')\r\n    // }\r\n\r\n\r\n\r\n    // if (value.type === 'проект') {\r\n    //     classes.push('project')\r\n    // }\r\n\r\n    // let dateClasses = ['task_tag']\r\n    // if (moment(today).isSame(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('day_today')\r\n    // }\r\n    // if (moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('importantTag')\r\n    // }\r\n\r\n    // let periodClasses = ['task_tag']\r\n    // if (value.period === 5) {\r\n    //     periodClasses.push('importantTag')\r\n    // }\r\n\r\n    const daysBetweenFromToday = moment().diff(moment(value.date, 'YYYY-MM-DD'), 'days')\r\n\r\n    return (\r\n        <div\r\n            className={taskClasses.join(' ')}\r\n        >\r\n            <div className='task_left'>\r\n                <div className='task_tools'>\r\n                    <Action\r\n                        important={value.important || value.goal}\r\n                        date={value.date}\r\n                        wait={value.wait}\r\n                    />\r\n                    <Do task={value} />\r\n                </div>\r\n                <div\r\n                    className='task_name'\r\n                    onClick={clickHandler}\r\n                >\r\n                    <span\r\n                        className={classes.join(' ')}\r\n                    >\r\n                        {value.name}\r\n                    </span>\r\n                    {\r\n                        value.parentname\r\n                            ? <span className='task_children'>\r\n                                {`<  ${value.parentname}`}\r\n                            </span>\r\n                            : value.isparent\r\n                                ? <span className='task_children'>{' >'}</span>\r\n                                : null\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className='task_right'>\r\n                <span className={!!daysBetweenFromToday ? 'task_tag task-overdue' : 'task_tag'}>{!!daysBetweenFromToday && daysBetweenFromToday}</span>\r\n                {/* <span className='task_tag'>{value.balance}</span> */}\r\n                {\r\n                    type === 'today' && <span className='task_tag task-focus' onClick={focusHandler}>фокус</span>\r\n                }\r\n                {\r\n                    type === 'done' && <span className='task_tag task-focus' onClick={makeYesterdayHandler}>вчера</span>\r\n                }\r\n                {/* <span className='task_tag'>{value.balance}</span> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { Alert, Button } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { resetBreaks } from '../../redux/taskReducer';\r\n\r\n\r\nexport const Breaks = ({ breaks }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const clickHandler = () => {\r\n        dispatch(resetBreaks())\r\n    }\r\n\r\n    return (\r\n        <div className='block'>\r\n            <Alert\r\n                message=\"Сделай небольшой перерыв и выключи голову\"\r\n                type=\"warning\"\r\n                showIcon\r\n                action={\r\n                    <Button size=\"small\" type=\"text\" onClick={clickHandler}>\r\n                        Готово\r\n                    </Button>\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}","import { useSelector } from 'react-redux';\r\n\r\n\r\nimport { selectTasks } from '../redux/taskReducer';\r\nimport { Task } from '../components/Task/Task';\r\nimport { TASK_TYPES } from '../config/domain';\r\nimport { filterTodayTasks, getDatesForPeriod } from '../config/helpers';\r\nimport { Breaks } from '../components/Breaks/Breaks';\r\n\r\n\r\n\r\nexport const Tasks = () => {\r\n\r\n    const { tasks, breaks } = useSelector(selectTasks)\r\n\r\n    const dates = getDatesForPeriod(14)\r\n\r\n    const todayTasks = filterTodayTasks(tasks)\r\n    const inboxTasks = tasks.filter(task => !task.date && !task.parent)\r\n    const otherTasks = tasks.filter(task => task.date)\r\n\r\n    return (\r\n        <>\r\n            {\r\n                breaks > 0 && <Breaks breaks={breaks} />\r\n            }\r\n            {\r\n                inboxTasks.length > 0 ?\r\n                    <div className='block'>\r\n                        <h3>Инбокс</h3>\r\n                        {\r\n                            inboxTasks.map((task, index) => (\r\n                                <Task\r\n                                    key={task.id}\r\n                                    index={index}\r\n                                    value={task}\r\n                                    type={TASK_TYPES.plan}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    : null\r\n            }\r\n\r\n            <div className='block'>\r\n                <h3>СЕГОДНЯ</h3>\r\n                {\r\n                    todayTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                            type={TASK_TYPES.plan}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            {\r\n                dates.map((date, index) => {\r\n                    const tasksForDate = otherTasks.filter(task => task.date === date.raw)\r\n                    return (\r\n                        <div className='block' key={index}>\r\n                            <h3>{date.show}</h3>\r\n                            {\r\n                                tasksForDate.map((task, index) => (\r\n                                    <Task\r\n                                        key={task.id}\r\n                                        index={index}\r\n                                        value={task}\r\n                                        type={TASK_TYPES.plan}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { selectTasks } from '../../redux/taskReducer';\r\nimport { getProjectThunk } from '../../redux/projectsThunks';\r\n\r\nimport { Action } from '../Action/Action';\r\n\r\n\r\nexport const Project = ({ value, type, childname, childdate }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const today = new Date()\r\n\r\n    const { filtertype } = useSelector(selectTasks)\r\n\r\n    const openProject = async () => {\r\n        const task = await dispatch(getProjectThunk(value.id))        \r\n    }\r\n\r\n\r\n    let classes = ['task_name']\r\n    if (value.goal) {\r\n        classes.push('task_goal')\r\n    }\r\n\r\n    // if (value.plan === 'today' && moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     classes.push('goal')\r\n    // }\r\n\r\n\r\n\r\n    // if (value.type === 'проект') {\r\n    //     classes.push('project')\r\n    // }\r\n\r\n    // let dateClasses = ['task_tag']\r\n    // if (moment(today).isSame(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('day_today')\r\n    // }\r\n    // if (moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('importantTag')\r\n    // }\r\n\r\n    // let periodClasses = ['task_tag']\r\n    // if (value.period === 5) {\r\n    //     periodClasses.push('importantTag')\r\n    // }\r\n\r\n\r\n\r\n    return (\r\n        <div\r\n            className='task'\r\n            // onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: value }))}\r\n            onClick={openProject}\r\n        >\r\n            <div className='task_left'>\r\n                <div className='task_tools'>\r\n                    <Action type={value.action} />\r\n                </div>\r\n                <div\r\n                    className='task_name'\r\n                // onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: value }))}\r\n                >\r\n                    <span\r\n                        className={classes.join(' ')}\r\n                    >\r\n                        {value.name}\r\n                    </span>\r\n                </div>\r\n                {\r\n                    childname ? <span className='task_children'>{` > ${childname}`}</span> : null\r\n                }\r\n\r\n            </div>\r\n\r\n\r\n            <div className='task_right'>\r\n                <div>\r\n                    <span className='task_tag'>{childdate}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useSelector } from 'react-redux';\r\n\r\nimport { selectTasks } from '../redux/taskReducer';\r\nimport { BALANCE } from '../config/domain';\r\nimport { Project } from '../components/Project/Project';\r\nimport { useState } from 'react';\r\n\r\n\r\n\r\n\r\nexport const Projects = () => {\r\n\r\n    const [filter, setFilter] = useState(BALANCE[0])\r\n\r\n    const { projects } = useSelector(selectTasks)\r\n\r\n    // if (projects.length === 0) return null\r\n\r\n    const navClickHandler = event => {\r\n        setFilter(event.target.textContent.toLowerCase())\r\n    }\r\n\r\n\r\n\r\n    const filteredProjects = projects.filter(project => project.balance === filter)\r\n\r\n    return (\r\n        <div>\r\n            <div className='block'>\r\n                {\r\n                    BALANCE.map(item => (\r\n                        <span\r\n                            className={`nav${filter === item ? ' nav-active' : ''}`}\r\n                            onClick={navClickHandler}\r\n                            key={item}\r\n                        >\r\n                            {item.toUpperCase()}\r\n                        </span>)\r\n                    )\r\n                }\r\n            </div>\r\n\r\n            {\r\n                filteredProjects.map(project => {\r\n                    return (\r\n                        <Project\r\n                            key={project.id}\r\n                            // index={index}\r\n                            value={project}\r\n                            childname={project.childname}\r\n                            childdate={project.childdate}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            {/* {\r\n                BALANCE.map(item => {\r\n                    const tasks = projects.filter(task => task.balance === item)\r\n                    return (\r\n                        <div className='block' key={item}>\r\n                            <h3>{item.toUpperCase()}</h3>\r\n                            {\r\n                                tasks.map((task, index) => (\r\n                                    <Project\r\n                                        key={task.id}\r\n                                        index={index}\r\n                                        value={task}\r\n                                        childname={task.childname}\r\n                                        childdate={task.childdate}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                })\r\n            } */}\r\n        </div>\r\n    )\r\n}","import { useState } from 'react';\r\nimport 'moment/locale/ru';\r\nimport { Alert } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { Task } from '../components/Task/Task';\r\nimport { selectTasks } from '../redux/taskReducer';\r\nimport { filterTodayTasks } from '../config/helpers';\r\nimport { TASK_TYPES } from '../config/domain';\r\nimport { Breaks } from '../components/Breaks/Breaks';\r\nimport { BALANCE } from '../config/domain';\r\n\r\n\r\nconst ALL = 'все'\r\n\r\nexport const Today = () => {\r\n\r\n    const [filter, setFilter] = useState(ALL)\r\n    const { tasks, doneTasks, focus, breaks } = useSelector(selectTasks)\r\n\r\n    const todaytasks = filterTodayTasks(tasks)\r\n    const focusTask = todaytasks.find((task) => task.id === focus)\r\n\r\n    const navClickHandler = event => {\r\n        setFilter(event.target.textContent.toLowerCase())\r\n    }\r\n\r\n    const filteredBalance = [...new Set(todaytasks.map(task => task.balance))]\r\n    const balance = [ALL, ...filteredBalance]\r\n\r\n    const filteredTasks = filter === ALL ? todaytasks : todaytasks.filter(task => task.balance === filter)\r\n    const filteredDoneTasks = filter === ALL ? doneTasks : doneTasks.filter(task => task.balance === filter)\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                breaks > 0 && <Breaks breaks={breaks} />\r\n            }\r\n            {\r\n                focusTask ? <div className='block'>\r\n                    <h3>ФОКУС</h3>\r\n                    <Task\r\n                        value={focusTask}\r\n                        type={TASK_TYPES.plan}\r\n                    />\r\n                </div>\r\n                    : <div className='block'>\r\n                        <Alert\r\n                            message=\"Выбери фокусную задачу\"\r\n                            type=\"info\"\r\n                            showIcon\r\n                        />\r\n                    </div>\r\n            }\r\n            <div className='block'>\r\n                {\r\n                    // [ALL, ...BALANCE].map(item => (\r\n                    balance.map(item => (\r\n                        <span\r\n                            className={`nav${filter === item ? ' nav-active' : ''}`}\r\n                            onClick={navClickHandler}\r\n                            key={item}\r\n                        >\r\n                            {item.toUpperCase()}\r\n                        </span>)\r\n                    )\r\n                }\r\n            </div>\r\n            <div className='block'>\r\n                {\r\n                    filteredTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                            type={TASK_TYPES.today}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            {\r\n                filteredDoneTasks.length > 0\r\n                    ? <div className='block'>\r\n                        <h3>ВЫПОЛНЕНО</h3>\r\n                        {\r\n                            doneTasks.map((task, index) => (\r\n                                <Task\r\n                                    key={task.id}\r\n                                    index={index}\r\n                                    value={task}\r\n                                    type={TASK_TYPES.done}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { selectTasks, setModal } from '../../redux/taskReducer';\r\nimport { getProjectThunk } from '../../redux/thunks';\r\n\r\nimport { Action } from '../Action/Action';\r\n\r\nimport './Goal.css'\r\n\r\n\r\nexport const Goal = ({ name, description, balance }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { filtertype } = useSelector(selectTasks)\r\n\r\n    const openProject = async () => {\r\n        // const task = await dispatch(getProjectThunk(value.id))        \r\n    }\r\n\r\n    return (\r\n        <div\r\n            className='goal'\r\n            // onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: value }))}\r\n            // onClick={openProject}\r\n        >            \r\n            <div className='goal_name'>{name}</div>\r\n            <div className='goal_description'>{description}</div>\r\n        </div>\r\n    )\r\n}","import { useSelector } from 'react-redux';\r\n\r\nimport { selectTasks } from '../redux/taskReducer';\r\nimport { Goal } from '../components/Goal/Goal';\r\n\r\n\r\nexport const Goals = () => {\r\n\r\n    const { goals } = useSelector(selectTasks)\r\n\r\n    // const navClickHandler = event => {\r\n    //     setFilter(event.target.textContent.toLowerCase())\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                goals.map(goal => {\r\n                    return (\r\n                        <Goal\r\n                            key={goal.id}\r\n                            // index={index}\r\n                            name={goal.name}\r\n                            description={goal.description}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { HotKeys, GlobalHotKeys } from 'react-hotkeys';\r\n\r\nimport { openNewTask, selectTasks } from './redux/taskReducer'\r\n// import { Focus } from './pages/Focus';\r\nimport { ModalForm } from './components/ModalForm/ModalForm';\r\nimport { MainHeader } from './components/MainHeader/MainHeader';\r\nimport { Tasks } from './pages/Tasks';\r\nimport { Projects } from './pages/Projects';\r\nimport { Today } from './pages/Today';\r\nimport { Goals } from './pages/Goals';\r\n\r\nimport { getProjectsThunk } from './redux/projectsThunks';\r\nimport { getTasksThunk, getDoneTasksThunk } from './redux/tasksThunks';\r\nimport { getDayThunk } from './redux/daysThunks';\r\nimport { getGoalsThunk } from './redux/goalsThunks';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './App.css'\r\n\r\n\r\n// import ErrorBoundary from './components/Error/ErrorBoundary';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const { error } = useSelector(selectTasks)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const keyMap = {\r\n    MOVE_UP: \"ctrl+enter\"\r\n  };\r\n\r\n  const handlers = {\r\n    MOVE_UP: event => dispatch(openNewTask())\r\n    // setModal({ typeOfModal: 'new', currentTask: CURRENT_TASK }))\r\n    // MOVE_UP: event => dispatch(setModal({ typeOfModal: 'new', currentTask: CURRENT_TASK }))\r\n  };\r\n\r\n\r\n  const getData = async () => {\r\n    await dispatch(getDayThunk())\r\n    await dispatch(getTasksThunk())\r\n    await dispatch(getDoneTasksThunk())\r\n    await dispatch(getProjectsThunk())\r\n    await dispatch(getGoalsThunk())\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData()\r\n  }, [])\r\n\r\n  if (error) {\r\n    return <div>{error}</div>\r\n  }\r\n\r\n  return (\r\n    <GlobalHotKeys keyMap={keyMap} handlers={handlers}>\r\n        <div className='App'>\r\n          <div className='wrapper'>\r\n            <MainHeader />\r\n            <Switch>\r\n              <Route exact path='/' component={Tasks} />\r\n              <Route exact path='/goals' component={Goals} />\r\n              <Route exact path='/tasks' component={Tasks} />\r\n              <Route exact path='/today' component={Today} />\r\n              <Route exact path='/projects' component={Projects} />\r\n              {/* <Route path='/focus' component={Focus} /> */}\r\n            </Switch>\r\n            <ModalForm />\r\n          </div>\r\n        </div>\r\n    </GlobalHotKeys>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { setError, setGoals, toggleFetching } from \"./taskReducer\"\r\nimport axios from '../config/axios'\r\n\r\n\r\n\r\nexport const getGoalsThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('goals')\r\n        dispatch(setGoals(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nexport default configureStore({\r\n  // reducer: {\r\n  //   state: taskReducer\r\n  // },\r\n  reducer: taskReducer  ,\r\n  middleware: getDefaultMiddleware(),\r\n  devTools: process.env.NODE_ENV !== 'production', // по необходимости\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport './index.css'\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}