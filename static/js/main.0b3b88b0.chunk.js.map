{"version":3,"sources":["config/domain.js","app/taskReducer.js","api/tasks.js","app/thunks.js","components/Do/Do.js","components/Action/Action.js","components/Task/Task.js","config/helpers.js","pages/Tasks.js","components/FocusTask/FocusTask.js","pages/Focus.js","components/ParentTask/ParentTask.js","components/Subtask/Subtask.js","components/Subtask/SubtaskEdit.js","components/ModalForm/ProjectForm.js","components/ModalForm/ModalEdit.js","components/ModalForm/ModalForm.js","components/ModalForm/TaskForm.js","components/ModalForm/ModalNew.js","components/ModalForm/DayNew.js","components/MainHeader/MainHeader.js","components/Project/Project.js","pages/Projects.js","pages/Today.js","App.js","app/store.js","index.js"],"names":["CURRENT_TASK","id","name","type","period","balance","child","goal","today","repeat","plan","date","done","donedate","action","repeatday","BALANCE","TASK_TYPES","DATE_CONSTANTS","eng","ru","days","MODAL_TYPES","tasksSlice","createSlice","initialState","tasks","projects","currentTask","isFetching","modalIsOpen","typeOfModal","todaytasks","doneTasks","daytext","reducers","toggleFetching","state","setTasks","payload","setTodayTasks","setDoneTasks","setDay","saveTask","newTasks","map","task","addTask","deleteTask","filter","deleteProject","newProjects","project","setProjects","setPlan","filtertype","setWeek","week","doTask","parent","find","hasParent","setCurrentTask","setModal","openNewTask","setProject","closeModal","changeCurrentTask","value","addSubtask","subtasks","setCurrentDay","setCurrentPlan","isplan","setSearch","search","actions","setPlanTasks","selectTasks","axios","defaults","baseURL","API","getProjects","get","data","console","log","getProject","project_id","addDayText","text","post","getDay","put","task_id","delete","getProjectsThunk","dispatch","then","response","getProjectThunk","getTasksThunk","addDayTextThunk","a","addTaskThunk","newTask","saveTaskThunk","doTaskThunk","deleteTaskThunk","Do","useDispatch","useState","current","useSelector","doneHandler","className","onClick","Action","important","classes","push","join","Task","taskClasses","Date","parentname","isparent","getDateFromConstant","date_constant","item","result","moment","add","format","filterTodayTasks","sort","Tasks","dates","i","dateObject","raw","show","getDatesForPeriod","todayTasks","inboxTasks","otherTasks","useEffect","getTasks","index","tasksForDate","FocusTask","childname","Focus","time","length","ParentTask","isParent","setIsParent","startChooseParent","Option","Select","showSearch","style","width","onChange","filterOption","input","option","children","toLowerCase","indexOf","DragHandle","sortableHandle","SortableElement","change","dateFormat","dateFormatArray","split","SubtaskEdit","close","setInput","e","target","onKeyPress","event","charCode","autoFocus","SortableContainer","sortableContainer","customStyles","content","top","left","right","bottom","marginRight","transform","modals","isSubtask","setIsSubtask","handleChangeType","sortHandler","oldIndex","newIndex","size","defaultChecked","onSortEnd","useDragHandle","subtask","loading","handleChangeData","parentid","Group","dateString","dateConstant","setDateFromConstants","new","setName","preventDefault","day","setText","ctrlKey","ModalForm","ModalComponent","isOpen","onRequestClose","ariaHideApp","MainHeader","to","Project","childdate","openProject","Projects","Today","App","handlers","MOVE_UP","getData","keyMap","exact","path","component","configureStore","reducer","taskReducer","middleware","getDefaultMiddleware","devTools","process","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.0b3b88b0.chunk.js","sourcesContent":["export const taskFilter = ['все', \"задача\", \"проект\", \"привычка\", \"другое\"]\r\n\r\n\r\nexport const OPTIONS = {\r\n    type: [\r\n        { value: 'задача', label: 'Задача' },\r\n        { value: 'привычка', label: 'Привычка' }\r\n    ],\r\n    balance: [\r\n        { value: 'работа', label: 'Работа' },\r\n        { value: 'проект', label: 'Проект' },\r\n        { value: 'развитие', label: 'Развитие' },\r\n        { value: 'семья', label: 'Семья' },\r\n        { value: 'здоровье', label: 'Здоровье' },\r\n    ],\r\n    period: [\r\n        { value: 15, label: 15 },\r\n        { value: 30, label: 30 },\r\n        { value: 45, label: 45 },\r\n        { value: 60, label: 60 },\r\n        { value: 90, label: 90 },\r\n    ],\r\n    plan: [\r\n        { value: 'today', label: 'today' },\r\n        { value: 'inbox', label: 'inbox' },\r\n        { value: 'upcoming', label: 'upcoming' },\r\n        { value: 'later', label: 'later' },\r\n    ]\r\n}\r\n\r\nexport const CURRENT_TASK = {\r\n    id: 0,\r\n    name: '',\r\n    type: 'задача',\r\n    period: 0,\r\n    balance: '',\r\n    child: 0,\r\n    goal: false,\r\n    today: false,\r\n    repeat: false,\r\n    plan: 'inbox',\r\n    date: null,\r\n    done: false,\r\n    donedate: null,\r\n    action: null,\r\n    repeatday: 0\r\n}\r\n\r\nexport const BALANCE = ['работа', 'проект', \"семья\", \"здоровье\", \"быт\", \"развитие\", \"отдых\"]\r\nexport const PLANS = ['today', 'week', 'upcoming', \"later\"]\r\n\r\nexport const TASK_TYPES = {\r\n    plan: 'plan',\r\n    done: 'done'\r\n}\r\n\r\nexport const DATE_CONSTANTS = [\r\n    { eng: 'today', ru: 'сегодня', days: 0 }, { eng: 'tomorrow', ru: 'завтра', days: 1 }, { eng: 'aftertomorrow', ru: 'послезавтра', days: 2 }\r\n]\r\n\r\nexport const MODAL_TYPES = {\r\n    new: 'new',\r\n    project: 'project',\r\n    task: 'task',\r\n    day: 'day',\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\"\r\nimport arrayMove from 'array-move';\r\nimport { CURRENT_TASK, MODAL_TYPES } from \"../config/domain\";\r\n\r\n\r\n\r\n\r\nexport const tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        projects: [],\r\n        currentTask: null,\r\n        isFetching: false,\r\n        modalIsOpen: false,\r\n        typeOfModal: 'new',\r\n        todaytasks: [],\r\n        doneTasks: [],\r\n        daytext: false\r\n        // today: [],\r\n        \r\n        // week: [],\r\n        // plan: 'today',\r\n        // filtertype: 'plan',\r\n        \r\n        \r\n        \r\n        // date: '',\r\n        // isplan: false,\r\n        // search: ''\r\n    },\r\n    reducers: {\r\n        toggleFetching: state => {\r\n            state.isFetching = !state.isFetching\r\n        },\r\n        setTasks: (state, action) => {\r\n            state.tasks = action.payload\r\n        },\r\n        setTodayTasks: (state, action) => {\r\n            state.todaytasks = action.payload\r\n            // state.doneTasks = action.payload.doneTasks\r\n        },\r\n        setDoneTasks: (state, action) => {\r\n            state.doneTasks = action.payload\r\n        },\r\n        setDay: (state, action) => {\r\n            if (action.payload) {\r\n                state.daytext = true\r\n            }            \r\n        },\r\n        saveTask: (state, action) => {\r\n            const newTasks = state.tasks.map(task => task.id === state.currentTask.id ? ({...state.currentTask}) : task)\r\n            state.tasks = newTasks\r\n        },\r\n        addTask: (state, action) => {\r\n            state.tasks = [...state.tasks, action.payload]\r\n        },\r\n        deleteTask: (state, action) => {\r\n            const newTasks = state.tasks.filter(task => task.id !== state.currentTask.id)\r\n            state.tasks = newTasks\r\n        },\r\n        deleteProject: (state, action) => {\r\n            const newProjects = state.projects.filter(project => project.id !== action.payload)\r\n            state.projects = newProjects\r\n        },\r\n        setProjects: (state, action) => {\r\n            state.projects = action.payload\r\n        },\r\n        setPlan: (state, action) => {\r\n            state.plan = action.payload.plan\r\n            state.filtertype = action.payload.filtertype\r\n        },\r\n        setWeek: (state, action) => {\r\n            state.week = action.payload\r\n        },\r\n        doTask: (state, action) => {\r\n\r\n            const { id, parent } = action.payload\r\n            const task = state.tasks.find(task => task.id === id)\r\n            const newTasks = state.tasks.filter(task => task.id !== id)\r\n            state.tasks = newTasks\r\n            state.doneTasks = [...state.doneTasks, task]\r\n\r\n            // открыть родителя если это была подзадача\r\n            // const parentTask = state.tasks.find(task => task.id === parent)\r\n\r\n            if (action.payload.parent.hasParent) {\r\n                state.modalIsOpen = true\r\n                state.typeOfModal = MODAL_TYPES.project\r\n                state.currentTask = action.payload.parent.project\r\n            } else {\r\n                state.modalIsOpen = false\r\n            }\r\n        },\r\n        setCurrentTask: (state, action) => {\r\n            state.currentTask = action.payload\r\n        },\r\n        setModal: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = action.payload.typeOfModal\r\n            // const subtasks = state.tasks.filter(task => task.child === action.payload.currentTask.id && !task.done)\r\n            // state.currentTask = { ...action.payload.currentTask, subtasks: subtasks }\r\n        },\r\n        openNewTask: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = MODAL_TYPES.new\r\n            state.currentTask = CURRENT_TASK\r\n        },\r\n        setProject: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = 'project'\r\n            state.currentTask = action.payload\r\n            state.isFetching = false\r\n        },\r\n        \r\n        closeModal: state => {\r\n            state.modalIsOpen = false\r\n        },\r\n        changeCurrentTask: (state, action) => {\r\n            state.currentTask = { ...state.currentTask, [action.payload.type]: action.payload.value }\r\n        },\r\n        addSubtask: (state, action) => {\r\n            state.tasks = [...state.tasks, action.payload]\r\n            // state.tasks[action.payload.plan] = [...state.tasks[action.payload.plan], action.payload]\r\n            state.currentTask.subtasks = [...state.currentTask.subtasks, action.payload]\r\n        },\r\n        setCurrentDay: (state, action) => {\r\n            state.date = action.payload\r\n        },\r\n        setCurrentPlan: (state, action) => {\r\n            state.isplan = action.payload\r\n        },\r\n        setSearch: (state, action) => {\r\n            state.search = action.payload\r\n        }\r\n    },\r\n});\r\n\r\n\r\n// actions\r\n\r\nexport const { toggleFetching,\r\n    setTasks, addTask, deleteTask, saveTask, doTask,\r\n    setPlanTasks, setTodayTasks, setDoneTasks,\r\n    setProjects, deleteProject, setProject,\r\n    setCurrentTask, changeCurrentTask,\r\n    addSubtask,\r\n    openNewTask,\r\n    setModal, closeModal,\r\n    setDay,\r\n    // setPlan,\r\n    // upTask,\r\n    // setCurrentDay, setCurrentPlan,\r\n    // setSearch,\r\n    // changePlan,    \r\n} = tasksSlice.actions;\r\n\r\n\r\n\r\nexport const selectTasks = state => state\r\n\r\n\r\nexport default tasksSlice.reducer;","import axios from 'axios'\r\n\r\naxios.defaults.baseURL = 'http://82.146.40.11:5002/api/';\r\n// axios.defaults.baseURL = 'http://localhost:5002/api/';\r\n\r\nexport const API = {\r\n    project: {\r\n        async getProjects() {\r\n            try {\r\n                const { data } = await axios.get('projects')\r\n                return data\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        },\r\n        async getProject(project_id) {\r\n            try {\r\n                const { data } = await axios.get('projects/' + project_id)\r\n                return data\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        },\r\n    },\r\n    days: {\r\n        async addDayText(text) {\r\n            try {\r\n                const { data } = await axios.post('days', { text })\r\n                return data\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        },\r\n        async getDay() {\r\n            try {\r\n                const { data } = await axios.get('days')\r\n                return data\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        },\r\n    },\r\n    async getTasks() {\r\n        try {\r\n            const { data } = await axios.get('tasks/plan')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async getTodayTasks() {\r\n        try {\r\n            const { data } = await axios.get('tasks/today')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async getDoneTasks() {\r\n        try {\r\n            const { data } = await axios.get('tasks/done')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n\r\n    async addTask(task) {\r\n        try {\r\n            const { data } = await axios.post('tasks', task)\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async editTask(task) {\r\n        try {\r\n            const { data } = await axios.put('tasks', task)\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async deleteTask(task_id) {\r\n\r\n        try {\r\n            const { data } = await axios.delete('tasks/' + task_id)\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async reindex(plan, oldIndex, newIndex) {\r\n        try {\r\n            await axios.put('tasks/reindex', { plan, oldIndex, newIndex })\r\n            // return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async up(index, task_id) {\r\n        try {\r\n            await axios.put('tasks/up', { index, task_id })\r\n            // return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async do(id) {\r\n        try {\r\n            const { data } = await axios.post('tasks/do', { id })\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    // async do(id, index, plan) {\r\n    //     try {\r\n    //         await axios.put('tasks/do', {id, index, plan})\r\n    //         // return data\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // },\r\n    async getTodayPlan() {\r\n        try {\r\n            const { data } = await axios.get('days')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async addTodayPlan() {\r\n        try {\r\n            const { data } = await axios.post('days')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async changePlan(task_id, oldPlan, newPlan, oldIndex, newIndex) {\r\n        try {\r\n            const { data } = await axios.put('tasks/replan', { task_id, oldPlan, newPlan, oldIndex, newIndex })\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async getWeek() {\r\n        try {\r\n            const { data } = await axios.get('tasks/week')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    // async getPlanTasks() {\r\n    //     try {\r\n    //         const { data } = await axios.get('tasks/plan')\r\n    //         return data\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // },\r\n}","import { API } from '../api/tasks'\r\nimport { toggleFetching, setProjects, setCurrentTask, deleteProject, setTasks, closeModal, doTask, addTask, deleteTask, setDay, setTodayTasks, saveTask, addSubtask, setCurrentDay, changePlan, setModal, setProject, setDoneTasks, } from './taskReducer'\r\n\r\n\r\n\r\n\r\nexport const getDayThunk = () => async dispatch => {\r\n    dispatch(toggleFetching())\r\n    const day = await API.days.getDay()\r\n    dispatch(setDay(day))\r\n    dispatch(toggleFetching())\r\n}\r\n\r\n\r\nexport const getProjectsThunk = () => dispatch => {\r\n    dispatch(toggleFetching())\r\n    return API.project.getProjects()\r\n        .then(response => {\r\n            dispatch(setProjects(response))\r\n            dispatch(toggleFetching())\r\n            return response\r\n        })\r\n}\r\n\r\nexport const getProjectThunk = (project_id) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    return API.project.getProject(project_id)\r\n        .then(response => {\r\n            dispatch(setProject(response))\r\n            return response\r\n        })\r\n}\r\n\r\nexport const deleteProjectThunk = (project_id) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    return API.deleteTask(project_id)\r\n        .then(response => {\r\n            dispatch(deleteProject(project_id))\r\n            dispatch(toggleFetching())\r\n            dispatch(closeModal())\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const getTasksThunk = () => dispatch => {\r\n    dispatch(toggleFetching())\r\n    return API.getTasks()\r\n        .then(response => {\r\n            dispatch(setTasks(response))\r\n            dispatch(toggleFetching())\r\n            return response\r\n        })\r\n}\r\n\r\nexport const getTodayTasksThunk = () => async dispatch => {\r\n    dispatch(toggleFetching())\r\n    const todayTasks = await API.getTodayTasks()\r\n    const doneTasks = await API.getDoneTasks()\r\n    dispatch(setTodayTasks(todayTasks))\r\n    dispatch(setDoneTasks(doneTasks))\r\n    dispatch(toggleFetching())\r\n}\r\n\r\n\r\nexport const addDayTextThunk = (text) => async dispatch => {\r\n    dispatch(toggleFetching())\r\n    await API.days.addDayText(text)\r\n    dispatch(setDay(true))\r\n    dispatch(closeModal())\r\n    dispatch(toggleFetching())\r\n}\r\n// export const getTodayTasksThunk = () => dispatch => {\r\n//     console.log('getthunk')\r\n//     dispatch(toggleFetching())\r\n//     return API.getTodayTasks()\r\n//         .then(response => {\r\n//             dispatch(setTodayTasks(response))\r\n//             dispatch(toggleFetching())\r\n//             return response\r\n//         })\r\n// }\r\n\r\n\r\n\r\n// export const getPlanTasksThunk = () => dispatch => {\r\n//     dispatch(toggleFetching())\r\n//     return API.getPlanTasks()\r\n//         .then(response => {\r\n//             dispatch(setPlanTasks(response))\r\n//             dispatch(toggleFetching())\r\n//             return response\r\n//         })\r\n// }\r\n\r\nexport const addTaskThunk = (newTask) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    API.addTask(newTask)\r\n        .then(response => {\r\n            dispatch(addTask(response))\r\n            dispatch(toggleFetching())\r\n            dispatch(closeModal())\r\n        })\r\n}\r\n\r\nexport const saveTaskThunk = (task) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    API.editTask(task)\r\n        .then(response => {\r\n            dispatch(saveTask())\r\n            dispatch(toggleFetching())\r\n            dispatch(closeModal())\r\n        })\r\n}\r\n\r\n// export const doTaskThunk = (id, index, plan) => dispatch => {\r\n//     dispatch(toggleFetching())\r\n//     API.do(id, index, plan)\r\n//         .then(response => {\r\n//             dispatch(doTask(id))\r\n//             dispatch(toggleFetching())\r\n//             // dispatch(closeModal())\r\n//         })\r\n// }\r\n\r\nexport const doTaskThunk = (id) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    API.do(id)\r\n        .then(response => {\r\n            dispatch(doTask({ id, parent: response }))\r\n            dispatch(toggleFetching())\r\n            // dispatch(closeModal())\r\n        })\r\n}\r\n\r\nexport const deleteTaskThunk = (task_id, parent) => async dispatch => {\r\n    dispatch(toggleFetching())\r\n    await API.deleteTask(task_id)\r\n    dispatch(deleteTask(task_id))\r\n    if (parent) {\r\n        const project = await API.project.getProject(parent)\r\n        dispatch(setProject(project))\r\n    } else {\r\n        dispatch(closeModal())\r\n        dispatch(toggleFetching())\r\n    }\r\n    \r\n\r\n    // API.deleteTask(task_id)\r\n    //     .then(response => {\r\n    //         dispatch(deleteTask(task_id))\r\n    //         dispatch(toggleFetching())\r\n    //         dispatch(closeModal())\r\n    //     })\r\n}\r\n// export const deleteTaskThunk = (task_id) => dispatch => {\r\n//     dispatch(toggleFetching())\r\n//     API.deleteTask(task_id)\r\n//         .then(response => {\r\n//             dispatch(deleteTask(task_id))\r\n//             dispatch(toggleFetching())\r\n//             dispatch(closeModal())\r\n//         })\r\n// }\r\n\r\nexport const addSubtaskThunk = (newTask) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    API.addTask(newTask)\r\n        .then(response => {\r\n            dispatch(addSubtask(response))\r\n            dispatch(toggleFetching())\r\n        })\r\n}\r\n\r\n// export const upTaskThunk = (index, task_id) => dispatch => {\r\n//     dispatch(toggleFetching())\r\n//     API.up(index, task_id)\r\n//         .then(response => {\r\n//             dispatch(upTask({ index, task_id }))\r\n//             dispatch(toggleFetching())\r\n//         })\r\n// }\r\n\r\n\r\n\r\n\r\n// export const getPlanThunk = (date) => dispatch => {\r\n//     dispatch(toggleFetching())\r\n//     API.getTodayPlan()\r\n//         .then(response => {\r\n//             dispatch(setCurrentDay(date))\r\n//             dispatch(setCurrentPlan(response))\r\n//             dispatch(toggleFetching())\r\n//         })\r\n// }\r\n\r\n// export const addPlanThunk = () => dispatch => {\r\n//     dispatch(toggleFetching())\r\n//     API.addTodayPlan()\r\n//         .then(response => {\r\n//             dispatch(setCurrentDay(response.date))\r\n//             dispatch(setCurrentPlan(true))\r\n//             dispatch(toggleFetching())\r\n//         })\r\n// }\r\n\r\n// export const changePlanThunk = (task_id, oldPlan, newPlan, oldIndex, newIndex) => dispatch => {\r\n//     dispatch(toggleFetching())\r\n//     API.changePlan(task_id, oldPlan, newPlan, oldIndex, newIndex)\r\n//         .then(response => {\r\n//             console.log('change')\r\n//             dispatch(changePlan({ task_id, oldPlan, newPlan, oldIndex, newIndex }))\r\n//             // dispatch(setCurrentPlan(true))\r\n//             dispatch(toggleFetching())\r\n//         })\r\n// }","import { Spin } from 'antd';\r\nimport React, { useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectTasks } from '../../app/taskReducer';\r\nimport { doTaskThunk } from '../../app/thunks';\r\n\r\nimport './Do.css'\r\n\r\n\r\nexport const Do = ({ task }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [current, setCurrent] = useState(false)\r\n\r\n    const { isFetching } = useSelector(selectTasks)\r\n\r\n    const doneHandler = async () => {\r\n        await dispatch(doTaskThunk(task.id))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                (isFetching && current)\r\n                    ? <Spin />\r\n                    : <div\r\n                        className='docheck'\r\n                        onClick={doneHandler}\r\n                    />\r\n            }\r\n        </>\r\n\r\n        // <div\r\n        //     className='docheck'\r\n        //     onClick={doneHandler}\r\n        // />\r\n    )\r\n}","import React from 'react';\r\nimport './Action.css'\r\n\r\nexport const Action = ({ important, date }) => {\r\n\r\n    const classes = ['action']\r\n    if (important) {\r\n        classes.push('important')\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n        >\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { SortableElement, sortableHandle } from 'react-sortable-hoc';\r\nimport moment from 'moment';\r\n\r\nimport { selectTasks, setCurrentTask, setModal,  } from '../../app/taskReducer';\r\n// import { upTaskThunk } from '../../app/thunks';\r\nimport { Do } from '../Do/Do';\r\n// import { TasksContext } from '../../hooks/useTasks';\r\nimport './index.css'\r\nimport { Action } from '../Action/Action';\r\nimport { TASK_TYPES } from '../../config/domain';\r\n\r\n// export const Task = ({ name, clickDone, id, type, period, balance, children, goal, today }) => {\r\n\r\n\r\n// const DragHandle = sortableHandle(() => <span className='draghandler'>:::</span>);\r\n\r\n\r\nexport const Task = ({ value, type }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const today = new Date()\r\n\r\n    const { filtertype } = useSelector(selectTasks)\r\n\r\n    // const upTask = () => {\r\n    //     dispatch(upTaskThunk(value.index, value.id))\r\n    // }\r\n\r\n\r\n    const clickHandler = () => {\r\n        dispatch(setModal({ typeOfModal: 'task'}))\r\n        dispatch(setCurrentTask( value ))\r\n    }\r\n\r\n    let taskClasses = ['task']\r\n    if (type === TASK_TYPES.done) {\r\n        taskClasses.push('task-done')\r\n    }\r\n\r\n    let classes = ['task_name']\r\n    if (value.goal) {\r\n        classes.push('goal')\r\n    }\r\n\r\n\r\n\r\n    // if (value.plan === 'today' && moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     classes.push('goal')\r\n    // }\r\n\r\n\r\n\r\n    // if (value.type === 'проект') {\r\n    //     classes.push('project')\r\n    // }\r\n\r\n    // let dateClasses = ['task_tag']\r\n    // if (moment(today).isSame(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('day_today')\r\n    // }\r\n    // if (moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('importantTag')\r\n    // }\r\n\r\n    // let periodClasses = ['task_tag']\r\n    // if (value.period === 5) {\r\n    //     periodClasses.push('importantTag')\r\n    // }\r\n\r\n    return (\r\n        <div\r\n            className={taskClasses.join(' ')}            \r\n        >\r\n            <div className='task_left'>\r\n                <div className='task_tools'>\r\n                    <Action important={value.important} date={value.date}/>\r\n                    <Do task={value} />\r\n                </div>\r\n                <div\r\n                    className='task_name'\r\n                    onClick={clickHandler}\r\n                    // onClick={() => dispatch(setModal({ typeOfModal: 'task', currentTask: value }))}\r\n                >\r\n                    <span\r\n                        className={classes.join(' ')}\r\n                    >\r\n                        {value.name}\r\n                    </span>\r\n                    {\r\n                        value.parentname\r\n                            ? <span className='task_children'>\r\n                                {`<  ${value.parentname}`}\r\n                            </span>\r\n                            : value.isparent\r\n                                ? <span className='task_children'>{' >'}</span>\r\n                                : null\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className='task_right'>\r\n                <div>\r\n                    {/* <span className='task_tag'> */}\r\n                    {/* <span className={periodClasses.join(' ')}>\r\n                        {value.period}\r\n                    </span> */}\r\n                    <span className='task_tag'>{value.balance}</span>\r\n                    {/* {\r\n                        filtertype === 'plan' ? <span className='task_tag'>{value.balance}</span> : <span className='task_tag'>{value.plan}</span>\r\n                    } */}\r\n\r\n                    {/* <span className={dateClasses.join(' ')}>\r\n                        {\r\n                            value.date ? moment(value.date).format('DD.MM') : null\r\n                        }\r\n                    </span> */}\r\n                    {/* {\r\n                        type === TASK_TYPES.today\r\n                            ? <span\r\n                                // onClick={upTask}\r\n                                className='task_up'>\r\n                                &#8597;\r\n                                </span>\r\n                            : null\r\n                    } */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// export default SortableElement(Task)","import moment from 'moment';\r\nimport { DATE_CONSTANTS } from './domain';\r\n\r\nexport const getTimeFromMins = mins => {\r\n    let hours = Math.trunc(mins/60);\r\n    let minutes = mins % 60;\r\n    return hours + '-' + minutes.toString().padStart(2, 0);\r\n};\r\n\r\nexport const getDatesForPeriod = period => {\r\n    const dates = []\r\n    for (let i = 1; i < period; i++) {\r\n        const date = moment().add(i, 'days')\r\n        const dateObject = { raw: date.format('YYYY-MM-DD'), show: date.format('DD.MM dddd') }\r\n        dates.push(dateObject)\r\n        // onlyDates.push(date.format('YYYY-MM-DD'))\r\n    }\r\n    return dates\r\n};\r\n\r\n\r\nexport const getDateFromConstant = date_constant => {\r\n    const objectFromDateConstant = DATE_CONSTANTS.find(item => item.eng === date_constant)\r\n    const days = objectFromDateConstant.days\r\n    const today = moment()\r\n    const result = today.add(days, 'days')\r\n    const formatResult = moment(result).format('YYYY-MM-DD')\r\n    return formatResult\r\n};\r\n\r\n\r\nexport const filterTodayTasks = tasks => {\r\n    const today = new Date()\r\n    return tasks\r\n    .filter(task => moment(task.date) <= today)\r\n    .sort(task => task.important ? -1 : 1) \r\n}","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { selectTasks } from '../app/taskReducer';\r\nimport { getTasksThunk } from '../app/thunks';\r\nimport { Task } from '../components/Task/Task';\r\nimport { TASK_TYPES } from '../config/domain';\r\nimport { filterTodayTasks, getDatesForPeriod } from '../config/helpers';\r\n\r\nimport './routes.css'\r\n\r\n\r\n\r\nexport const Tasks = () => {\r\n\r\n    const { tasks, filtertype, search } = useSelector(selectTasks)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    // if (search !== '') {\r\n    //     planTasks = tasks.filter(task => task.name.toLowerCase().includes(search.toLowerCase()))\r\n    // }\r\n\r\n    const dates = getDatesForPeriod(14)\r\n\r\n    // const todayTasks = tasks.filter(task => moment(task.date) <= today)\r\n    const todayTasks = filterTodayTasks(tasks)\r\n    const inboxTasks = tasks.filter(task => !task.date)\r\n    const otherTasks = tasks.filter(task => task.date && task.plan !== 'today')\r\n\r\n    useEffect(() => {\r\n        const getTasks = async () => {\r\n            dispatch(getTasksThunk())\r\n        }\r\n        getTasks()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className='plantask_div'>\r\n                <div className='plantask_date'>Инбокс</div>\r\n                {\r\n                    inboxTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                            type={TASK_TYPES.plan}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            <div className='plantask_div'>\r\n                <div className='plantask_date'>СЕГОДНЯ</div>\r\n                {\r\n                    todayTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                            type={TASK_TYPES.plan}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            {\r\n                dates.map((date, index) => {\r\n                    const tasksForDate = otherTasks.filter(task => task.date === date.raw)\r\n\r\n                    return (\r\n                        <div className='plantask_div' key={index}>\r\n                            <div className='plantask_date'>{date.show}</div>\r\n                            {\r\n                                tasksForDate.map((task, index) => (\r\n                                    <Task\r\n                                        key={task.id}\r\n                                        index={index}\r\n                                        value={task}\r\n                                        type={TASK_TYPES.plan}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}","import { useSelector } from 'react-redux';\r\nimport { selectTasks } from '../../app/taskReducer';\r\nimport { Do } from '../Do/Do';\r\n\r\nimport './FocusTask.css'\r\n\r\n\r\nexport const FocusTask = () => {\r\n\r\n    // const dispatch = useDispatch()\r\n\r\n    const { currentTask } = useSelector(selectTasks)\r\n\r\n    return (\r\n        <div className='focustask'>\r\n            <Do />\r\n            <span className='focustask_heading'>{currentTask.name}</span>\r\n            {\r\n                currentTask.childname \r\n                ? <span>{` < ${currentTask.childname}`}</span> \r\n                : null\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\n\r\n\r\nimport { selectTasks, setCurrentTask } from '../app/taskReducer';\r\nimport { getTasksThunk } from '../app/thunks';\r\nimport { Button } from '../components/Button/Button';\r\nimport { FocusTask } from '../components/FocusTask/FocusTask'\r\n\r\n\r\nexport const Focus = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const { tasks, currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const [time, setTime] = useState(0)\r\n    console.log(\"🚀 ~ file: Focus.js ~ line 17 ~ Focus ~ time\", time)\r\n\r\n    // let timer = new moment.duration(1000).timer();\r\n\r\n    // let timer = setInterval(setTime(time + 1), 1000);\r\n\r\n    // const startTimer = () => {\r\n    //     console.log(time)\r\n    //     timer = setInterval(setTime(time + 1), 1000);\r\n    // }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const getTasks = async () => {\r\n            const newTasks = await dispatch(getTasksThunk())\r\n            const currentTask = newTasks.find(task => task.plan === 'today' && task.index === 0)\r\n            if (currentTask) {\r\n                dispatch(setCurrentTask(currentTask || null))\r\n            } else {\r\n                dispatch(setCurrentTask(null))\r\n            }\r\n        }\r\n        getTasks()\r\n    }, [tasks.length])\r\n\r\n    if (isFetching) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='focus_mode'>\r\n            {\r\n                currentTask\r\n                    ? <FocusTask />\r\n                    : <div>Нет задач на сегодня</div>\r\n            }\r\n            {/* <Button\r\n                title='Старт'\r\n                // click={startTimer}\r\n            /> */}\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Select } from 'antd';\r\n\r\nimport { selectTasks, changeCurrentTask, setModal } from '../../app/taskReducer';\r\nimport { getProjectsThunk, getProjectThunk } from '../../app/thunks';\r\nimport './ParentTask.css'\r\n\r\n\r\nexport const ParentTask = ({ id, name }) => {\r\n\r\n    const [isParent, setIsParent] = useState(false)\r\n    const { projects, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const startChooseParent = async () => {\r\n        if (projects.length === 0) {\r\n            dispatch(getProjectsThunk())\r\n        }\r\n        setIsParent(true)\r\n    }\r\n\r\n    const handleChangeType = (value) => {\r\n        dispatch(changeCurrentTask({ type: 'child', value }))\r\n    }\r\n\r\n    const clickHandler = () => {\r\n        dispatch(getProjectThunk(id))\r\n    }\r\n\r\n    const { Option } = Select;\r\n\r\n    if (isParent) {\r\n        return (\r\n            <Select\r\n                showSearch\r\n                style={{ width: '100%' }}\r\n                // onChange={value => handleChangeType(value, 'child')} value={currentTask.child}\r\n                onChange={handleChangeType}\r\n                // value={currentTask.child}\r\n                filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                }\r\n            >\r\n                {\r\n                    projects.map(task => <Option value={task.id}>{task.name}</Option>)\r\n                }\r\n            </Select>\r\n        )\r\n    }\r\n\r\n\r\n    if (!name) {\r\n        return (\r\n            <a\r\n                onClick={startChooseParent}\r\n            >\r\n                Добавить родителя\r\n            </a>)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='parenttask'\r\n                onClick={clickHandler}\r\n\r\n            >\r\n                {name}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n// export const ParentTask = ({ task }) => {\r\n\r\n//     const dispacth = useDispatch()\r\n\r\n//     const clickHandler = () => {\r\n//         dispacth(setModal({typeOfModal: 'edit', currentTask: task}))\r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             <div\r\n//                 className='parenttask'\r\n//                 onClick={clickHandler}\r\n\r\n//             >\r\n//                 {task.name}\r\n//             </div>\r\n//         </>\r\n//     )\r\n// }","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { SortableElement, sortableHandle } from 'react-sortable-hoc';\r\n\r\nimport { setModal } from '../../app/taskReducer'\r\nimport { MODAL_TYPES } from '../../config/domain';\r\nimport './Subtask.css'\r\n\r\nconst DragHandle = sortableHandle(() => <span className='draghandler'>:::</span>);\r\n\r\n\r\nconst Subtask = ({ task, change }) => {\r\n\r\n    const [input, setInput] = useState(task.name)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleBlur = () => {\r\n        if (input !== '') {\r\n            change(task.id, input)\r\n        }\r\n    }\r\n\r\n    let dateFormat = ''\r\n    if (task.date) {\r\n        const dateFormatArray = task.date.split('-')\r\n        dateFormat = dateFormatArray[2] + '.' + dateFormatArray[1]\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className='subtask'>\r\n            <DragHandle />\r\n            <span>\r\n                {task.name}\r\n            </span>\r\n            {/* <input\r\n                className='subtask_input'\r\n                value={input}\r\n                onChange={e => setInput(e.target.value)}\r\n                onBlur={handleBlur}\r\n                autoFocus={task.name === ''}\r\n            /> */}\r\n            <div className='subtask_info'>\r\n                <span className='subtask_plan'>{dateFormat}</span>\r\n                <span\r\n                    className='subtask_go'\r\n                    onClick={() => dispatch(setModal({ typeOfModal: MODAL_TYPES.task, currentTask: task }))}\r\n                >\r\n                    {'>'}\r\n                </span>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SortableElement(Subtask)","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { addSubtaskThunk } from '../../app/thunks';\r\nimport { CURRENT_TASK } from '../../config/domain';\r\n\r\nimport './Subtask.css'\r\n\r\n\r\nexport const SubtaskEdit = ({ name = '', close, goal, balance, child, plan }) => {\r\n\r\n    const [input, setInput] = useState(name)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13) {\r\n            dispatch(addSubtaskThunk({...CURRENT_TASK, goal: goal, balance: balance, child: child, name: input, plan: plan}))\r\n            close()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='subtask'>\r\n            <input\r\n                className='subtask_input'\r\n                value={input}\r\n                onChange={e => setInput(e.target.value)}\r\n                onKeyPress={saveKeyHandler}\r\n                autoFocus={name === ''}\r\n            />\r\n        </div>\r\n    );\r\n};","import React, { useState } from 'react';\r\nimport { DatePicker, Select, Button, Radio, Switch } from 'antd';\r\nimport moment from 'moment';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { sortableContainer } from 'react-sortable-hoc';\r\n\r\nimport { ParentTask } from '../ParentTask/ParentTask';\r\nimport Subtask from '../Subtask/Subtask';\r\nimport { SubtaskEdit } from '../Subtask/SubtaskEdit';\r\nimport { Do } from '../Do/Do';\r\n\r\nimport { changeCurrentTask, selectTasks } from '../../app/taskReducer';\r\nimport { deleteProjectThunk, deleteTaskThunk, saveTaskThunk } from '../../app/thunks';\r\n\r\nimport './ModalForm.css'\r\nimport { getDateFromConstant } from '../../config/helpers';\r\nimport { DATE_CONSTANTS } from '../../config/domain';\r\n\r\n\r\nconst SortableContainer = sortableContainer(({ children }) => {\r\n    return <div>{children}</div>;\r\n});\r\n\r\n\r\nexport const ProjectForm = () => {\r\n\r\n    const { Option } = Select;\r\n    const { currentTask, tasks, isplan, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [isSubtask, setIsSubtask] = useState(false)\r\n\r\n    const handleChangeName = e => {\r\n        changeCurrentTask('name', e.target.value)\r\n        dispatch(changeCurrentTask({ type: 'name', value: e.target.value }))\r\n    }\r\n\r\n    const handleChangeType = (value, option) => {\r\n        console.log(\"🚀 ~ file: ModalEdit.js ~ line 43 ~ handleChangeType ~ value\", value, option)\r\n        dispatch(changeCurrentTask({ type: option, value }))\r\n        // dispatch(changeCurrentTask({ type: option, value: value.target.value }))\r\n    }\r\n\r\n\r\n    // const keyPressHandler = e => {\r\n    //     if (e.keyCode === 13 && e.ctrlKey) {\r\n    //         setIsSubtask(true)\r\n    //     }\r\n    // }\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deleteProjectThunk(currentTask.id))\r\n    }\r\n\r\n    const saveCurrentTask = () => {\r\n        if (currentTask.balance) {\r\n            dispatch(saveTaskThunk(currentTask))\r\n        }        \r\n    }\r\n\r\n    const sortHandler = async ({ oldIndex, newIndex }) => {\r\n        // setTasks(tasks => arrayMove(tasks, oldIndex, newIndex))\r\n        // await API.reindex(plan, oldIndex, newIndex)\r\n    }\r\n\r\n    const parentTasks = tasks.find(task => task.id === currentTask.child)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className='flex'>\r\n                    <Do task={currentTask} />\r\n                    <TextareaAutosize\r\n                        className='input_name'\r\n                        value={currentTask.name}\r\n                        onChange={handleChangeName}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className='input_block'>\r\n                <div className='input_div'>\r\n                    <div>Сфера жизни</div>\r\n                    <Select\r\n                        onChange={value => handleChangeType(value, 'balance')}\r\n                        value={currentTask.balance}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value=\"работа\">работа</Option>\r\n                        <Option value=\"проект\">проект</Option>\r\n                        <Option value=\"развитие\">развитие</Option>\r\n                        <Option value=\"семья\">семья</Option>\r\n                        <Option value=\"здоровье\">здоровье</Option>\r\n                        <Option value=\"быт\">быт</Option>\r\n                        <Option value=\"отдых\">отдых</Option>\r\n                    </Select>\r\n                </div>\r\n                <div className='input_div'>\r\n                    <div>Цель</div>\r\n                    <Switch defaultChecked={currentTask.goal} onChange={value => handleChangeType(value, 'goal')} />\r\n                </div>\r\n            </div>\r\n\r\n            {/* <div className='input_block'>\r\n\r\n            </div> */}\r\n\r\n\r\n            <div className='subtask_block'>\r\n                <div>Подзадачи</div>\r\n                <div\r\n                    onClick={() => setIsSubtask(true)}\r\n                    className='subtask_button'\r\n                >\r\n                    +\r\n                </div>\r\n            </div>\r\n\r\n            <SortableContainer\r\n                onSortEnd={sortHandler}\r\n                useDragHandle\r\n            >\r\n                {currentTask.subtasks.map((subtask, index) => (\r\n                    <Subtask\r\n                        task={subtask}\r\n                        key={subtask.id}\r\n                        index={index}\r\n                    />\r\n                ))}\r\n            </SortableContainer>\r\n            {\r\n                isSubtask\r\n                    ? <SubtaskEdit\r\n                        close={() => setIsSubtask(false)}\r\n                        goal={currentTask.goal}\r\n                        balance={currentTask.balance}\r\n                        child={currentTask.id}\r\n                        plan='inbox'\r\n                    />\r\n                    : null\r\n            }\r\n\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveCurrentTask}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n                <Button\r\n                    onClick={deleteHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Удалить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { DatePicker, Select, Button, Radio, Switch } from 'antd';\r\nimport moment from 'moment';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { sortableContainer } from 'react-sortable-hoc';\r\n\r\nimport { ParentTask } from '../ParentTask/ParentTask';\r\nimport Subtask from '../Subtask/Subtask';\r\nimport { SubtaskEdit } from '../Subtask/SubtaskEdit';\r\nimport { Do } from '../Do/Do';\r\n\r\nimport { changeCurrentTask, selectTasks } from '../../app/taskReducer';\r\nimport { deleteTaskThunk, saveTaskThunk } from '../../app/thunks';\r\n\r\nimport './ModalForm.css'\r\nimport { getDateFromConstant } from '../../config/helpers';\r\nimport { DATE_CONSTANTS } from '../../config/domain';\r\n\r\n\r\nconst SortableContainer = sortableContainer(({ children }) => {\r\n    return <div>{children}</div>;\r\n});\r\n\r\n\r\nexport const ModalEdit = () => {\r\n\r\n\r\n    const { Option } = Select;\r\n    const { currentTask, tasks, isplan, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [isSubtask, setIsSubtask] = useState(false)\r\n\r\n    const handleChangeName = e => {\r\n        changeCurrentTask('name', e.target.value)\r\n        dispatch(changeCurrentTask({ type: 'name', value: e.target.value }))\r\n    }\r\n\r\n    const handleChangeType = (value, option) => {\r\n        console.log(\"🚀 ~ file: ModalEdit.js ~ line 43 ~ handleChangeType ~ value\", value, option)\r\n        dispatch(changeCurrentTask({ type: option, value }))\r\n        // dispatch(changeCurrentTask({ type: option, value: value.target.value }))\r\n    }\r\n\r\n    const handleChangeDate = (date, dateString) => {\r\n        console.log(\"🚀 ~ file: ModalEdit.js ~ line 39 ~ handleChangeDate ~ dateString\", dateString)\r\n\r\n        dispatch(changeCurrentTask({ type: 'date', value: dateString }))\r\n    }\r\n\r\n    const setDateFromConstants = (dateConstant) => {\r\n        const date = getDateFromConstant(dateConstant)\r\n        dispatch(changeCurrentTask({ type: 'date', value: date }))\r\n    }\r\n\r\n    // const keyPressHandler = e => {\r\n    //     if (e.keyCode === 13 && e.ctrlKey) {\r\n    //         setIsSubtask(true)\r\n    //     }\r\n    // }\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deleteTaskThunk(currentTask.id, currentTask.child))\r\n    }\r\n\r\n    const saveCurrentTask = () => {\r\n        dispatch(saveTaskThunk(currentTask))\r\n    }\r\n\r\n    const sortHandler = async ({ oldIndex, newIndex }) => {\r\n        // setTasks(tasks => arrayMove(tasks, oldIndex, newIndex))\r\n        // await API.reindex(plan, oldIndex, newIndex)\r\n    }\r\n\r\n    const parentTasks = tasks.find(task => task.id === currentTask.child)\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                currentTask.type !== 'проект'\r\n                    ? <ParentTask\r\n                        name={currentTask.parentname}\r\n                        id={currentTask.parentid}\r\n                    />\r\n                    : null\r\n            }\r\n            <div>\r\n                <div className='flex'>\r\n                    <Do task={currentTask} />\r\n                    <TextareaAutosize\r\n                        className='input_name'\r\n                        value={currentTask.name}\r\n                        onChange={handleChangeName}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className='input_block'>\r\n                <div className='input_div'>\r\n                    <div>Тип задачи</div>\r\n                    <Radio.Group onChange={value => handleChangeType(value, 'type')} value={currentTask.type}>\r\n                        <Radio value={\"задача\"}>задача</Radio>\r\n                        <Radio value={\"проект\"}>проект</Radio>\r\n                    </Radio.Group>\r\n                </div>\r\n\r\n                <div className='input_div'>\r\n                    <div>Сфера жизни</div>\r\n                    <Select\r\n                        onChange={value => handleChangeType(value, 'balance')}\r\n                        value={currentTask.balance}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value=\"работа\">работа</Option>\r\n                        <Option value=\"проект\">проект</Option>\r\n                        <Option value=\"развитие\">развитие</Option>\r\n                        <Option value=\"семья\">семья</Option>\r\n                        <Option value=\"здоровье\">здоровье</Option>\r\n                        <Option value=\"быт\">быт</Option>\r\n                        <Option value=\"отдых\">отдых</Option>\r\n                    </Select>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='input_block'>\r\n                <div className='input_div'>\r\n                    <div>Цель</div>\r\n                    {/* <Select\r\n                        onChange={value => handleChangeType(value, 'goal')}\r\n                        value={currentTask.goal}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value={true}>Да</Option>\r\n                        <Option value={false}>Нет</Option>\r\n                    </Select> */}\r\n                    <Switch defaultChecked={currentTask.goal} onChange={value => handleChangeType(value, 'goal')} />\r\n                </div>\r\n                {\r\n                    // currentTask.type !== 'проект'\r\n                    //     ? <div className='input_div'>\r\n                    //         <div>Действие</div>\r\n                    //         <Select\r\n                    //             onChange={value => handleChangeType(value, 'action')}\r\n                    //             value={currentTask.action}\r\n                    //             style={{ width: 200 }}\r\n                    //             size='large'\r\n                    //         >\r\n                    //             <Option value=\"do\">лягушка</Option>\r\n                    //             {/* <Option value=\"wait\">простая</Option>\r\n                    //             <Option value=\"go\">go</Option> */}\r\n                    //             <Option value=\"call\">простая</Option>\r\n                    //         </Select>\r\n                    //     </div>\r\n                    //     : null\r\n                }\r\n                {/* <div className='input_div'>\r\n                    <div>Действие</div>\r\n                    <Select\r\n                        onChange={value => handleChangeType(value, 'action')}\r\n                        value={currentTask.action}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value=\"do\">do</Option>\r\n                        <Option value=\"wait\">wait</Option>\r\n                        <Option value=\"go\">go</Option>\r\n                        <Option value=\"call\">call</Option>\r\n                    </Select>\r\n                </div> */}\r\n            </div>\r\n            {\r\n                currentTask.type !== 'проект'\r\n                    ? <div className='input_block'>\r\n                        {/* <div className='input_div'>\r\n                            <div>Необходимое время</div>\r\n                            <Select\r\n                                onChange={value => handleChangeType(value, 'period')}\r\n                                value={currentTask.period}\r\n                                style={{ width: 200 }}\r\n                                size='large'\r\n                            >\r\n                                <Option value=\"5\">5</Option>\r\n                                <Option value=\"15\">15</Option>\r\n                                <Option value=\"30\">30</Option>\r\n                                <Option value=\"45\">45</Option>\r\n                                <Option value=\"60\">60</Option>\r\n                                <Option value=\"90\">90</Option>\r\n                                <Option value=\"120\">120</Option>\r\n                                <Option value=\"180\">180</Option>\r\n                                <Option value=\"240\">240</Option>\r\n                            </Select>\r\n                        </div> */}\r\n                        <div className='input_div'>\r\n                            <div>Дата</div>\r\n                            <DatePicker\r\n                                // value={currentTask.date ? moment(currentTask.date, 'YYYY-MM-DD') : null}\r\n                                value={currentTask.date ? moment(currentTask.date) : null}\r\n                                onChange={handleChangeDate}\r\n                                style={{ width: 200 }}\r\n                                size='large'\r\n                            />\r\n                            <div>\r\n                                {\r\n                                    DATE_CONSTANTS.map(item => <span key={item.eng} className='date_constant' onClick={() => setDateFromConstants(item.eng)}>{item.ru}</span>)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    : null\r\n            }\r\n\r\n            {/* <div className='input_block'>\r\n                <div className='input_div'>\r\n                    <div>Необходимое время</div>\r\n                    <Select\r\n                        onChange={value => handleChangeType(value, 'period')}\r\n                        value={currentTask.period}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value=\"5\">5</Option>\r\n                        <Option value=\"15\">15</Option>\r\n                        <Option value=\"30\">30</Option>\r\n                        <Option value=\"45\">45</Option>\r\n                        <Option value=\"60\">60</Option>\r\n                        <Option value=\"90\">90</Option>\r\n                        <Option value=\"120\">120</Option>\r\n                        <Option value=\"180\">180</Option>\r\n                        <Option value=\"240\">240</Option>\r\n                    </Select>\r\n                </div>\r\n                <div className='input_div'>\r\n                    <div>Дата</div>\r\n                    <DatePicker\r\n                        // value={currentTask.date ? moment(currentTask.date, 'YYYY-MM-DD') : null}\r\n                        value={currentTask.date ? moment(currentTask.date) : null}\r\n                        onChange={handleChangeDate}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    />\r\n                </div>\r\n            </div> */}\r\n            {/* {\r\n                currentTask.type !== 'проект'\r\n                    ? <div className='input_block'>\r\n                        <div className='input_div'>\r\n                            <div>Повторяющаяся</div>\r\n                            <Select\r\n                                onChange={value => handleChangeType(value, 'repeat')}\r\n                                value={currentTask.repeat}\r\n                                style={{ width: 200 }}\r\n                                size='large'\r\n                            >\r\n                                <Option value={false}>нет</Option>\r\n                                <Option value={true}>да</Option>\r\n                            </Select>\r\n                        </div>\r\n                        {\r\n                            currentTask.repeat\r\n                                ? <div className='input_div'>\r\n                                    <div>Повторяющаяся</div>\r\n                                    <Select\r\n                                        onChange={value => handleChangeType(value, 'repeatday')}\r\n                                        value={currentTask.repeatday}\r\n                                        style={{ width: 200 }}\r\n                                        size='large'\r\n                                    >\r\n                                        <Option value={1}>1</Option>\r\n                                        <Option value={2}>2</Option>\r\n                                        <Option value={3}>3</Option>\r\n                                        <Option value={7}>7</Option>\r\n                                        <Option value={30}>30</Option>\r\n                                    </Select>\r\n                                </div>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                    : null\r\n            } */}\r\n\r\n            {/* <div className='input_block'>\r\n                <div className='input_div'>\r\n                    <div>Повторяющаяся</div>\r\n                    <Select\r\n                        onChange={value => handleChangeType(value, 'repeat')}\r\n                        value={currentTask.repeat}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value={false}>нет</Option>\r\n                        <Option value={true}>да</Option>\r\n                    </Select>\r\n                </div>\r\n                {\r\n                    currentTask.repeat\r\n                        ? <div className='input_div'>\r\n                            <div>Повторяющаяся</div>\r\n                            <Select\r\n                                onChange={value => handleChangeType(value, 'repeatday')}\r\n                                value={currentTask.repeatday}\r\n                                style={{ width: 200 }}\r\n                                size='large'\r\n                            >\r\n                                <Option value={1}>1</Option>\r\n                                <Option value={2}>2</Option>\r\n                                <Option value={3}>3</Option>\r\n                                <Option value={30}>30</Option>\r\n                            </Select>\r\n                        </div>\r\n                        : null\r\n                }\r\n            </div> */}\r\n\r\n\r\n            {/* <div className='input_div'>\r\n                <div>План выполнить</div>\r\n                <Select\r\n                    onChange={value => handleChangeType(value, 'plan')}\r\n                    value={currentTask.plan}\r\n                    style={{ width: '100%' }}\r\n                    size='large'\r\n                >\r\n                    <Option value=\"inbox\">inbox</Option>\r\n                    <Option value=\"today\">today</Option>\r\n                    <Option value=\"week\">week</Option>\r\n                    <Option value=\"upcoming\">upcoming</Option>\r\n                    <Option value=\"later\">later</Option>\r\n                </Select>\r\n            </div> */}\r\n\r\n\r\n\r\n\r\n            {/* <div className='input_div'>\r\n                <div>План выполнить</div>\r\n                <Select onChange={value => handleChangeType(value, 'plan')} value={currentTask.plan}>\r\n                    <Option value=\"inbox\">inbox</Option>\r\n                    <Option value=\"today\">today</Option>\r\n                    <Option value=\"upcoming\">upcoming</Option>\r\n                    <Option value=\"later\">later</Option>\r\n                </Select>\r\n            </div>\r\n\r\n            {\r\n                currentTask.type !== 'проект'\r\n                    ? <>\r\n                        <div className='input_div'>\r\n                            <div>Необходимое время</div>\r\n                            <Select onChange={value => handleChangeType(value, 'period')} value={currentTask.period}>\r\n                                <Option value=\"5\">5</Option>\r\n                                <Option value=\"15\">15</Option>\r\n                                <Option value=\"30\">30</Option>\r\n                                <Option value=\"45\">45</Option>\r\n                                <Option value=\"60\">60</Option>\r\n                                <Option value=\"90\">90</Option>\r\n                                <Option value=\"120\">120</Option>\r\n                                <Option value=\"180\">180</Option>\r\n                                <Option value=\"240\">240</Option>\r\n                            </Select>\r\n                        </div>\r\n                        <div className='input_div'>\r\n                            <div>Действие</div>\r\n                            <Select onChange={value => handleChangeType(value, 'action')} value={currentTask.action}>\r\n                                <Option value=\"do\">do</Option>\r\n                                <Option value=\"wait\">wait</Option>\r\n                                <Option value=\"go\">go</Option>\r\n                                <Option value=\"call\">call</Option>\r\n                            </Select>\r\n                        </div>\r\n                        <div className='input_div'>\r\n                            <div>Повторяющаяся</div>\r\n                            <Select onChange={value => handleChangeType(value, 'repeat')} value={currentTask.repeat}>\r\n                                <Option value={false}>нет</Option>\r\n                                <Option value={true}>да</Option>\r\n                            </Select>\r\n                        </div>\r\n                        <div className='input_div'>\r\n                            <div>Дата</div>\r\n                            <DatePicker\r\n                                // value={currentTask.date ? moment(currentTask.date, 'YYYY-MM-DD') : null}\r\n                                value={currentTask.date ? moment(currentTask.date) : null}\r\n                                onChange={handleChangeDate}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                    : null\r\n            }\r\n            {\r\n                currentTask.plan === 'today' && isplan\r\n                    ? <div className='input_div'>\r\n                        <div>Почему дополняешь план?</div>\r\n                        <TextareaAutosize />\r\n                    </div>\r\n                    : null\r\n            }\r\n            {\r\n                currentTask.repeat\r\n                    ? <div className='input_div'>\r\n                        <div>Повторяющаяся</div>\r\n                        <Select onChange={value => handleChangeType(value, 'repeatday')} value={currentTask.repeatday}>\r\n                            <Option value={1}>1</Option>\r\n                            <Option value={2}>2</Option>\r\n                            <Option value={3}>3</Option>\r\n                            <Option value={30}>30</Option>\r\n                        </Select>\r\n                    </div>\r\n                    : null\r\n            } */}\r\n\r\n            {\r\n                currentTask.type === 'проект'\r\n                    ? <>\r\n                        <div className='subtask_block'>\r\n                            <div>Подзадачи</div>\r\n                            <div\r\n                                onClick={() => setIsSubtask(true)}\r\n                                className='subtask_button'\r\n                            >\r\n                                +\r\n                            </div>\r\n                        </div>\r\n\r\n                        <SortableContainer\r\n                            onSortEnd={sortHandler}\r\n                            useDragHandle\r\n                        >\r\n                            {currentTask.subtasks.map((subtask, index) => (\r\n                                <Subtask\r\n                                    task={subtask}\r\n                                    key={subtask.id}\r\n                                    index={index}\r\n                                />\r\n                            ))}\r\n                        </SortableContainer>\r\n                        {\r\n                            isSubtask\r\n                                ? <SubtaskEdit\r\n                                    close={() => setIsSubtask(false)}\r\n                                    goal={currentTask.goal}\r\n                                    balance={currentTask.balance}\r\n                                    child={currentTask.id}\r\n                                    plan='inbox'\r\n                                />\r\n                                : null\r\n                        }\r\n                    </>\r\n                    : null\r\n            }\r\n\r\n\r\n\r\n\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveCurrentTask}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n                <Button\r\n                    onClick={deleteHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Удалить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\nimport { ModalEdit } from './ModalEdit';\r\nimport { ModalNew } from './ModalNew';\r\n\r\nimport './ModalForm.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectTasks, closeModal } from '../../app/taskReducer';\r\nimport { ProjectForm } from './ProjectForm';\r\nimport { TaskForm } from './TaskForm';\r\nimport { DayNew } from './DayNew';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        width: '500px',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n};\r\n\r\n\r\nconst modals = {\r\n    project: ProjectForm,\r\n    task: TaskForm,\r\n    new: ModalNew,\r\n    day: DayNew,\r\n};\r\n\r\n\r\nexport const ModalForm = () => {\r\n\r\n    const { modalIsOpen, typeOfModal } = useSelector(selectTasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const ModalComponent = modals[typeOfModal];\r\n\r\n\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalIsOpen}\r\n            onRequestClose={() => dispatch(closeModal())}\r\n            ariaHideApp={false}\r\n            style={customStyles}\r\n        >\r\n            <ModalComponent />\r\n            {/* {\r\n                typeOfModal === 'new' ? <ModalNew /> : <ModalEdit />\r\n            } */}\r\n        </Modal>\r\n    )\r\n}","import React from 'react';\r\nimport { DatePicker, Select, Button, Radio, Switch } from 'antd';\r\nimport moment from 'moment';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { ParentTask } from '../ParentTask/ParentTask';\r\nimport { Do } from '../Do/Do';\r\nimport { changeCurrentTask, selectTasks } from '../../app/taskReducer';\r\nimport { deleteTaskThunk, saveTaskThunk } from '../../app/thunks';\r\nimport { getDateFromConstant } from '../../config/helpers';\r\nimport { DATE_CONSTANTS } from '../../config/domain';\r\n\r\nimport './ModalForm.css'\r\n\r\n\r\n\r\nexport const TaskForm = () => {\r\n\r\n    const { Option } = Select;\r\n    const { currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleChangeName = e => {\r\n        changeCurrentTask('name', e.target.value)\r\n        dispatch(changeCurrentTask({ type: 'name', value: e.target.value }))\r\n    }\r\n\r\n    const handleChangeData = (value, type) => {\r\n        if (value.target) {\r\n            dispatch(changeCurrentTask({ type, value: value.target.value }))\r\n        } else {\r\n            dispatch(changeCurrentTask({ type, value }))\r\n        }\r\n        \r\n    }\r\n\r\n    const handleChangeDate = (date, dateString) => {\r\n        dispatch(changeCurrentTask({ type: 'date', value: dateString }))\r\n    }\r\n\r\n    const setDateFromConstants = (dateConstant) => {\r\n        const date = getDateFromConstant(dateConstant)\r\n        dispatch(changeCurrentTask({ type: 'date', value: date }))\r\n    }\r\n\r\n    // const keyPressHandler = e => {\r\n    //     if (e.keyCode === 13 && e.ctrlKey) {\r\n    //         setIsSubtask(true)\r\n    //     }\r\n    // }\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deleteTaskThunk(currentTask.id, currentTask.child))\r\n    }\r\n\r\n    const saveCurrentTask = () => {  \r\n        if (!currentTask.balance && currentTask.child === 0) {\r\n          return  \r\n        }      \r\n        dispatch(saveTaskThunk(currentTask))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ParentTask\r\n                name={currentTask.parentname}\r\n                id={currentTask.parentid}\r\n            />\r\n\r\n            <div>\r\n                <div className='flex'>\r\n                    <Do task={currentTask} />\r\n                    <TextareaAutosize\r\n                        className='input_name'\r\n                        value={currentTask.name}\r\n                        onChange={handleChangeName}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className='input_block'>\r\n\r\n                <div className='input_div'>\r\n                    <div>Тип задачи</div>\r\n                    <Radio.Group onChange={value => handleChangeData(value, 'type')} value={currentTask.type}>\r\n                        <Radio value={\"задача\"}>задача</Radio>\r\n                        <Radio value={\"проект\"}>проект</Radio>\r\n                    </Radio.Group>\r\n                </div>\r\n\r\n                <div className='input_div'>\r\n                    <div>Сфера жизни</div>\r\n                    <Select\r\n                        onChange={value => handleChangeData(value, 'balance')}\r\n                        value={currentTask.balance}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value=\"работа\">работа</Option>\r\n                        <Option value=\"проект\">проект</Option>\r\n                        <Option value=\"развитие\">развитие</Option>\r\n                        <Option value=\"семья\">семья</Option>\r\n                        <Option value=\"здоровье\">здоровье</Option>\r\n                        <Option value=\"быт\">быт</Option>\r\n                        <Option value=\"отдых\">отдых</Option>\r\n                    </Select>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='input_block'>\r\n                <div className='input_div'>\r\n                    <div>Цель</div>\r\n                    <Switch defaultChecked={currentTask.goal} onChange={value => handleChangeData(value, 'goal')} />\r\n                </div>\r\n                <div className='input_div'>\r\n                    <div>Важно</div>\r\n                    <Switch defaultChecked={currentTask.important} onChange={value => handleChangeData(value, 'important')} />\r\n                </div>\r\n            </div>\r\n            {\r\n                currentTask.type !== 'проект'\r\n                    ? <div className='input_block'>\r\n                        <div className='input_div'>\r\n                            <div>Дата</div>\r\n                            <DatePicker\r\n                                // value={currentTask.date ? moment(currentTask.date, 'YYYY-MM-DD') : null}\r\n                                value={currentTask.date ? moment(currentTask.date) : null}\r\n                                onChange={handleChangeDate}\r\n                                // onChange={value => handleChangeData(value, 'date')}\r\n                                style={{ width: 200 }}\r\n                                size='large'\r\n                            />\r\n                            <div>\r\n                                {\r\n                                    DATE_CONSTANTS.map(item => <span key={item.eng} className='date_constant' onClick={() => setDateFromConstants(item.eng)}>{item.ru}</span>)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    : null\r\n            }\r\n\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveCurrentTask}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n                <Button\r\n                    onClick={deleteHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Удалить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { Button } from 'antd';\r\n\r\nimport { selectTasks } from '../../app/taskReducer';\r\nimport { addTaskThunk } from '../../app/thunks';\r\n\r\nimport './ModalForm.css'\r\n\r\nexport const ModalNew = () => {\r\n\r\n    const [name, setName] = useState('')\r\n\r\n    const { currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13) {\r\n            event.preventDefault();\r\n            if (name !== '') {\r\n                dispatch(addTaskThunk({ ...currentTask, name: name }))\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveHandler = () => {\r\n        if (name !== '') {\r\n            dispatch(addTaskThunk({ ...currentTask, name: name }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onKeyPress={saveKeyHandler}\r\n        >\r\n            <TextareaAutosize\r\n                value={name}\r\n                className='input_name'\r\n                onChange={e => setName(e.target.value)}\r\n                autoFocus\r\n            />\r\n            {/* <input\r\n                value={name}\r\n                className='input_name'\r\n                onChange={e => setName(e.target.value)}\r\n                autoFocus\r\n            /> */}\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { Button } from 'antd';\r\n\r\nimport { selectTasks } from '../../app/taskReducer';\r\nimport { addDayTextThunk, addTaskThunk } from '../../app/thunks';\r\n\r\nimport './ModalForm.css'\r\n\r\nexport const DayNew = () => {\r\n\r\n    const [text, setText] = useState('')\r\n\r\n    const { currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13 && event.ctrlKey) {\r\n            if (text !== '') {\r\n                dispatch(addDayTextThunk(text))\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveHandler = () => {\r\n        if (text !== '') {\r\n            dispatch(addDayTextThunk(text))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onKeyPress={saveKeyHandler}\r\n        >\r\n            <TextareaAutosize\r\n                value={text}\r\n                className='input_name'\r\n                onChange={e => setText(e.target.value)}\r\n                autoFocus\r\n            />\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { selectTasks, setModal } from '../../app/taskReducer';\r\nimport { MODAL_TYPES } from '../../config/domain';\r\n\r\nimport './MainHeader.css'\r\n\r\n\r\nexport const MainHeader = () => {\r\n\r\n    const { daytext } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const openDayModal = () => {\r\n        dispatch(setModal({typeOfModal: MODAL_TYPES.day}))\r\n    }\r\n\r\n    return (\r\n        <div className='mainheader'>\r\n            <div>\r\n                <NavLink className='mainheader_item' to='/projects'>Проекты</NavLink>\r\n                <NavLink className='mainheader_item' to='/tasks'>Общее планирование</NavLink>\r\n                <NavLink className='mainheader_item' to='/today'>Планирование дня</NavLink>\r\n                <NavLink className='mainheader_item' to='/do'>Выполнение</NavLink>\r\n                {\r\n                    daytext ? null : <span onClick={openDayModal}>Вступительное слово</span>\r\n                }\r\n                <span></span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { SortableElement, sortableHandle } from 'react-sortable-hoc';\r\nimport moment from 'moment';\r\n\r\nimport { selectTasks, setModal } from '../../app/taskReducer';\r\nimport { getProjectThunk, upTaskThunk } from '../../app/thunks';\r\nimport { Do } from '../Do/Do';\r\n// import { TasksContext } from '../../hooks/useTasks';\r\n// import './index.css'\r\nimport { Action } from '../Action/Action';\r\nimport { TASK_TYPES } from '../../config/domain';\r\nimport { useCurrentTask } from '../../hooks/useCurrentTask';\r\n\r\n\r\nexport const Project = ({ value, type, childname, childdate }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const today = new Date()\r\n\r\n    const { filtertype } = useSelector(selectTasks)\r\n\r\n    const openProject = async () => {\r\n        const task = await dispatch(getProjectThunk(value.id))        \r\n    }\r\n\r\n\r\n    let classes = ['task_name']\r\n    if (value.goal) {\r\n        classes.push('goal')\r\n    }\r\n\r\n    // if (value.plan === 'today' && moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     classes.push('goal')\r\n    // }\r\n\r\n\r\n\r\n    // if (value.type === 'проект') {\r\n    //     classes.push('project')\r\n    // }\r\n\r\n    // let dateClasses = ['task_tag']\r\n    // if (moment(today).isSame(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('day_today')\r\n    // }\r\n    // if (moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('importantTag')\r\n    // }\r\n\r\n    // let periodClasses = ['task_tag']\r\n    // if (value.period === 5) {\r\n    //     periodClasses.push('importantTag')\r\n    // }\r\n\r\n\r\n\r\n    return (\r\n        <div\r\n            className='task'\r\n            // onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: value }))}\r\n            onClick={openProject}\r\n        >\r\n            <div className='task_left'>\r\n                <div className='task_tools'>\r\n                    <Action type={value.action} />\r\n                </div>\r\n                <div\r\n                    className='task_name'\r\n                // onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: value }))}\r\n                >\r\n                    <span\r\n                        className={classes.join(' ')}\r\n                    >\r\n                        {value.name}\r\n                    </span>\r\n                </div>\r\n                {\r\n                    childname ? <span className='task_children'>{` > ${childname}`}</span> : null\r\n                }\r\n\r\n            </div>\r\n\r\n\r\n            <div className='task_right'>\r\n                <div>\r\n                    <span className='task_tag'>{childdate}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// export default SortableElement(Task)","import React, { useEffect } from 'react';\r\n\r\n// import './Tasks.css'\r\n\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectTasks } from '../app/taskReducer';\r\nimport { getProjectsThunk } from '../app/thunks';\r\nimport { BALANCE } from '../config/domain';\r\nimport { Project } from '../components/Project/Project';\r\n\r\n\r\n\r\n\r\nexport const Projects = () => {\r\n\r\n    const { projects } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const getTasks = async () => {\r\n            await dispatch(getProjectsThunk())\r\n        }\r\n        getTasks()\r\n    }, [])\r\n\r\n    if (projects.length === 0) return null\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                BALANCE.map(item => {\r\n                    const tasks = projects.filter(task => task.balance === item)\r\n                    return (\r\n                        <div className='plantask_div'>\r\n                            <div className='plantask_date'>{item}</div>\r\n                            {\r\n                                tasks.map((task, index) => (\r\n                                    <Project\r\n                                        key={task.id}\r\n                                        index={index}\r\n                                        value={task}\r\n                                        childname={task.childname}\r\n                                        childdate={task.childdate}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport 'moment/locale/ru';\r\n// import './Tasks.css'\r\n\r\n\r\nimport { Task } from '../components/Task/Task';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectTasks } from '../app/taskReducer';\r\nimport { getPlanTasksThunk, getTasksThunk, getTodayTasksThunk } from '../app/thunks';\r\nimport { filterTodayTasks } from '../config/helpers';\r\nimport { TASK_TYPES } from '../config/domain';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const Today = () => {\r\n\r\n    const { tasks, doneTasks } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()    \r\n\r\n    useEffect(() => {\r\n        const getTasks = async () => {\r\n            // await dispatch(getTasksThunk())\r\n            await dispatch(getTodayTasksThunk())\r\n\r\n        }\r\n        getTasks()\r\n    }, [])\r\n\r\n    const todaytasks = filterTodayTasks(tasks)\r\n\r\n\r\n    return (\r\n        <div>           \r\n            <div className='plantask_div'>\r\n                <div className='plantask_date'>СЕГОДНЯ</div>\r\n                {\r\n                    todaytasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>       \r\n            <div className='plantask_div'>\r\n                <div className='plantask_date'>ВЫПОЛНЕНО</div>\r\n                {\r\n                    doneTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                            type={TASK_TYPES.done}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>       \r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nimport { openNewTask, selectTasks, setModal } from './app/taskReducer'\r\nimport { Plan } from './pages/Tasks';\r\nimport { Focus } from './pages/Focus';\r\nimport { ModalForm } from './components/ModalForm/ModalForm';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './App.css'\r\nimport { HotKeys, GlobalHotKeys } from 'react-hotkeys';\r\nimport { CURRENT_TASK } from './config/domain';\r\n\r\nimport { MainHeader } from './components/MainHeader/MainHeader';\r\n\r\n// import { PlanTasks } from './components/Tasks/PlanTasks';\r\n// import { DoTasks } from './components/Tasks/DoTasks';\r\nimport { Tasks } from './pages/Tasks';\r\nimport { Projects } from './pages/Projects';\r\nimport { Today } from './pages/Today';\r\nimport { getDayThunk } from './app/thunks';\r\n\r\nfunction App() {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const keyMap = {\r\n    MOVE_UP: \"ctrl+enter\"\r\n  };\r\n\r\n  const handlers = {\r\n    MOVE_UP: event => dispatch(openNewTask())\r\n      // setModal({ typeOfModal: 'new', currentTask: CURRENT_TASK }))\r\n    // MOVE_UP: event => dispatch(setModal({ typeOfModal: 'new', currentTask: CURRENT_TASK }))\r\n  };\r\n\r\n  const getData = async () => {\r\n    await dispatch(getDayThunk())\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData()\r\n  })\r\n\r\n  return (\r\n    <GlobalHotKeys keyMap={keyMap} handlers={handlers}>\r\n      <div className='App'>\r\n        <div className='wrapper'>\r\n          <MainHeader />\r\n          <Switch>\r\n            <Route exact path='/' component={Tasks} />\r\n            {/* <Route exact path='/plan' component={PlanTasks} /> */}\r\n            <Route exact path='/tasks' component={Tasks} />\r\n            <Route exact path='/today' component={Today} />\r\n            {/* <Route exact path='/do' component={DoTasks} /> */}\r\n            <Route exact path='/projects' component={Projects} />\r\n            <Route path='/focus' component={Focus} />\r\n          </Switch>\r\n          <ModalForm />\r\n        </div>\r\n      </div>\r\n\r\n    </GlobalHotKeys>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nexport default configureStore({\r\n  // reducer: {\r\n  //   state: taskReducer\r\n  // },\r\n  reducer: taskReducer  ,\r\n  middleware: getDefaultMiddleware(),\r\n  devTools: process.env.NODE_ENV !== 'production', // по необходимости\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}