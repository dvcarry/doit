{"version":3,"sources":["config/domain.js","redux/taskReducer.js","config/helpers.js","config/axios.js","redux/tasksThunks.js","components/Subtask/Subtask.js","components/Subtask/SubtaskEdit.js","components/Do/Do.js","redux/projectsThunks.js","components/ParentTask/ParentTask.js","components/InputName/InputName.js","redux/daysThunks.js","components/ModalForm/ModalForm.js","components/ModalForm/ProjectForm.js","components/ModalForm/TaskForm.js","components/ModalForm/ModalNew.js","components/ModalForm/DayNew.js","components/ModalForm/FailureForm.js","components/MainHeader/MainHeader.js","components/Action/Action.js","components/Task/Task.js","components/Breaks/Breaks.js","components/Alerts/Alerts.js","pages/Tasks.js","components/Project/Project.js","pages/Projects.js","pages/Today.js","components/Goal/Goal.js","pages/Goals.js","App.js","redux/goalsThunks.js","redux/store.js","index.js"],"names":["CURRENT_TASK","id","name","type","period","balance","parent","goal","today","repeat","plan","date","done","donedate","action","repeatday","BALANCE","TASK_TYPES","DATE_CONSTANTS","eng","ru","days","MODAL_TYPES","tasksSlice","createSlice","initialState","goals","tasks","projects","currentTask","isFetching","modalIsOpen","typeOfModal","todaytasks","doneTasks","daytext","error","breaks","focus","failures","reducers","toggleFetching","state","setTasks","payload","setDoneTasks","setDay","saveTask","newTasks","map","task","addTask","deleteTask","filter","deleteProject","newProjects","project","setProjects","setPlan","filtertype","setWeek","week","doTask","find","hasParent","setCurrentTask","setModal","openNewTask","setProject","changeToProject","setTask","changeTask","newDoneTasks","closeModal","changeCurrentTask","addSubtask","subtasks","setCurrentDay","setCurrentPlan","isplan","setSearch","search","setGoals","setError","resetBreaks","setFocus","setFailures","doFailures","newFailures","failure","console","log","length","actions","setPlanTasks","setTodayTasks","selectTasks","filterTodayTasks","Date","moment","sort","wait","important","instance","axios","create","baseURL","defaults","headers","common","localStorage","getItem","saveTaskThunk","dispatch","a","put","response","statusText","addTaskThunk","newTask","post","data","doTaskThunk","changeToProjectThunk","task_id","changeCurrentTaskThunk","changedData","addFailuresThunk","description","Subtask","change","useState","useDispatch","dateFormat","dateFormatArray","split","className","onClick","get","SubtaskEdit","close","input","setInput","value","onChange","e","target","onKeyPress","event","charCode","autoFocus","Do","current","useSelector","doneHandler","getProjectsThunk","getProjectThunk","project_id","Option","Select","ParentTask","isParent","setIsParent","startChooseParent","showSearch","style","width","values","addToProjectThunk","children","filterOption","option","toLowerCase","indexOf","InputName","isChangedName","setIsChangedName","onBlur","addDayTextThunk","text","customStyles","content","top","left","right","bottom","marginRight","transform","modals","isSubtask","setIsSubtask","handleChangeType","child","key","preventDefault","size","defaultChecked","subtask","index","loading","delete","handleChangeData","setDateFromConstants","dateConstant","date_constant","item","result","add","format","getDateFromConstant","ImportantBlock","ActionBlock","DateBlock","dateString","placeholder","BalanceBlock","PlannedTask","NotPlannedTask","parentname","parentid","new","setName","day","setText","ctrlKey","ModalForm","ModalComponent","isOpen","onRequestClose","ariaHideApp","MainHeader","to","Action","classes","push","join","Task","taskClasses","daysBetweenFromToday","diff","isparent","newDate","subtract","dateWithId","Breaks","message","showIcon","Alerts","Tasks","dates","i","dateObject","raw","show","getDatesForPeriod","todayTasks","inboxTasks","otherTasks","tasksForDate","Project","childname","childdate","openProject","Projects","setFilter","navClickHandler","textContent","filteredProjects","toUpperCase","ALL","Today","focusTask","filteredBalance","Set","filteredTasks","filteredDoneTasks","Goal","Goals","App","handlers","MOVE_UP","getData","useEffect","keyMap","exact","path","component","configureStore","reducer","taskReducer","middleware","getDefaultMiddleware","devTools","process","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.a092d5a6.chunk.js","sourcesContent":["export const taskFilter = ['все', \"задача\", \"проект\", \"привычка\", \"другое\"]\r\n\r\n\r\nexport const OPTIONS = {\r\n    type: [\r\n        { value: 'задача', label: 'Задача' },\r\n        { value: 'привычка', label: 'Привычка' }\r\n    ],\r\n    balance: [\r\n        { value: 'работа', label: 'Работа' },\r\n        { value: 'проект', label: 'Проект' },\r\n        { value: 'развитие', label: 'Развитие' },\r\n        { value: 'семья', label: 'Семья' },\r\n        { value: 'здоровье', label: 'Здоровье' },\r\n    ],\r\n    period: [\r\n        { value: 15, label: 15 },\r\n        { value: 30, label: 30 },\r\n        { value: 45, label: 45 },\r\n        { value: 60, label: 60 },\r\n        { value: 90, label: 90 },\r\n    ],\r\n    plan: [\r\n        { value: 'today', label: 'today' },\r\n        { value: 'inbox', label: 'inbox' },\r\n        { value: 'upcoming', label: 'upcoming' },\r\n        { value: 'later', label: 'later' },\r\n    ]\r\n}\r\n\r\nexport const CURRENT_TASK = {\r\n    id: 0,\r\n    name: '',\r\n    type: 'задача',\r\n    period: 0,\r\n    balance: '',\r\n    parent: 0,\r\n    goal: false,\r\n    today: false,\r\n    repeat: false,\r\n    plan: 'inbox',\r\n    date: null,\r\n    done: false,\r\n    donedate: null,\r\n    action: null,\r\n    repeatday: 0\r\n}\r\n\r\nexport const BALANCE = ['работа', 'проект', \"семья\", \"здоровье\", \"быт\", \"развитие\", \"отдых\"]\r\nexport const PLANS = ['today', 'week', 'upcoming', \"later\"]\r\n\r\nexport const TASK_TYPES = {\r\n    plan: 'plan',\r\n    done: 'done',\r\n    today: 'today'\r\n}\r\n\r\nexport const DATE_CONSTANTS = [\r\n    { eng: 'today', ru: 'сегодня', days: 0 }, { eng: 'tomorrow', ru: 'завтра', days: 1 }, { eng: 'aftertomorrow', ru: 'послезавтра', days: 2 }\r\n]\r\n\r\nexport const MODAL_TYPES = {\r\n    new: 'new',\r\n    project: 'project',\r\n    task: 'task',\r\n    day: 'day',\r\n    failures: 'failures'\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\"\r\nimport { CURRENT_TASK, MODAL_TYPES } from \"../config/domain\";\r\n\r\n\r\n\r\n\r\nexport const tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        goals: [],\r\n        tasks: [],\r\n        projects: [],\r\n        currentTask: null,\r\n        isFetching: false,\r\n        modalIsOpen: false,\r\n        typeOfModal: 'new',\r\n        todaytasks: [],\r\n        doneTasks: [],\r\n        daytext: false,\r\n        error: '',\r\n        breaks: 0,\r\n        focus: null,\r\n        failures: []\r\n    },\r\n    reducers: {\r\n        toggleFetching: state => {\r\n            state.isFetching = !state.isFetching\r\n        },\r\n        setTasks: (state, action) => {\r\n            state.tasks = action.payload\r\n            state.isFetching = false\r\n        },\r\n        // setTodayTasks: (state, action) => {\r\n        //     state.todaytasks = action.payload\r\n        //     // state.doneTasks = action.payload.doneTasks\r\n        // },\r\n        setDoneTasks: (state, action) => {\r\n            state.doneTasks = action.payload\r\n        },\r\n        setDay: (state, action) => {\r\n            if (action.payload) {\r\n                state.daytext = true\r\n                state.isFetching = false\r\n                state.modalIsOpen = false\r\n            }\r\n        },\r\n        saveTask: (state) => {\r\n            const newTasks = state.tasks.map(task => task.id === state.currentTask.id ? ({ ...state.currentTask }) : task)\r\n            state.tasks = newTasks\r\n            state.isFetching = false\r\n            state.modalIsOpen = false\r\n        },\r\n        addTask: (state, action) => {\r\n            state.tasks = [...state.tasks, action.payload]\r\n            state.isFetching = false\r\n            state.modalIsOpen = false\r\n        },\r\n        deleteTask: (state, action) => {\r\n            const newTasks = state.tasks.filter(task => task.id !== state.currentTask.id)\r\n            state.tasks = newTasks\r\n        },\r\n        deleteProject: (state, action) => {\r\n            const newProjects = state.projects.filter(project => project.id !== action.payload)\r\n            state.projects = newProjects\r\n        },\r\n        setProjects: (state, action) => {\r\n            state.projects = action.payload\r\n        },\r\n        setPlan: (state, action) => {\r\n            state.plan = action.payload.plan\r\n            state.filtertype = action.payload.filtertype\r\n        },\r\n        setWeek: (state, action) => {\r\n            state.week = action.payload\r\n        },\r\n        doTask: (state, action) => {\r\n            const { id, parent, type } = action.payload\r\n            if (type === 'задача') {\r\n                const task = state.tasks.find(task => task.id === id)\r\n                const newTasks = state.tasks.filter(task => task.id !== id)\r\n                state.tasks = newTasks\r\n                state.doneTasks = [...state.doneTasks, task]\r\n            } else if (type === 'проект') {\r\n                const newProjects = state.projects.filter(project => project.id !== id)\r\n                state.projects = newProjects\r\n            }\r\n\r\n            // открыть родителя если это была подзадача\r\n            // const parentTask = state.tasks.find(task => task.id === parent)\r\n\r\n            if (action.payload.parent.hasParent) {\r\n                state.modalIsOpen = true\r\n                state.typeOfModal = MODAL_TYPES.project\r\n                state.currentTask = action.payload.parent.project\r\n            } else {\r\n                state.modalIsOpen = false\r\n            }\r\n            state.breaks = state.breaks + 1\r\n            state.isFetching = false\r\n        },\r\n        setCurrentTask: (state, action) => {\r\n            state.currentTask = action.payload\r\n        },\r\n        setModal: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = action.payload.typeOfModal\r\n            // const subtasks = state.tasks.filter(task => task.child === action.payload.currentTask.id && !task.done)\r\n            // state.currentTask = { ...action.payload.currentTask, subtasks: subtasks }\r\n        },\r\n        openNewTask: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = MODAL_TYPES.new\r\n            state.currentTask = CURRENT_TASK\r\n        },\r\n        setProject: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = MODAL_TYPES.project\r\n            state.currentTask = action.payload\r\n            state.isFetching = false\r\n        },\r\n        changeToProject: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = MODAL_TYPES.project\r\n            state.currentTask = action.payload\r\n            const newTasks = state.tasks.filter(task => task.id !== action.payload.id)\r\n            state.tasks = newTasks\r\n            const newProjects = [...state.projects, action.payload]\r\n            state.projects = newProjects\r\n            state.isFetching = false\r\n        },\r\n        setTask: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = MODAL_TYPES.task\r\n            state.currentTask = action.payload\r\n            state.isFetching = false\r\n        },\r\n        changeTask: (state, action) => {\r\n            const newTasks = state.tasks.map(task => task.id === action.payload.id ? {...task, ...action.payload} : task)\r\n            state.tasks = newTasks\r\n            if (action.payload.donedate) {\r\n                const newDoneTasks = state.doneTasks.filter(task => task.id !== action.payload.id)\r\n                state.doneTasks = newDoneTasks\r\n            }\r\n            state.isFetching = false\r\n        },\r\n        closeModal: state => {\r\n            state.modalIsOpen = false\r\n        },\r\n        changeCurrentTask: (state, action) => {\r\n            state.currentTask = { ...state.currentTask, ...action.payload }\r\n            // state.currentTask = { ...state.currentTask, [action.payload.type]: action.payload.value }\r\n            const newTasks = state.tasks.map(task => task.id === state.currentTask.id ? { ...task, ...action.payload } : task)\r\n            // const newTasks = state.tasks.map(task => task.id === state.currentTask.id ? { ...task, [action.payload.type]: action.payload.value } : task)\r\n            state.tasks = newTasks\r\n            state.isFetching = false\r\n        },\r\n        addSubtask: (state, action) => {\r\n            state.tasks = [...state.tasks, action.payload]\r\n            // state.tasks[action.payload.plan] = [...state.tasks[action.payload.plan], action.payload]\r\n            state.currentTask.subtasks = [...state.currentTask.subtasks, action.payload]\r\n            state.isFetching = false\r\n        },\r\n        setCurrentDay: (state, action) => {\r\n            state.date = action.payload\r\n        },\r\n        setCurrentPlan: (state, action) => {\r\n            state.isplan = action.payload\r\n        },\r\n        setSearch: (state, action) => {\r\n            state.search = action.payload\r\n        },\r\n        setGoals: (state, action) => {\r\n            state.goals = action.payload\r\n            state.isFetching = false\r\n        },\r\n        setError: (state, action) => {\r\n            state.error = action.payload\r\n            state.isFetching = false\r\n        },\r\n        resetBreaks: (state, action) => {\r\n            state.breaks = 0\r\n        },\r\n        setFocus: (state, action) => {\r\n            state.focus = action.payload\r\n        },\r\n        setFailures: (state, action) => {\r\n            state.failures = action.payload\r\n            state.isFetching = false\r\n        },\r\n        doFailures: (state, action) => {\r\n            const newFailures = state.failures.filter(failure => failure.id !== action.payload)\r\n            console.log(\"🚀 ~ file: taskReducer.js ~ line 188 ~ newFaiilures\", newFailures)\r\n            state.failures = newFailures\r\n            if (newFailures.length === 0) {\r\n                state.modalIsOpen = false\r\n            }\r\n            state.isFetching = false\r\n        },\r\n    },\r\n});\r\n\r\n\r\n// actions\r\n\r\nexport const { toggleFetching,\r\n    setTasks, addTask, deleteTask, saveTask, doTask, changeToProject,\r\n    setPlanTasks, setTodayTasks, setDoneTasks,\r\n    setProjects, deleteProject, setProject,\r\n    setCurrentTask, changeCurrentTask,\r\n    addSubtask,\r\n    openNewTask,\r\n    setModal, closeModal,\r\n    setDay,\r\n    setTask, changeTask,\r\n    setGoals,\r\n    setError,\r\n    resetBreaks,\r\n    setFailures, doFailures,\r\n    setFocus,\r\n} = tasksSlice.actions;\r\n\r\n\r\nexport const selectTasks = state => state\r\n\r\n\r\nexport default tasksSlice.reducer;","import moment from 'moment';\r\nimport { DATE_CONSTANTS } from './domain';\r\n\r\nexport const getTimeFromMins = mins => {\r\n    let hours = Math.trunc(mins / 60);\r\n    let minutes = mins % 60;\r\n    return hours + '-' + minutes.toString().padStart(2, 0);\r\n};\r\n\r\nexport const getDatesForPeriod = period => {\r\n    const dates = []\r\n    for (let i = 1; i < period; i++) {\r\n        const date = moment().add(i, 'days')\r\n        const dateObject = { raw: date.format('YYYY-MM-DD'), show: date.format('DD.MM dddd') }\r\n        dates.push(dateObject)\r\n        // onlyDates.push(date.format('YYYY-MM-DD'))\r\n    }\r\n    return dates\r\n};\r\n\r\n\r\nexport const getDateFromConstant = date_constant => {\r\n    const objectFromDateConstant = DATE_CONSTANTS.find(item => item.eng === date_constant)\r\n    const days = objectFromDateConstant.days\r\n    const today = moment()\r\n    const result = today.add(days, 'days')\r\n    const formatResult = moment(result).format('YYYY-MM-DD')\r\n    return formatResult\r\n};\r\n\r\n\r\nexport const filterTodayTasks = tasks => {\r\n    const today = new Date()\r\n    return tasks\r\n        .filter(task => moment(task.date) <= today)\r\n        .sort(task => task.wait ? 1 : -1)\r\n        .sort(task => task.important ? -1 : 1)\r\n        .sort(task => task.goal ? -1 : 1)\r\n}\r\n\r\nexport const getAuthToken = () => {\r\n    const token = localStorage.getItem('do')\r\n    return token\r\n}","import axios from 'axios';\r\nimport { getAuthToken } from './helpers'\r\n\r\n\r\nconst instance = axios.create({\r\n    // baseURL: 'http://localhost:5002/api/'\r\n    baseURL: 'http://82.146.40.11:5002/api/'\r\n});\r\n\r\ninstance.defaults.headers.common = { 'Authorization': `Bearer ${getAuthToken()}` }\r\nexport default instance;","import { saveTask, toggleFetching, deleteTask, setFailures, doFailures, changeCurrentTask, changeToProject, setProject, closeModal, setError, setTasks, setTask, setDoneTasks, addTask, addSubtask, doTask, changeTask } from \"./taskReducer\"\r\nimport axios from '../config/axios'\r\n\r\nexport const getTasksThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('tasks')\r\n        dispatch(setTasks(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const getTaskThunk = (id) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('tasks/' + id)\r\n        dispatch(setTask(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const getDoneTasksThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('tasks/done')\r\n        dispatch(setDoneTasks(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\n\r\nexport const saveTaskThunk = (task) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        await axios.put('tasks', task)\r\n        dispatch(saveTask())\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\n\r\nexport const addTaskThunk = (newTask) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.post('tasks', newTask)\r\n        dispatch(addTask(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const doTaskThunk = (id, type) => async dispatch => {\r\n    console.log('typeees', type)\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.post('tasks/do', { id, type })\r\n        dispatch(doTask({ id, parent: data, type }))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\n\r\nexport const deleteTaskThunk = (task_id, parent) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        await axios.delete('tasks/' + task_id)\r\n        dispatch(deleteTask(task_id))\r\n        if (parent) {\r\n            // const project = await API.project.getProject(parent)\r\n            const { data } = await axios.get('projects/' + parent)\r\n            dispatch(setProject(data))\r\n        } else {\r\n            dispatch(closeModal())\r\n            dispatch(toggleFetching())\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const changeToProjectThunk = (task_id) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.put('tasks/toproject', { id: task_id })\r\n        dispatch(changeToProject(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const addToProjectThunk = (id, parent) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.put('tasks/addtoproject', { id, parent })\r\n        // dispatch(changeToProject(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const changeSomeTaskThunk = (task_id, data) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const dateWithId = { id: task_id, ...data }\r\n        await axios.put('tasks/one', dateWithId)\r\n        dispatch(changeTask(dateWithId))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const changeCurrentTaskThunk = (task_id, data) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const changedData = { id: task_id, ...data }\r\n        await axios.put('tasks/one', changedData)\r\n        dispatch(changeCurrentTask(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const addSubtaskThunk = (newTask) => async dispatch => {\r\n\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.post('tasks', newTask)\r\n        dispatch(addSubtask(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\n\r\nexport const getFailuresThunk = () => async dispatch => {\r\n\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('failures')\r\n        dispatch(setFailures(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};\r\n\r\nexport const addFailuresThunk = (task_id, description) => async dispatch => {\r\n\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.post('failures', { task_id, description })\r\n        dispatch(doFailures(task_id))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n};","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { getTaskThunk } from '../../redux/tasksThunks';\r\nimport { MODAL_TYPES } from '../../config/domain';\r\nimport './Subtask.css'\r\n\r\n// const DragHandle = sortableHandle(() => <span className='draghandler'>:::</span>);\r\n\r\n\r\nexport const Subtask = ({ task, change }) => {\r\n\r\n    const [input, setInput] = useState(task.name)\r\n    const dispatch = useDispatch()\r\n\r\n    const clickHandler = () => {\r\n        dispatch(getTaskThunk(task.id))\r\n    }\r\n\r\n\r\n    const handleBlur = () => {\r\n        if (input !== '') {\r\n            change(task.id, input)\r\n        }\r\n    }\r\n\r\n    let dateFormat = ''\r\n    if (task.date) {\r\n        const dateFormatArray = task.date.split('-')\r\n        dateFormat = dateFormatArray[2] + '.' + dateFormatArray[1]\r\n    }\r\n\r\n\r\n    return (\r\n        <div\r\n            className='subtask'\r\n            onClick={clickHandler}\r\n        >\r\n            {/* <DragHandle /> */}\r\n            <span>\r\n                {task.name}\r\n            </span>\r\n            {/* <input\r\n                className='subtask_input'\r\n                value={input}\r\n                onChange={e => setInput(e.target.value)}\r\n                onBlur={handleBlur}\r\n                autoFocus={task.name === ''}\r\n            /> */}\r\n            <div className='subtask_info'>\r\n                <span className='subtask_plan'>{dateFormat}</span>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n// export default SortableElement(Subtask)","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { addSubtaskThunk } from '../../redux/tasksThunks';\r\nimport { CURRENT_TASK } from '../../config/domain';\r\n\r\nimport './Subtask.css'\r\n\r\n\r\nexport const SubtaskEdit = ({ name = '', close, goal, balance, parent }) => {\r\n\r\n    const [input, setInput] = useState(name)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13) {\r\n            dispatch(addSubtaskThunk({...CURRENT_TASK, goal, balance, parent, name: input}))\r\n            close()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='subtask'>\r\n            <input\r\n                className='subtask_input'\r\n                value={input}\r\n                onChange={e => setInput(e.target.value)}\r\n                onKeyPress={saveKeyHandler}\r\n                autoFocus={name === ''}\r\n            />\r\n        </div>\r\n    );\r\n};","import { Spin } from 'antd';\r\nimport React, { useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectTasks } from '../../redux/taskReducer';\r\nimport { doTaskThunk } from '../../redux/tasksThunks';\r\n\r\nimport './Do.css'\r\n\r\n\r\nexport const Do = ({ task }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [current, setCurrent] = useState(false)\r\n\r\n    const { isFetching } = useSelector(selectTasks)\r\n\r\n    console.log('form', task)\r\n\r\n    const doneHandler = async () => {\r\n        await dispatch(doTaskThunk(task.id, task.type))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                (isFetching && current)\r\n                    ? <Spin />\r\n                    : <div\r\n                        className='docheck'\r\n                        onClick={doneHandler}\r\n                    />\r\n            }\r\n        </>\r\n\r\n        // <div\r\n        //     className='docheck'\r\n        //     onClick={doneHandler}\r\n        // />\r\n    )\r\n}","import { setError, setProjects, toggleFetching, setProject, closeModal, deleteProject } from \"./taskReducer\"\r\nimport axios from '../config/axios'\r\n\r\nexport const getProjectsThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('projects')\r\n        dispatch(setProjects(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}\r\n\r\nexport const getProjectThunk = (project_id) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('projects/' + project_id)\r\n        dispatch(setProject(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}\r\n\r\nexport const deleteProjectThunk = (project_id) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.delete('tasks/' + project_id)\r\n        dispatch(deleteProject(project_id))\r\n        dispatch(closeModal())\r\n        dispatch(toggleFetching())\r\n        // dispatch(setProject(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Select } from 'antd';\r\n\r\nimport { selectTasks, changeCurrentTask } from '../../redux/taskReducer';\r\nimport { getProjectsThunk, getProjectThunk } from '../../redux/projectsThunks';\r\nimport { addToProjectThunk, changeToProjectThunk } from '../../redux/tasksThunks';\r\n\r\nimport './ParentTask.css'\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nexport const ParentTask = ({ parent, name, id, balance }) => {\r\n\r\n    const [isParent, setIsParent] = useState(false)\r\n    const { projects, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const startChooseParent = async () => {\r\n        if (projects.length === 0) {\r\n            dispatch(getProjectsThunk())\r\n        }\r\n        setIsParent(true)\r\n    }\r\n\r\n    const handleChangeType = (value, values) => {\r\n        dispatch(addToProjectThunk(id, value))\r\n        // dispatch(changeCurrentTask({ type: 'parentid', value: values.value }))\r\n        dispatch(changeCurrentTask({ type: 'parent', value: values.value }))\r\n        dispatch(changeCurrentTask({ type: 'parentname', value: values.children }))\r\n        const project = projects.find(project => project.id === value)\r\n        dispatch(changeCurrentTask({ type: 'balance', value: project.balance }))\r\n        dispatch(changeCurrentTask({ type: 'goal', value: project.goal }))\r\n    }\r\n\r\n    const clickHandler = () => {\r\n        dispatch(getProjectThunk(parent))\r\n    }\r\n    \r\n    const changeToProject = () => {\r\n        console.log('balance', balance)\r\n        if (balance) {\r\n            dispatch(changeToProjectThunk(id))\r\n        }\r\n    }\r\n\r\n    if (isParent) {\r\n        return (\r\n            <Select\r\n                showSearch\r\n                style={{ width: '100%' }}\r\n                // onChange={value => handleChangeType(value, 'child')} value={currentTask.child}\r\n                onChange={handleChangeType}\r\n                // value={currentTask.child}\r\n                filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                }\r\n            >\r\n                {\r\n                    projects.map(task => <Option value={task.id}>{task.name}</Option>)\r\n                }\r\n            </Select>\r\n        )\r\n    }\r\n\r\n    if (!name) {\r\n        return (\r\n            <div\r\n            className='parenttask'>\r\n                <a onClick={startChooseParent}>Добавить родителя</a>\r\n                <a onClick={changeToProject}>Сделать проектом</a>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='parenttask'\r\n                onClick={clickHandler}\r\n            >\r\n                {name}\r\n            </div>\r\n        </>\r\n    )\r\n};","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { selectTasks, changeCurrentTask } from '../../redux/taskReducer';\r\nimport { changeCurrentTaskThunk } from '../../redux/tasksThunks';\r\n\r\n\r\n\r\nexport const InputName = () => {\r\n\r\n    const [isChangedName, setIsChangedName] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { currentTask } = useSelector(selectTasks)\r\n\r\n    const handleSaveName = () => {\r\n        if (isChangedName) {\r\n            dispatch(changeCurrentTaskThunk(currentTask.id, { name: currentTask.name }))\r\n        }\r\n    }\r\n\r\n    const handleChangeName = (e) => {\r\n        setIsChangedName(true)\r\n        dispatch(changeCurrentTask({ name: e.target.value }))\r\n    }\r\n\r\n    return (\r\n        <input \r\n        className='inputtext inputtext-name' \r\n        onChange={handleChangeName} \r\n        onBlur={handleSaveName}\r\n        value={currentTask.name} \r\n        />\r\n    )\r\n};","import { setError, setDay, toggleFetching } from \"./taskReducer\"\r\nimport axios from '../config/axios'\r\n\r\n\r\nexport const getDayThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('days')\r\n        dispatch(setDay(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}\r\n\r\nexport const addDayTextThunk = (text) => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.post('days', { text })\r\n        dispatch(setDay(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\nimport { ModalNew } from './ModalNew';\r\n\r\nimport './ModalForm.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectTasks, closeModal } from '../../redux/taskReducer';\r\nimport { ProjectForm } from './ProjectForm';\r\nimport { TaskForm } from './TaskForm';\r\nimport { DayNew } from './DayNew';\r\nimport { FailureForm } from './FailureForm';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        width: '500px',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n};\r\n\r\n\r\nconst modals = {\r\n    project: ProjectForm,\r\n    task: TaskForm,\r\n    new: ModalNew,\r\n    day: DayNew,\r\n    failures: FailureForm\r\n};\r\n\r\n\r\nexport const ModalForm = () => {\r\n\r\n    const { modalIsOpen, typeOfModal } = useSelector(selectTasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const ModalComponent = modals[typeOfModal];\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalIsOpen}\r\n            onRequestClose={() => dispatch(closeModal())}\r\n            ariaHideApp={false}\r\n            style={customStyles}\r\n        >\r\n            <ModalComponent />\r\n        </Modal>\r\n    )\r\n}","import { useState } from 'react';\r\nimport { Select, Button, Switch } from 'antd';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { Subtask } from '../Subtask/Subtask';\r\nimport { SubtaskEdit } from '../Subtask/SubtaskEdit';\r\nimport { Do } from '../Do/Do';\r\n\r\nimport { changeCurrentTask, selectTasks } from '../../redux/taskReducer';\r\nimport { saveTaskThunk } from '../../redux/tasksThunks';\r\nimport { deleteProjectThunk } from '../../redux/projectsThunks';\r\n\r\nimport './ModalForm.css'\r\n\r\n\r\n\r\n\r\nexport const ProjectForm = () => {\r\n\r\n    const { Option } = Select;\r\n    const { currentTask, tasks, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [isSubtask, setIsSubtask] = useState(false)\r\n\r\n    const handleChangeName = e => {\r\n        // changeCurrentTask('name', e.target.value)\r\n        dispatch(changeCurrentTask({ type: 'name', value: e.target.value }))\r\n    }\r\n\r\n    const handleChangeType = (value, option) => {\r\n        dispatch(changeCurrentTask({ type: option, value }))\r\n    }\r\n\r\n\r\n    // const keyPressHandler = e => {\r\n    //     if (e.keyCode === 13 && e.ctrlKey) {\r\n    //         setIsSubtask(true)\r\n    //     }\r\n    // }\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deleteProjectThunk(currentTask.id))\r\n    }\r\n\r\n    const saveCurrentTask = () => {\r\n        if (currentTask.balance) {\r\n            dispatch(saveTaskThunk(currentTask))\r\n        }\r\n    }\r\n\r\n    // const sortHandler = async ({ oldIndex, newIndex }) => {\r\n    //     // setTasks(tasks => arrayMove(tasks, oldIndex, newIndex))\r\n    //     // await API.reindex(plan, oldIndex, newIndex)\r\n    // }\r\n\r\n    const parentTasks = tasks.find(task => task.id === currentTask.child)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className='flex'>\r\n                    <Do task={currentTask} />\r\n                    <TextareaAutosize\r\n                        className='inputtext inputtext-name'\r\n                        value={currentTask.name}\r\n                        onChange={handleChangeName}\r\n                        onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault()}}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className='input_block'>\r\n                <div className='input_div'>\r\n                    <div>Сфера жизни</div>\r\n                    <Select\r\n                        onChange={value => handleChangeType(value, 'balance')}\r\n                        value={currentTask.balance}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value=\"работа\">работа</Option>\r\n                        <Option value=\"проект\">проект</Option>\r\n                        <Option value=\"развитие\">развитие</Option>\r\n                        <Option value=\"семья\">семья</Option>\r\n                        <Option value=\"здоровье\">здоровье</Option>\r\n                        <Option value=\"быт\">быт</Option>\r\n                        <Option value=\"отдых\">отдых</Option>\r\n                    </Select>\r\n                </div>\r\n                <div className='input_div'>\r\n                    <div>Цель</div>\r\n                    <Switch defaultChecked={currentTask.goal} onChange={value => handleChangeType(value, 'goal')} />\r\n                </div>\r\n            </div>\r\n            <div className='subtask_block'>\r\n                <div>Подзадачи</div>\r\n                <div\r\n                    onClick={() => setIsSubtask(true)}\r\n                    className='subtask_button'\r\n                >\r\n                    +\r\n                </div>\r\n            </div>\r\n            {\r\n                currentTask.subtasks.map((subtask, index) => (\r\n                    <Subtask\r\n                        task={subtask}\r\n                        key={subtask.id}\r\n                        index={index}\r\n                    />\r\n                ))\r\n            }\r\n            {\r\n                isSubtask\r\n                    ? <SubtaskEdit\r\n                        close={() => setIsSubtask(false)}\r\n                        goal={currentTask.goal}\r\n                        balance={currentTask.balance}\r\n                        parent={currentTask.id}\r\n                    />\r\n                    : null\r\n            }\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveCurrentTask}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n                <Button\r\n                    onClick={deleteHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Удалить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { DatePicker, Select, Button, Radio, Switch } from 'antd';\r\nimport moment from 'moment';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { ParentTask } from '../ParentTask/ParentTask';\r\nimport { Do } from '../Do/Do';\r\nimport { InputName } from '../../components/InputName/InputName';\r\nimport { changeCurrentTask, selectTasks, setProject } from '../../redux/taskReducer';\r\nimport { deleteTaskThunk, saveTaskThunk, changeToProjectThunk, changeCurrentTaskThunk } from '../../redux/tasksThunks';\r\nimport { getDateFromConstant } from '../../config/helpers';\r\nimport { DATE_CONSTANTS } from '../../config/domain';\r\n\r\nimport './ModalForm.css'\r\n\r\n\r\n\r\nexport const TaskForm = () => {\r\n\r\n    const { Option } = Select;\r\n    const { currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    // const handleChangeName = (e, type) => {\r\n    //     console.log(\"🚀 ~ file: TaskForm.js ~ line 29 ~ handleChangeName ~ e\", e, type)\r\n    //     dispatch(changeCurrentTaskThunk(currentTask.id, { name: e.target.value }))\r\n    //     // changeCurrentTask('name', e.target.value)\r\n    //     // dispatch(changeCurrentTask({ type: 'name', value: e.target.value }))\r\n    // }\r\n\r\n    const handleChangeData = (value, type) => {\r\n        console.log(\"🚀 ~ file: TaskForm.js ~ line 31 ~ handleChangeData ~ type\", value)\r\n        dispatch(changeCurrentTaskThunk(currentTask.id, { [type]: value }))\r\n        // if (value.target) {\r\n        //     dispatch(changeCurrentTask({ type, value: value.target.value }))\r\n        // } else {\r\n        //     dispatch(changeCurrentTask({ type, value }))\r\n        // }\r\n\r\n    }\r\n\r\n    const changeToProject = () => {\r\n        dispatch(changeToProjectThunk(currentTask.id))\r\n    }\r\n\r\n    const handleChangeDate = (date, dateString) => {\r\n        // dispatch(changeCurrentTask({ type: 'date', value: dateString }))\r\n        dispatch(changeCurrentTaskThunk(currentTask.id, { date: dateString }))\r\n    }\r\n\r\n    const setDateFromConstants = (dateConstant) => {\r\n        const date = getDateFromConstant(dateConstant)\r\n        dispatch(changeCurrentTaskThunk(currentTask.id, { date }))\r\n        // dispatch(changeCurrentTask({ type: 'date', value: date }))\r\n    }\r\n\r\n    // const keyPressHandler = e => {\r\n    //     if (e.keyCode === 13 && e.ctrlKey) {\r\n    //         setIsSubtask(true)\r\n    //     }\r\n    // }\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deleteTaskThunk(currentTask.id, currentTask.parent))\r\n    }\r\n\r\n    const saveCurrentTask = () => {\r\n        if (!currentTask.balance && currentTask.child === 0) {\r\n            return\r\n        }\r\n        dispatch(saveTaskThunk(currentTask))\r\n    }\r\n\r\n    const ImportantBlock = (\r\n        <div className='input_div'>\r\n            <div>Важно</div>\r\n            <Switch defaultChecked={currentTask.important} onChange={value => handleChangeData(value, 'important')} />\r\n        </div>\r\n    )\r\n\r\n    const ActionBlock = (\r\n        <div className='input_div'>\r\n            <div>Жду</div>\r\n            <Switch defaultChecked={currentTask.wait} onChange={value => handleChangeData(value, 'wait')} />\r\n        </div>\r\n    )\r\n\r\n    const DateBlock = (\r\n        <div className='input_div'>\r\n            <div>Дата</div>\r\n            <DatePicker\r\n                value={currentTask.date ? moment(currentTask.date) : null}\r\n                onChange={handleChangeDate}\r\n                style={{ width: 200 }}\r\n                size='large'\r\n                placeholder=''\r\n            />\r\n            <div>\r\n                {\r\n                    DATE_CONSTANTS.map(item => (\r\n                        <span\r\n                            key={item.eng}\r\n                            className='date_constant'\r\n                            onClick={() => setDateFromConstants(item.eng)}\r\n                        >\r\n                            {item.ru}\r\n                        </span>))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const BalanceBlock = (\r\n        <div className='input_div'>\r\n            <div>Сфера жизни</div>\r\n            <Select\r\n                onChange={value => handleChangeData(value, 'balance')}\r\n                value={currentTask.balance}\r\n                style={{ width: 200 }}\r\n                size='large'\r\n            >\r\n                <Option value=\"работа\">работа</Option>\r\n                <Option value=\"проект\">проект</Option>\r\n                <Option value=\"развитие\">развитие</Option>\r\n                <Option value=\"семья\">семья</Option>\r\n                <Option value=\"здоровье\">здоровье</Option>\r\n                <Option value=\"быт\">быт</Option>\r\n                <Option value=\"отдых\">отдых</Option>\r\n            </Select>\r\n        </div>\r\n    )\r\n\r\n    const PlannedTask = (\r\n        <div className='input_block'>\r\n            {DateBlock}\r\n            <div className='input_block'>\r\n                {ImportantBlock}\r\n                {ActionBlock}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n    const NotPlannedTask = (\r\n        <>\r\n            <div className='input_block'>\r\n                {BalanceBlock}\r\n                <div className='input_block'>\r\n                    {ImportantBlock}\r\n                    {ActionBlock}\r\n                </div>\r\n            </div>\r\n            {DateBlock}\r\n        </>\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ParentTask\r\n                name={currentTask.parentname}\r\n                parent={currentTask.parentid}\r\n                id={currentTask.id}\r\n                balance={currentTask.balance}\r\n            />\r\n            <div>\r\n                <div className='flex'>\r\n                    <Do task={currentTask} />\r\n                    {/* <TextareaAutosize\r\n                        className='inputtext inputtext-name'\r\n                        value={currentTask.name}\r\n                        onChange={handleChangeName}\r\n                    /> */}\r\n                    <InputName />\r\n                </div>\r\n            </div>\r\n            {currentTask.parentid ? PlannedTask : NotPlannedTask}\r\n\r\n\r\n\r\n            {/* {\r\n                currentTask.date\r\n                    ? <div className='input_block'>\r\n                        <div className='input_div'>\r\n                            <div>Дата</div>\r\n                            <DatePicker\r\n                                value={currentTask.date ? moment(currentTask.date) : null}\r\n                                onChange={handleChangeDate}\r\n                                style={{ width: 200 }}\r\n                                size='large'\r\n                            />\r\n                            <div>\r\n                                {\r\n                                    DATE_CONSTANTS.map(item => <span key={item.eng} className='date_constant' onClick={() => setDateFromConstants(item.eng)}>{item.ru}</span>)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className='input_div'>\r\n                            <div>Важно</div>\r\n                            <Switch defaultChecked={currentTask.important} onChange={value => handleChangeData(value, 'important')} />\r\n                        </div>\r\n                    </div>\r\n                    : <>\r\n                        <div className='input_block'>\r\n                            <div className='input_div'>\r\n                                <div>Тип задачи</div>\r\n                                <Radio.Group onChange={changeToProject} value={currentTask.type}>\r\n                                    <Radio value={\"задача\"}>задача</Radio>\r\n                                    <Radio value={\"проект\"}>проект</Radio>\r\n                                </Radio.Group>\r\n                            </div>\r\n\r\n                            <div className='input_div'>\r\n                                <div>Сфера жизни</div>\r\n                                <Select\r\n                                    onChange={value => handleChangeData(value, 'balance')}\r\n                                    value={currentTask.balance}\r\n                                    style={{ width: 200 }}\r\n                                    size='large'\r\n                                >\r\n                                    <Option value=\"работа\">работа</Option>\r\n                                    <Option value=\"проект\">проект</Option>\r\n                                    <Option value=\"развитие\">развитие</Option>\r\n                                    <Option value=\"семья\">семья</Option>\r\n                                    <Option value=\"здоровье\">здоровье</Option>\r\n                                    <Option value=\"быт\">быт</Option>\r\n                                    <Option value=\"отдых\">отдых</Option>\r\n                                </Select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='input_block'>\r\n                            <div className='input_div'>\r\n                                <div>Цель</div>\r\n                                <Switch defaultChecked={currentTask.goal} onChange={value => handleChangeData(value, 'goal')} />\r\n                            </div>\r\n                            <div className='input_div'>\r\n                                <div>Важно</div>\r\n                                <Switch defaultChecked={currentTask.important} onChange={value => handleChangeData(value, 'important')} />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='input_block'>\r\n                            <div className='input_div'>\r\n                                <div>Дата</div>\r\n                                <DatePicker\r\n                                    value={currentTask.date ? moment(currentTask.date) : null}\r\n                                    onChange={handleChangeDate}\r\n                                    style={{ width: 200 }}\r\n                                    size='large'\r\n                                />\r\n                                <div>\r\n                                    {\r\n                                        DATE_CONSTANTS.map(item => <span key={item.eng} className='date_constant' onClick={() => setDateFromConstants(item.eng)}>{item.ru}</span>)\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n            } */}\r\n\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveCurrentTask}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n                <Button\r\n                    onClick={deleteHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Удалить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { Button } from 'antd';\r\n\r\nimport { selectTasks } from '../../redux/taskReducer';\r\nimport { addTaskThunk } from '../../redux/tasksThunks';\r\n\r\nimport './ModalForm.css'\r\n\r\nexport const ModalNew = () => {\r\n\r\n    const [name, setName] = useState('')\r\n\r\n    const { currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13) {\r\n            event.preventDefault();\r\n            if (name !== '') {\r\n                dispatch(addTaskThunk({ ...currentTask, name: name }))\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveHandler = () => {\r\n        if (name !== '') {\r\n            dispatch(addTaskThunk({ ...currentTask, name: name }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onKeyPress={saveKeyHandler}\r\n        >\r\n            <TextareaAutosize\r\n                value={name}\r\n                className='inputtext inputtext-name'\r\n                onChange={e => setName(e.target.value)}\r\n                autoFocus\r\n            />\r\n            {/* <input\r\n                value={name}\r\n                className='input_name'\r\n                onChange={e => setName(e.target.value)}\r\n                autoFocus\r\n            /> */}\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { Button } from 'antd';\r\n\r\nimport { selectTasks } from '../../redux/taskReducer';\r\n// import { addTaskThunk } from '../../redux/thunks';\r\nimport { addDayTextThunk } from '../../redux/daysThunks';\r\n\r\nimport './ModalForm.css'\r\n\r\nexport const DayNew = () => {\r\n\r\n    const [text, setText] = useState('')\r\n\r\n    const { currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13 && event.ctrlKey) {\r\n            if (text !== '') {\r\n                dispatch(addDayTextThunk(text))\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveHandler = () => {\r\n        if (text !== '') {\r\n            dispatch(addDayTextThunk(text))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onKeyPress={saveKeyHandler}\r\n        >\r\n            <TextareaAutosize\r\n                value={text}\r\n                className='inputtext inputtext-day'\r\n                onChange={e => setText(e.target.value)}\r\n                autoFocus\r\n            />\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { Button } from 'antd';\r\n\r\nimport { selectTasks } from '../../redux/taskReducer';\r\n// import { addTaskThunk } from '../../redux/thunks';\r\nimport { addDayTextThunk } from '../../redux/daysThunks';\r\nimport { addFailuresThunk } from '../../redux/tasksThunks';\r\n\r\nimport './ModalForm.css'\r\n\r\nexport const FailureForm = () => {\r\n\r\n    const [text, setText] = useState('')\r\n\r\n    const { failures, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13 && event.ctrlKey) {\r\n            if (text !== '') {\r\n                dispatch(addFailuresThunk(failures[0].id, text))\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveHandler = () => {\r\n        if (text !== '') {\r\n            dispatch(addFailuresThunk(failures[0].id, text))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onKeyPress={saveKeyHandler}\r\n        >\r\n            Почему не выполнил задачу\r\n            <h2>{failures[0] && failures[0].name}</h2>\r\n            <TextareaAutosize\r\n                value={text}\r\n                className='inputtext inputtext-day'\r\n                onChange={e => setText(e.target.value)}\r\n                autoFocus\r\n            />\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { selectTasks, setModal } from '../../redux/taskReducer';\r\nimport { MODAL_TYPES } from '../../config/domain';\r\n\r\nimport './MainHeader.css'\r\n\r\n\r\nexport const MainHeader = () => {\r\n\r\n    const { daytext } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const openDayModal = () => {\r\n        dispatch(setModal({typeOfModal: MODAL_TYPES.day}))\r\n    }\r\n\r\n    return (\r\n        <div className='mainheader'>\r\n            <div>\r\n                <NavLink className='mainheader_item' to='/goals'>Цели</NavLink>\r\n                <NavLink className='mainheader_item' to='/projects'>Проекты</NavLink>\r\n                <NavLink className='mainheader_item' to='/tasks'>Общее планирование</NavLink>\r\n                <NavLink className='mainheader_item' to='/today'>Выполнение</NavLink>\r\n                {\r\n                    daytext ? null : <span onClick={openDayModal} className='dayinform'>Вступительное слово</span>\r\n                }\r\n                <span></span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './Action.css'\r\n\r\nexport const Action = ({ important, date, wait }) => {\r\n\r\n    const classes = ['action']\r\n    if (important) {\r\n        classes.push('important')\r\n    }\r\n    if (wait) {\r\n        classes.push('wait')\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n        >\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport moment from 'moment';\r\n\r\nimport { setCurrentTask, setModal, setFocus } from '../../redux/taskReducer';\r\nimport { Do } from '../Do/Do';\r\nimport { Action } from '../Action/Action';\r\nimport { TASK_TYPES } from '../../config/domain';\r\n\r\nimport './index.css'\r\nimport { changeSomeTaskThunk } from '../../redux/tasksThunks';\r\n\r\n\r\nexport const Task = ({ value, type }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const clickHandler = () => {\r\n        dispatch(setModal({ typeOfModal: 'task' }))\r\n        dispatch(setCurrentTask(value))\r\n    }\r\n\r\n    const makeYesterdayHandler = () => {\r\n        const newDate = moment(value.donedate, 'YYYY-MM-DD').subtract(1, 'd').format('YYYY-MM-DD')\r\n        dispatch(changeSomeTaskThunk(value.id, { donedate: newDate }))\r\n    }\r\n\r\n    const focusHandler = () => {\r\n        dispatch(setFocus(value.id))\r\n    }\r\n\r\n    let taskClasses = ['task']\r\n    if (type === TASK_TYPES.done) {\r\n        taskClasses.push('task-done')\r\n    }\r\n\r\n    let classes = ['task_name']\r\n    if (value.goal) {\r\n        classes.push('task_goal')\r\n    }\r\n\r\n    // if (value.plan === 'today' && moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     classes.push('goal')\r\n    // }\r\n\r\n\r\n\r\n    // if (value.type === 'проект') {\r\n    //     classes.push('project')\r\n    // }\r\n\r\n    // let dateClasses = ['task_tag']\r\n    // if (moment(today).isSame(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('day_today')\r\n    // }\r\n    // if (moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('importantTag')\r\n    // }\r\n\r\n    // let periodClasses = ['task_tag']\r\n    // if (value.period === 5) {\r\n    //     periodClasses.push('importantTag')\r\n    // }\r\n\r\n    const daysBetweenFromToday = moment().diff(moment(value.date, 'YYYY-MM-DD'), 'days')\r\n\r\n    return (\r\n        <div\r\n            className={taskClasses.join(' ')}\r\n        >\r\n            <div className='task_left'>\r\n                <div className='task_tools'>\r\n                    <Action\r\n                        important={value.important || value.goal}\r\n                        date={value.date}\r\n                        wait={value.wait}\r\n                    />\r\n                    <Do task={value} />\r\n                </div>\r\n                <div\r\n                    className='task_name'\r\n                    onClick={clickHandler}\r\n                >\r\n                    <span\r\n                        className={classes.join(' ')}\r\n                    >\r\n                        {value.name}\r\n                    </span>\r\n                    {\r\n                        value.parentname\r\n                            ? <span className='task_children'>\r\n                                {`<  ${value.parentname}`}\r\n                            </span>\r\n                            : value.isparent\r\n                                ? <span className='task_children'>{' >'}</span>\r\n                                : null\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className='task_right'>\r\n                <span className={!!daysBetweenFromToday ? 'task_tag task-overdue' : 'task_tag'}>{!!daysBetweenFromToday && daysBetweenFromToday}</span>\r\n                {/* <span className='task_tag'>{value.balance}</span> */}\r\n                {\r\n                    type === 'today' && <span className='task_tag task-focus' onClick={focusHandler}>фокус</span>\r\n                }\r\n                {\r\n                    type === 'done' && <span className='task_tag task-focus' onClick={makeYesterdayHandler}>вчера</span>\r\n                }\r\n                {/* <span className='task_tag'>{value.balance}</span> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { Alert, Button } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { resetBreaks } from '../../redux/taskReducer';\r\n\r\n\r\nexport const Breaks = ({ breaks }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const clickHandler = () => {\r\n        dispatch(resetBreaks())\r\n    }\r\n\r\n    return (\r\n        <div className='block'>\r\n            <Alert\r\n                message=\"Сделай небольшой перерыв и выключи голову\"\r\n                type=\"warning\"\r\n                showIcon\r\n                action={\r\n                    <Button size=\"small\" type=\"text\" onClick={clickHandler}>\r\n                        Готово\r\n                    </Button>\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}","import { useSelector, useDispatch } from 'react-redux';\r\nimport { Alert } from 'antd';\r\n\r\nimport { selectTasks, setModal } from '../../redux/taskReducer';\r\nimport { MODAL_TYPES } from '../../config/domain';\r\n\r\n\r\n\r\nexport const Alerts = () => {\r\n\r\n    const { tasks, breaks, failures } = useSelector(selectTasks)\r\n    console.log(\"🚀 ~ file: Alerts.js ~ line 12 ~ Alerts ~ failures\", failures)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const openModal = () => {\r\n        dispatch(setModal({typeOfModal: MODAL_TYPES.failures}))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                failures.length > 0 && (\r\n                    <div className='block' onClick={openModal}>\r\n                        <Alert\r\n                            message=\"ПРОСРОЧЕННЫЕ ЗАДАЧИ\"\r\n                            description=\"Объясни, почему ты не выполнил задачи. Это очень важно.\"\r\n                            type=\"error\"\r\n                            showIcon\r\n                        />\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}","import { useSelector } from 'react-redux';\r\n\r\n\r\nimport { selectTasks } from '../redux/taskReducer';\r\nimport { Task } from '../components/Task/Task';\r\nimport { TASK_TYPES } from '../config/domain';\r\nimport { filterTodayTasks, getDatesForPeriod } from '../config/helpers';\r\nimport { Breaks } from '../components/Breaks/Breaks';\r\nimport { Alerts } from '../components/Alerts/Alerts';\r\n\r\n\r\n\r\nexport const Tasks = () => {\r\n\r\n    const { tasks, breaks, failures } = useSelector(selectTasks)\r\n\r\n    const dates = getDatesForPeriod(14)\r\n\r\n    const todayTasks = filterTodayTasks(tasks)\r\n    const inboxTasks = tasks.filter(task => !task.date && !task.parent)\r\n    const otherTasks = tasks.filter(task => task.date)\r\n\r\n    return (\r\n        <>\r\n            {\r\n                breaks > 0 && <Breaks breaks={breaks} />\r\n            }\r\n            <Alerts />\r\n            {\r\n                inboxTasks.length > 0 ?\r\n                    <div className='block'>\r\n                        <h3>Инбокс</h3>\r\n                        {\r\n                            inboxTasks.map((task, index) => (\r\n                                <Task\r\n                                    key={task.id}\r\n                                    index={index}\r\n                                    value={task}\r\n                                    type={TASK_TYPES.plan}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    : null\r\n            }\r\n            \r\n\r\n            <div className='block'>\r\n                <h3>СЕГОДНЯ</h3>\r\n                {\r\n                    todayTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                            type={TASK_TYPES.plan}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            {\r\n                dates.map((date, index) => {\r\n                    const tasksForDate = otherTasks.filter(task => task.date === date.raw)\r\n                    return (\r\n                        <div className='block' key={index}>\r\n                            <h3>{date.show}</h3>\r\n                            {\r\n                                tasksForDate.map((task, index) => (\r\n                                    <Task\r\n                                        key={task.id}\r\n                                        index={index}\r\n                                        value={task}\r\n                                        type={TASK_TYPES.plan}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { selectTasks } from '../../redux/taskReducer';\r\nimport { getProjectThunk } from '../../redux/projectsThunks';\r\n\r\nimport { Action } from '../Action/Action';\r\n\r\n\r\nexport const Project = ({ value, type, childname, childdate }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const today = new Date()\r\n\r\n    const { filtertype } = useSelector(selectTasks)\r\n\r\n    const openProject = async () => {\r\n        const task = await dispatch(getProjectThunk(value.id))        \r\n    }\r\n\r\n\r\n    let classes = ['task_name']\r\n    if (value.goal) {\r\n        classes.push('task_goal')\r\n    }\r\n\r\n    // if (value.plan === 'today' && moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     classes.push('goal')\r\n    // }\r\n\r\n\r\n\r\n    // if (value.type === 'проект') {\r\n    //     classes.push('project')\r\n    // }\r\n\r\n    // let dateClasses = ['task_tag']\r\n    // if (moment(today).isSame(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('day_today')\r\n    // }\r\n    // if (moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     dateClasses.push('importantTag')\r\n    // }\r\n\r\n    // let periodClasses = ['task_tag']\r\n    // if (value.period === 5) {\r\n    //     periodClasses.push('importantTag')\r\n    // }\r\n\r\n\r\n\r\n    return (\r\n        <div\r\n            className='task'\r\n            // onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: value }))}\r\n            onClick={openProject}\r\n        >\r\n            <div className='task_left'>\r\n                <div className='task_tools'>\r\n                    <Action type={value.action} />\r\n                </div>\r\n                <div\r\n                    className='task_name'\r\n                // onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: value }))}\r\n                >\r\n                    <span\r\n                        className={classes.join(' ')}\r\n                    >\r\n                        {value.name}\r\n                    </span>\r\n                </div>\r\n                {\r\n                    childname ? <span className='task_children'>{` > ${childname}`}</span> : null\r\n                }\r\n\r\n            </div>\r\n\r\n\r\n            <div className='task_right'>\r\n                <div>\r\n                    <span className='task_tag'>{childdate}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useSelector } from 'react-redux';\r\n\r\nimport { selectTasks } from '../redux/taskReducer';\r\nimport { BALANCE } from '../config/domain';\r\nimport { Project } from '../components/Project/Project';\r\nimport { useState } from 'react';\r\n\r\n\r\n\r\n\r\nexport const Projects = () => {\r\n\r\n    const [filter, setFilter] = useState(BALANCE[0])\r\n\r\n    const { projects } = useSelector(selectTasks)\r\n\r\n    // if (projects.length === 0) return null\r\n\r\n    const navClickHandler = event => {\r\n        setFilter(event.target.textContent.toLowerCase())\r\n    }\r\n\r\n\r\n\r\n    const filteredProjects = projects.filter(project => project.balance === filter)\r\n\r\n    return (\r\n        <div>\r\n            <div className='block'>\r\n                {\r\n                    BALANCE.map(item => (\r\n                        <span\r\n                            className={`nav${filter === item ? ' nav-active' : ''}`}\r\n                            onClick={navClickHandler}\r\n                            key={item}\r\n                        >\r\n                            {item.toUpperCase()}\r\n                        </span>)\r\n                    )\r\n                }\r\n            </div>\r\n\r\n            {\r\n                filteredProjects.map(project => {\r\n                    return (\r\n                        <Project\r\n                            key={project.id}\r\n                            // index={index}\r\n                            value={project}\r\n                            childname={project.childname}\r\n                            childdate={project.childdate}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            {/* {\r\n                BALANCE.map(item => {\r\n                    const tasks = projects.filter(task => task.balance === item)\r\n                    return (\r\n                        <div className='block' key={item}>\r\n                            <h3>{item.toUpperCase()}</h3>\r\n                            {\r\n                                tasks.map((task, index) => (\r\n                                    <Project\r\n                                        key={task.id}\r\n                                        index={index}\r\n                                        value={task}\r\n                                        childname={task.childname}\r\n                                        childdate={task.childdate}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                })\r\n            } */}\r\n        </div>\r\n    )\r\n}","import { useState } from 'react';\r\nimport 'moment/locale/ru';\r\nimport { Alert } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { Task } from '../components/Task/Task';\r\nimport { selectTasks } from '../redux/taskReducer';\r\nimport { filterTodayTasks } from '../config/helpers';\r\nimport { TASK_TYPES } from '../config/domain';\r\nimport { Breaks } from '../components/Breaks/Breaks';\r\nimport { BALANCE } from '../config/domain';\r\n\r\n\r\nconst ALL = 'все'\r\n\r\nexport const Today = () => {\r\n\r\n    const [filter, setFilter] = useState(ALL)\r\n    const { tasks, doneTasks, focus, breaks } = useSelector(selectTasks)\r\n\r\n    const todaytasks = filterTodayTasks(tasks)\r\n    const focusTask = todaytasks.find((task) => task.id === focus)\r\n\r\n    const navClickHandler = event => {\r\n        setFilter(event.target.textContent.toLowerCase())\r\n    }\r\n\r\n    const filteredBalance = [...new Set(todaytasks.map(task => task.balance))]\r\n    const balance = [ALL, ...filteredBalance]\r\n\r\n    const filteredTasks = filter === ALL ? todaytasks : todaytasks.filter(task => task.balance === filter)\r\n    const filteredDoneTasks = filter === ALL ? doneTasks : doneTasks.filter(task => task.balance === filter)\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                breaks > 0 && <Breaks breaks={breaks} />\r\n            }\r\n            {\r\n                focusTask ? <div className='block'>\r\n                    <h3>ФОКУС</h3>\r\n                    <Task\r\n                        value={focusTask}\r\n                        type={TASK_TYPES.plan}\r\n                    />\r\n                </div>\r\n                    : <div className='block'>\r\n                        <Alert\r\n                            message=\"Выбери фокусную задачу\"\r\n                            type=\"info\"\r\n                            showIcon\r\n                        />\r\n                    </div>\r\n            }\r\n            <div className='block'>\r\n                {\r\n                    // [ALL, ...BALANCE].map(item => (\r\n                    balance.map(item => (\r\n                        <span\r\n                            className={`nav${filter === item ? ' nav-active' : ''}`}\r\n                            onClick={navClickHandler}\r\n                            key={item}\r\n                        >\r\n                            {item.toUpperCase()}\r\n                        </span>)\r\n                    )\r\n                }\r\n            </div>\r\n            <div className='block'>\r\n                {\r\n                    filteredTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                            type={TASK_TYPES.today}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            {\r\n                filteredDoneTasks.length > 0\r\n                    ? <div className='block'>\r\n                        <h3>ВЫПОЛНЕНО</h3>\r\n                        {\r\n                            doneTasks.map((task, index) => (\r\n                                <Task\r\n                                    key={task.id}\r\n                                    index={index}\r\n                                    value={task}\r\n                                    type={TASK_TYPES.done}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { selectTasks, setModal } from '../../redux/taskReducer';\r\nimport { getProjectThunk } from '../../redux/thunks';\r\n\r\nimport { Action } from '../Action/Action';\r\n\r\nimport './Goal.css'\r\n\r\n\r\nexport const Goal = ({ name, description, balance }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { filtertype } = useSelector(selectTasks)\r\n\r\n    const openProject = async () => {\r\n        // const task = await dispatch(getProjectThunk(value.id))        \r\n    }\r\n\r\n    return (\r\n        <div\r\n            className='goal'\r\n            // onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: value }))}\r\n            // onClick={openProject}\r\n        >            \r\n            <div className='goal_name'>{name}</div>\r\n            <div className='goal_description'>{description}</div>\r\n        </div>\r\n    )\r\n}","import { useSelector } from 'react-redux';\r\n\r\nimport { selectTasks } from '../redux/taskReducer';\r\nimport { Goal } from '../components/Goal/Goal';\r\n\r\n\r\nexport const Goals = () => {\r\n\r\n    const { goals } = useSelector(selectTasks)\r\n\r\n    // const navClickHandler = event => {\r\n    //     setFilter(event.target.textContent.toLowerCase())\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                goals.map(goal => {\r\n                    return (\r\n                        <Goal\r\n                            key={goal.id}\r\n                            // index={index}\r\n                            name={goal.name}\r\n                            description={goal.description}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { HotKeys, GlobalHotKeys } from 'react-hotkeys';\r\n\r\nimport { openNewTask, selectTasks } from './redux/taskReducer'\r\n// import { Focus } from './pages/Focus';\r\nimport { ModalForm } from './components/ModalForm/ModalForm';\r\nimport { MainHeader } from './components/MainHeader/MainHeader';\r\nimport { Tasks } from './pages/Tasks';\r\nimport { Projects } from './pages/Projects';\r\nimport { Today } from './pages/Today';\r\nimport { Goals } from './pages/Goals';\r\n\r\nimport { getProjectsThunk } from './redux/projectsThunks';\r\nimport { getTasksThunk, getDoneTasksThunk, getFailuresThunk } from './redux/tasksThunks';\r\nimport { getDayThunk } from './redux/daysThunks';\r\nimport { getGoalsThunk } from './redux/goalsThunks';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './App.css'\r\n\r\n\r\n// import ErrorBoundary from './components/Error/ErrorBoundary';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const { error } = useSelector(selectTasks)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const keyMap = {\r\n    MOVE_UP: \"ctrl+enter\"\r\n  };\r\n\r\n  const handlers = {\r\n    MOVE_UP: event => dispatch(openNewTask())\r\n    // setModal({ typeOfModal: 'new', currentTask: CURRENT_TASK }))\r\n    // MOVE_UP: event => dispatch(setModal({ typeOfModal: 'new', currentTask: CURRENT_TASK }))\r\n  };\r\n\r\n\r\n  const getData = async () => {\r\n    await dispatch(getDayThunk())\r\n    await dispatch(getTasksThunk())\r\n    await dispatch(getDoneTasksThunk())\r\n    await dispatch(getProjectsThunk())\r\n    await dispatch(getGoalsThunk())\r\n    await dispatch(getFailuresThunk())\r\n  }\r\n\r\n  useEffect(() => {\r\n    getData()\r\n  }, [])\r\n\r\n  if (error) {\r\n    return <div>{error}</div>\r\n  }\r\n\r\n  return (\r\n    <GlobalHotKeys keyMap={keyMap} handlers={handlers}>\r\n        <div className='App'>\r\n          <div className='wrapper'>\r\n            <MainHeader />\r\n            <Switch>\r\n              <Route exact path='/' component={Tasks} />\r\n              <Route exact path='/goals' component={Goals} />\r\n              <Route exact path='/tasks' component={Tasks} />\r\n              <Route exact path='/today' component={Today} />\r\n              <Route exact path='/projects' component={Projects} />\r\n              {/* <Route path='/focus' component={Focus} /> */}\r\n            </Switch>\r\n            <ModalForm />\r\n          </div>\r\n        </div>\r\n    </GlobalHotKeys>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { setError, setGoals, toggleFetching } from \"./taskReducer\"\r\nimport axios from '../config/axios'\r\n\r\n\r\n\r\nexport const getGoalsThunk = () => async dispatch => {\r\n    try {\r\n        dispatch(toggleFetching())\r\n        const { data } = await axios.get('goals')\r\n        dispatch(setGoals(data))\r\n    } catch (error) {\r\n        dispatch(setError(error.response.statusText))\r\n    }\r\n}","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nexport default configureStore({\r\n  // reducer: {\r\n  //   state: taskReducer\r\n  // },\r\n  reducer: taskReducer  ,\r\n  middleware: getDefaultMiddleware(),\r\n  devTools: process.env.NODE_ENV !== 'production', // по необходимости\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport './index.css'\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}