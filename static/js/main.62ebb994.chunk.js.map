{"version":3,"sources":["api/tasks.js","app/taskReducer.js","components/Do/Do.js","components/Action/Action.js","config/domain.js","components/Task/Task.js","routes/Plan.js","config/helpers.js","components/FocusTask/FocusTask.js","routes/Focus.js","components/ParentTask/ParentTask.js","components/Subtask/Subtask.js","components/Subtask/SubtaskEdit.js","components/ModalForm/ModalEdit.js","components/ModalForm/ModalNew.js","components/ModalForm/ModalForm.js","components/Card/Card.js","components/Column/Column.js","routes/Kanban.js","api/habits.js","app/habitsReducer.js","components/Habit/Habit.js","components/Fails/Fail.js","routes/Habits.js","components/MainHeader/MainHeader.js","routes/History.js","routes/Analyze.js","routes/HabitsScore.js","components/Tasks/PlanTasks.js","components/Tasks/DoTasks.js","components/Tasks/Projects.js","pages/PlanToday.js","App.js","app/store.js","index.js"],"names":["axios","defaults","baseURL","API","get","data","console","log","project_id","task","post","put","task_id","delete","index","id","plan","oldPlan","newPlan","oldIndex","newIndex","tasksSlice","createSlice","name","initialState","isFetching","tasks","todaytasks","projects","today","doneTasks","week","filtertype","currentTask","modalIsOpen","typeOfModal","date","isplan","search","reducers","toggleFetching","state","setTasks","action","payload","setTodayTasks","saveTask","newTasks","map","addTask","deleteTask","filter","setProjects","upTask","sort","a","b","setPlan","setWeek","doTask","doneTask","find","newPlanTasks","newTodayTasks","newPlanTasksWithNewIndexes","length","item","done","parentTask","child","subtasks","setCurrentTask","setModal","closeModal","changeCurrentTask","type","value","addSubtask","setCurrentDay","setCurrentPlan","setSearch","changePlan","arrayMove","actions","setPlanTasks","selectTasks","getTasksThunk","dispatch","then","response","getTodayTasksThunk","getProjectsThunk","getProjectThunk","addTaskThunk","newTask","Do","useDispatch","useState","current","useSelector","className","onClick","Action","classes","push","join","CURRENT_TASK","period","balance","goal","repeat","donedate","repeatday","BALANCE","PLANS","TASK_TYPES","DATE_CONSTANTS","eng","ru","days","Task","Date","dateClasses","moment","isSame","isAfter","parentname","isparent","Plan","dates","i","add","dateObject","raw","format","show","getDatesForPeriod","todayTasks","inboxTasks","otherTasks","useEffect","getTasks","tasksForDate","FocusTask","childname","Focus","time","ParentTask","isParent","setIsParent","startChooseParent","clickHandler","Option","Select","showSearch","style","width","onChange","filterOption","input","option","children","toLowerCase","indexOf","DragHandle","sortableHandle","SortableElement","change","dateFormat","dateFormatArray","split","SubtaskEdit","close","setInput","e","target","onKeyPress","event","charCode","autoFocus","SortableContainer","sortableContainer","ModalEdit","isSubtask","setIsSubtask","handleChangeType","setDateFromConstants","dateConstant","date_constant","result","getDateFromConstant","sortHandler","parentid","Group","size","defaultChecked","dateString","onSortEnd","useDragHandle","subtask","loading","ModalNew","setName","ctrlKey","customStyles","content","top","left","right","bottom","marginRight","transform","ModalForm","isOpen","onRequestClose","ariaHideApp","Card","draggableId","toString","provided","draggableProps","dragHandleProps","ref","innerRef","Column","title","column","droppableId","droppableProps","placeholder","Kanban","onDragEnd","source","destination","changePlanThunk","planTasks","getHabits","addHabitsHistory","habit_id","deleteHabitsHistory","getHabitsScore","doGift","habitsSlice","habits","values","categories","score","history","totalToday","averageCountPerMonth","timeByCategory","countHistory","habitsScore","totalSum","gifts","setHabits","setValues","newHabits","setDate","setHabitsScore","newGifts","gift","setHabitsAnalyze","selectHabits","getHabitsThunk","doGiftThunk","Habit","valuesForOptions","mode","addHabitsHistoryThunk","deleteHabitsHistoryThunk","allowClear","Fail","Habits","doneMode","setDoneMode","changeDate","arrow","newDate","subtract","totalScore","reduce","acc","cur","BASE","level","Math","round","sqrt","nextLevel","expForLevel","expForNextLevel","levelPercent","habitsWithMode","habit","valueStyle","color","percent","strokeWidth","MainHeader","to","History","emptyArray","Array","historyTotal","emptyItem","historyItem","dayindex","backgroundColor","Analyze","getHabitsAnalyze","BarChart","height","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","PieChart","Pie","cx","cy","outerRadius","label","columns","dataIndex","key","sorter","HabitsScore","dataSource","pagination","position","pageSize","PlanTasks","onlyDates","onlyTasks","onlyPlanTasks","isBefore","includes","DoTasks","floor","Projects","PlanToday","App","handlers","timer","MOVE_UP","keyMap","exact","path","component","configureStore","reducer","taskReducer","habitsReducer","middleware","getDefaultMiddleware","devTools","process","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.62ebb994.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\naxios.defaults.baseURL = 'http://82.146.40.11:5002/api/';\r\n// axios.defaults.baseURL = 'http://localhost:3006/api/';\r\n\r\nexport const API = {\r\n    async getTasks() {\r\n        try {\r\n            const { data } = await axios.get('tasks/plan')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async getTodayTasks() {\r\n        try {\r\n            const { data } = await axios.get('tasks/today')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async getDoneTasks() {\r\n        try {\r\n            const { data } = await axios.get('tasks/done')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async getProjects() {\r\n        try {\r\n            const { data } = await axios.get('projects')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async getProject(project_id) {\r\n        try {\r\n            const { data } = await axios.get('projects/' + project_id)\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async addTask(task) {\r\n        try {\r\n            const { data } = await axios.post('tasks', task)\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async editTask(task) {\r\n        try {\r\n            const { data } = await axios.put('tasks', task)\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async deleteTask(task_id) {\r\n\r\n        try {\r\n            const { data } = await axios.delete('tasks/' + task_id)\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async reindex(plan, oldIndex, newIndex) {\r\n        try {\r\n            await axios.put('tasks/reindex', {plan, oldIndex, newIndex})\r\n            // return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async up(index, task_id) {\r\n        try {\r\n            await axios.put('tasks/up', {index, task_id})\r\n            // return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async do(id, index, plan) {\r\n        try {\r\n            await axios.put('tasks/do', {id, index, plan})\r\n            // return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async getTodayPlan() {\r\n        try {\r\n            const { data } = await axios.get('days')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async addTodayPlan() {\r\n        try {\r\n            const { data } = await axios.post('days')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async changePlan(task_id, oldPlan, newPlan, oldIndex, newIndex) {\r\n        try {\r\n            const { data } = await axios.put('tasks/replan', {task_id, oldPlan, newPlan, oldIndex, newIndex})\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async getWeek() {\r\n        try {\r\n            const { data } = await axios.get('tasks/week')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    // async getPlanTasks() {\r\n    //     try {\r\n    //         const { data } = await axios.get('tasks/plan')\r\n    //         return data\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // },\r\n}","import { createSlice } from \"@reduxjs/toolkit\"\r\nimport arrayMove from 'array-move';\r\nimport { API } from '../api/tasks'\r\n\r\n\r\n\r\nexport const tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        isFetching: false,\r\n        tasks: [],\r\n        todaytasks: [],\r\n        projects: [],\r\n        today: [],\r\n        doneTasks: [],\r\n        week: [],\r\n        plan: 'today',\r\n        filtertype: 'plan',\r\n        currentTask: null,\r\n        modalIsOpen: false,\r\n        typeOfModal: 'new',\r\n        date: '',\r\n        isplan: false,\r\n        search: ''\r\n    },\r\n    reducers: {\r\n        toggleFetching: state => {\r\n            state.isFetching = !state.isFetching\r\n        },\r\n        setTasks: (state, action) => {\r\n            state.tasks = action.payload\r\n        },\r\n        setTodayTasks: (state, action) => {\r\n            state.todaytasks = action.payload\r\n            // state.doneTasks = action.payload.doneTasks\r\n        },\r\n        saveTask: (state, action) => {\r\n            const newTasks = state.tasks.map(task => {\r\n                if (task.id === state.currentTask.id) {\r\n                    if (state.currentTask.date) {\r\n                        return {\r\n                            ...state.currentTask,\r\n                            plan: 'plan'\r\n                        }\r\n                    } else {\r\n                        return {\r\n                            ...state.currentTask,\r\n                        }\r\n                    }\r\n                } else {\r\n                    return task\r\n                }\r\n            })\r\n            state.tasks = newTasks\r\n        },\r\n        addTask: (state, action) => {\r\n            state.tasks = [...state.tasks, action.payload]\r\n        },\r\n        deleteTask: (state, action) => {\r\n            const newTasks = state.tasks.filter(task => task.id !== state.currentTask.id)\r\n            state.tasks = newTasks\r\n        },\r\n        setProjects: (state, action) => {\r\n            state.projects = action.payload\r\n        },\r\n        upTask: (state, action) => {\r\n            const newTasks = state.tasks.map(task => {\r\n                if (task.plan === 'today') {\r\n                    if ((task.index + 1) === action.payload.index) {\r\n                        return { ...task, index: task.index + 1 }\r\n                    } else if (task.id === action.payload.task_id) {\r\n                        return { ...task, index: task.index - 1 }\r\n                    } else {\r\n                        return task\r\n                    }\r\n                } else {\r\n                    return task\r\n                }\r\n            })\r\n                .sort((a, b) => a.index > b.index ? 1 : -1)\r\n\r\n            state.tasks = newTasks\r\n            // state.projects = action.payload\r\n        },\r\n\r\n\r\n\r\n\r\n        setPlan: (state, action) => {\r\n            state.plan = action.payload.plan\r\n            state.filtertype = action.payload.filtertype\r\n        },\r\n\r\n        setWeek: (state, action) => {\r\n            state.week = action.payload\r\n        },\r\n        // addTask: (state, action) => {\r\n        //     state.tasks.all = [...state.tasks.all, action.payload]\r\n        //     state.tasks.inbox = [...state.tasks.inbox, action.payload]\r\n        // },\r\n        // saveTask: (state, action) => {\r\n        //     const { id, plan } = state.currentTask\r\n        //     const oldTask = state.tasks.find(task => task.id === id)\r\n        //     if (oldTask.plan !== plan) {\r\n        //         const oldTasks = state.tasks[oldTask.plan].filter(task => task.id !== state.currentTask.id)\r\n        //         const newAllTasks = state.tasks.all.map(task => task.id === state.currentTask.id ? { ...state.currentTask } : task)\r\n        //         const newPlanTasks = [...state.tasks[plan], { ...state.currentTask }]\r\n        //         state.tasks = {\r\n        //             ...state.tasks,\r\n        //             [oldTask.plan]: oldTasks,\r\n        //             [plan]: newPlanTasks,\r\n        //             all: newAllTasks\r\n        //         }\r\n        //     } else {\r\n        //         const newAllTasks = state.tasks.all.map(task => task.id === state.currentTask.id ? { ...state.currentTask } : task)\r\n        //         const newPlanTasks = state.tasks[plan].map(task => task.id === state.currentTask.id ? { ...state.currentTask } : task)\r\n        //         state.tasks = {\r\n        //             ...state.tasks,\r\n        //             [plan]: newPlanTasks,\r\n        //             all: newAllTasks\r\n        //         }\r\n        //     }\r\n        // },\r\n        // deleteTask: (state, action) => {\r\n\r\n        //     const { id, plan } = state.currentTask\r\n\r\n        //     const newTasks = state.tasks.all.filter(task => task.id !== id)\r\n        //     const newPlanTasks = state.tasks[plan].filter(task => task.id !== id)\r\n\r\n\r\n        //     // state.tasks = newTasks\r\n        //     state.tasks = {\r\n        //         ...state.tasks,\r\n        //         all: newTasks,\r\n        //         [plan]: newPlanTasks,\r\n        //     }\r\n        // },\r\n        doTask: (state, action) => {\r\n            const doneTask = state.tasks.find(task => task.id === action.payload)\r\n            const newPlanTasks = state.tasks.filter(task => task.id !== action.payload)\r\n            const newTodayTasks = state.todaytasks.filter(task => task.id !== action.payload)\r\n            const newPlanTasksWithNewIndexes = newPlanTasks.length > 0 ? newPlanTasks.map(item => item.index > doneTask.index ? { ...item, index: item.index - 1 } : item) : newPlanTasks\r\n            state.tasks = newPlanTasksWithNewIndexes\r\n            state.todaytasks = newTodayTasks\r\n            state.doneTasks = [...state.doneTasks, { ...doneTask, done: true, plan: 'done' }]\r\n            // state.tasks = newTasksWithNewIndexes\r\n            // state.doneTasks = [...state.doneTasks, { ...doneTask, done: true, plan: 'done' }]\r\n            // state.tasks = {\r\n            //     ...state.tasks,\r\n            //     // [state.plan]: newPlanTasksWithNewIndexes,\r\n            //     // done: [...state.tasks.done, { ...doneTask, done: true, plan: 'done' }],\r\n            //     // all: state.tasks.all.map(task => task.id === action.payload ? { ...doneTask, done: true, plan: 'done' } : task)\r\n            // }\r\n\r\n\r\n\r\n            // открыть родителя если это была подзадача\r\n            const parentTask = state.tasks.find(task => task.id === doneTask.child)\r\n            if (parentTask) {\r\n                state.modalIsOpen = true\r\n                state.typeOfModal = 'edit'\r\n                const subtasks = state.tasks.filter(task => task.child === parentTask.id && !task.done)\r\n\r\n                state.currentTask = { ...parentTask, subtasks: subtasks }\r\n            } else {\r\n                state.modalIsOpen = false\r\n            }\r\n            // const parentTask = state.tasks.find(task => task.id === doneTask.child)\r\n            // if (parentTask && state.tasks.filter(task => task.done === false && task.child === parentTask.id).length === 0) {\r\n            //     state.modalIsOpen = true\r\n            //     state.typeOfModal = 'edit'\r\n            //     const subtasks = state.tasks.filter(task => task.child === parentTask.id && !task.done)\r\n            //     state.currentTask = { ...parentTask, subtasks: subtasks }\r\n            // } else {\r\n            //     state.modalIsOpen = false\r\n            // }\r\n        },\r\n        setCurrentTask: (state, action) => {\r\n            state.currentTask = action.payload\r\n        },\r\n        setModal: (state, action) => {\r\n            state.modalIsOpen = true\r\n            state.typeOfModal = action.payload.typeOfModal\r\n            const subtasks = state.tasks.filter(task => task.child === action.payload.currentTask.id && !task.done)\r\n            state.currentTask = { ...action.payload.currentTask, subtasks: subtasks }\r\n        },\r\n        closeModal: state => {\r\n            state.modalIsOpen = false\r\n        },\r\n        changeCurrentTask: (state, action) => {\r\n            state.currentTask = { ...state.currentTask, [action.payload.type]: action.payload.value }\r\n        },\r\n        addSubtask: (state, action) => {\r\n            state.tasks = [...state.tasks, action.payload]\r\n            // state.tasks[action.payload.plan] = [...state.tasks[action.payload.plan], action.payload]\r\n            state.currentTask.subtasks = [...state.currentTask.subtasks, action.payload]\r\n        },\r\n        setCurrentDay: (state, action) => {\r\n            state.date = action.payload\r\n        },\r\n        setCurrentPlan: (state, action) => {\r\n            state.isplan = action.payload\r\n        },\r\n        setSearch: (state, action) => {\r\n            state.search = action.payload\r\n        },\r\n        changePlan: (state, action) => {\r\n\r\n            const { task_id, oldPlan, newPlan, oldIndex, newIndex } = action.payload;\r\n\r\n            if (oldPlan === newPlan) {\r\n                const newTasks = arrayMove(state.tasks[oldPlan], oldIndex, newIndex)\r\n                state.tasks[oldPlan] = newTasks\r\n                // const newTasks = state.taskss[oldPlan].map(task => task.id === task_id ? {...task, plan: newPlan} : task)\r\n            }\r\n\r\n            // const newTasks = state.tasks.map(task => task.id === task_id ? {...task, plan: newPlan} : task)\r\n\r\n            // state.tasks = newTasks\r\n\r\n\r\n            // const newTasks = state.tasks.map(task => {\r\n            //     if (task.plan === oldPlan) {\r\n\r\n            //         if (task.index > oldIndex) {\r\n\r\n            //             const newI = task.index - 1\r\n\r\n            //             return {\r\n            //                 ...task,\r\n            //                 index: newI\r\n            //             }\r\n            //         } else if (task.index === oldIndex) {\r\n            //             console.log(task)\r\n            //             return { ...task, plan: newPlan, index: newIndex }\r\n            //         } else {\r\n            //             return task\r\n            //         }\r\n            //     } else if (task.plan === newPlan) {\r\n            //         if (task.index >= newIndex) {\r\n\r\n            //             const newI = task.index + 1\r\n\r\n            //             return {\r\n            //                 ...task,\r\n            //                 index: newI\r\n            //             }\r\n            //         } else {\r\n            //             return task\r\n            //         }\r\n            //     } else {\r\n            //         return task\r\n            //     }\r\n            // })\r\n            // // const changedTask = newTasks.map(task => task.id === task_id ? { ...task, plan: newPlan, index: newIndex } : task)\r\n            // const sortedTasks = newTasks.sort((a, b) => a.index - b.index)\r\n            // state.tasks = sortedTasks\r\n        },\r\n    },\r\n});\r\n\r\n\r\n// actions\r\n\r\nexport const { toggleFetching,\r\n    setTasks, addTask, deleteTask, saveTask, doTask,\r\n    setPlanTasks, setTodayTasks,\r\n    setPlan,\r\n    setProjects,\r\n    upTask,\r\n    setCurrentTask, changeCurrentTask,\r\n    addSubtask,\r\n    setModal, closeModal,\r\n    setCurrentDay, setCurrentPlan,\r\n    setSearch,\r\n    changePlan,\r\n} = tasksSlice.actions;\r\n\r\n\r\n// selects\r\n\r\nexport const selectTasks = state => state.state\r\n\r\n\r\n// thunk\r\n\r\nexport const getTasksThunk = () => dispatch => {\r\n    dispatch(toggleFetching())\r\n    return API.getTasks()\r\n        .then(response => {\r\n            dispatch(setTasks(response))\r\n            dispatch(toggleFetching())\r\n            return response\r\n        })\r\n}\r\n\r\nexport const getTodayTasksThunk = () => dispatch => {\r\n    console.log('getthunk')\r\n    dispatch(toggleFetching())\r\n    return API.getTodayTasks()\r\n        .then(response => {\r\n            dispatch(setTodayTasks(response))\r\n            dispatch(toggleFetching())\r\n            return response\r\n        })\r\n}\r\n\r\nexport const getProjectsThunk = () => dispatch => {\r\n    dispatch(toggleFetching())\r\n    return API.getProjects()\r\n        .then(response => {\r\n            dispatch(setProjects(response))\r\n            dispatch(toggleFetching())\r\n            return response\r\n        })\r\n}\r\n\r\nexport const getProjectThunk = (project_id) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    return API.getProject(project_id)\r\n        .then(response => {\r\n            dispatch(toggleFetching())\r\n            return response\r\n        })\r\n}\r\n\r\n// export const getPlanTasksThunk = () => dispatch => {\r\n//     dispatch(toggleFetching())\r\n//     return API.getPlanTasks()\r\n//         .then(response => {\r\n//             dispatch(setPlanTasks(response))\r\n//             dispatch(toggleFetching())\r\n//             return response\r\n//         })\r\n// }\r\n\r\nexport const addTaskThunk = (newTask) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    API.addTask(newTask)\r\n        .then(response => {\r\n            dispatch(addTask(response))\r\n            dispatch(toggleFetching())\r\n            dispatch(closeModal())\r\n        })\r\n}\r\n\r\nexport const saveTaskThunk = (task) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    API.editTask(task)\r\n        .then(response => {\r\n            dispatch(saveTask())\r\n            dispatch(toggleFetching())\r\n            dispatch(closeModal())\r\n        })\r\n}\r\n\r\nexport const doTaskThunk = (id, index, plan) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    API.do(id, index, plan)\r\n        .then(response => {\r\n            dispatch(doTask(id))\r\n            dispatch(toggleFetching())\r\n            // dispatch(closeModal())\r\n        })\r\n}\r\n\r\nexport const deleteTaskThunk = (task_id) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    API.deleteTask(task_id)\r\n        .then(response => {\r\n            dispatch(deleteTask(task_id))\r\n            dispatch(toggleFetching())\r\n            dispatch(closeModal())\r\n        })\r\n}\r\n\r\nexport const addSubtaskThunk = (newTask) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    API.addTask(newTask)\r\n        .then(response => {\r\n            dispatch(addSubtask(response))\r\n            dispatch(toggleFetching())\r\n        })\r\n}\r\n\r\nexport const upTaskThunk = (index, task_id) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    API.up(index, task_id)\r\n        .then(response => {\r\n            dispatch(upTask({index, task_id}))\r\n            dispatch(toggleFetching())\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\nexport const getPlanThunk = (date) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    API.getTodayPlan()\r\n        .then(response => {\r\n            dispatch(setCurrentDay(date))\r\n            dispatch(setCurrentPlan(response))\r\n            dispatch(toggleFetching())\r\n        })\r\n}\r\n\r\nexport const addPlanThunk = () => dispatch => {\r\n    dispatch(toggleFetching())\r\n    API.addTodayPlan()\r\n        .then(response => {\r\n            dispatch(setCurrentDay(response.date))\r\n            dispatch(setCurrentPlan(true))\r\n            dispatch(toggleFetching())\r\n        })\r\n}\r\n\r\nexport const changePlanThunk = (task_id, oldPlan, newPlan, oldIndex, newIndex) => dispatch => {\r\n    dispatch(toggleFetching())\r\n    API.changePlan(task_id, oldPlan, newPlan, oldIndex, newIndex)\r\n        .then(response => {\r\n            console.log('change')\r\n            dispatch(changePlan({ task_id, oldPlan, newPlan, oldIndex, newIndex }))\r\n            // dispatch(setCurrentPlan(true))\r\n            dispatch(toggleFetching())\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\nexport default tasksSlice.reducer;","import { Spin } from 'antd';\r\nimport React, { useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { doTaskThunk, selectTasks } from '../../app/taskReducer';\r\n\r\nimport './Do.css'\r\n\r\n\r\nexport const Do = ({ task }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [current, setCurrent] = useState(false)\r\n\r\n    const { isFetching } = useSelector(selectTasks)\r\n\r\n    const doneHandler = () => {\r\n        dispatch(doTaskThunk(task.id, task.index, task.plan))\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {\r\n            (isFetching && current)\r\n            ? <Spin />\r\n            : <div\r\n                className='docheck'\r\n                onClick={doneHandler}\r\n            />\r\n        }\r\n        </>\r\n\r\n        // <div\r\n        //     className='docheck'\r\n        //     onClick={doneHandler}\r\n        // />\r\n    )\r\n}","import React from 'react';\r\nimport './Action.css'\r\n\r\nexport const Action = ({ type }) => {\r\n\r\n    const classes = ['action']\r\n    if (type) {\r\n        classes.push(type)\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n        >\r\n        </div>\r\n    )\r\n}","export const taskFilter = ['все', \"задача\", \"проект\", \"привычка\", \"другое\"]\r\n\r\nexport const RELAX_FOR_HOUR = 10\r\n\r\nexport const START_TIME_IN_MINUTES = 480\r\n\r\nexport const OPTIONS = {\r\n    type: [\r\n        { value: 'задача', label: 'Задача' },\r\n        { value: 'привычка', label: 'Привычка' }\r\n    ],\r\n    balance: [\r\n        { value: 'работа', label: 'Работа' },\r\n        { value: 'проект', label: 'Проект' },\r\n        { value: 'развитие', label: 'Развитие' },\r\n        { value: 'семья', label: 'Семья' },\r\n        { value: 'здоровье', label: 'Здоровье' },\r\n    ],\r\n    period: [\r\n        { value: 15, label: 15 },\r\n        { value: 30, label: 30 },\r\n        { value: 45, label: 45 },\r\n        { value: 60, label: 60 },\r\n        { value: 90, label: 90 },\r\n    ],\r\n    plan: [\r\n        { value: 'today', label: 'today' },\r\n        { value: 'inbox', label: 'inbox' },\r\n        { value: 'upcoming', label: 'upcoming' },\r\n        { value: 'later', label: 'later' },\r\n    ]\r\n}\r\n\r\nexport const CURRENT_TASK = {\r\n    id: 0,\r\n    name: '',\r\n    type: 'задача',\r\n    period: 0,\r\n    balance: '',\r\n    child: 0,\r\n    goal: false,\r\n    today: false,\r\n    repeat: false,\r\n    plan: 'inbox',\r\n    date: null,\r\n    done: false,\r\n    donedate: null,\r\n    action: null,\r\n    repeatday: 0\r\n}\r\n\r\nexport const BALANCE = ['работа', 'проект', \"семья\", \"здоровье\", \"быт\", \"развитие\", \"отдых\"]\r\nexport const PLANS = ['today', 'week', 'upcoming', \"later\"]\r\n\r\nexport const TASK_TYPES = {\r\n    plan: 'plan',\r\n    today: 'today'\r\n}\r\n\r\nexport const DATE_CONSTANTS = [\r\n    { eng: 'today', ru: 'сегодня', days: 0 }, { eng: 'tomorrow', ru: 'завтра', days: 1 }, { eng: 'aftertomorrow', ru: 'послезавтра', days: 2 }\r\n]\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { SortableElement, sortableHandle } from 'react-sortable-hoc';\r\nimport moment from 'moment';\r\n\r\nimport { selectTasks, setModal, upTaskThunk } from '../../app/taskReducer';\r\nimport { Do } from '../Do/Do';\r\n// import { TasksContext } from '../../hooks/useTasks';\r\nimport './index.css'\r\nimport { Action } from '../Action/Action';\r\nimport { TASK_TYPES } from '../../config/domain';\r\n\r\n// export const Task = ({ name, clickDone, id, type, period, balance, children, goal, today }) => {\r\n\r\n\r\n// const DragHandle = sortableHandle(() => <span className='draghandler'>:::</span>);\r\n\r\n\r\nexport const Task = ({ value, type }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const today = new Date()\r\n\r\n    const { filtertype } = useSelector(selectTasks)\r\n\r\n    const upTask = () => {\r\n        dispatch(upTaskThunk(value.index, value.id))\r\n    }\r\n\r\n    let classes = ['task_name']\r\n    if (value.goal) {\r\n        classes.push('goal')\r\n    }\r\n\r\n    // if (value.plan === 'today' && moment(today).isAfter(new Date(value.date), 'day')) {\r\n    //     classes.push('goal')\r\n    // }\r\n\r\n\r\n\r\n    // if (value.type === 'проект') {\r\n    //     classes.push('project')\r\n    // }\r\n\r\n    let dateClasses = ['task_tag']\r\n    if (moment(today).isSame(new Date(value.date), 'day')) {\r\n        dateClasses.push('day_today')\r\n    }\r\n    if (moment(today).isAfter(new Date(value.date), 'day')) {\r\n        dateClasses.push('importantTag')\r\n    }\r\n\r\n    let periodClasses = ['task_tag']\r\n    if (value.period === 5) {\r\n        periodClasses.push('importantTag')\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className='task'\r\n            onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: value }))}\r\n        >\r\n            <div className='task_left'>\r\n                <div className='task_tools'>\r\n                    <Action type={value.action} />\r\n                    <Do task={value} />\r\n                </div>\r\n                <div\r\n                    className='task_name'\r\n                    // onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: value }))}\r\n                >\r\n                    <span\r\n                        className={classes.join(' ')}\r\n                    >\r\n                        {value.name}\r\n                    </span>\r\n                    {\r\n                        value.parentname\r\n                            ? <span className='task_children'>\r\n                                {`<  ${value.parentname}`}\r\n                            </span>\r\n                            : value.isparent\r\n                                ? <span className='task_children'>{' >'}</span>\r\n                                : null\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className='task_right'>\r\n                <div>\r\n                    {/* <span className='task_tag'> */}\r\n                    {/* <span className={periodClasses.join(' ')}>\r\n                        {value.period}\r\n                    </span> */}\r\n                    {\r\n                        filtertype === 'plan' ? <span className='task_tag'>{value.balance}</span> : <span className='task_tag'>{value.plan}</span>\r\n                    }\r\n\r\n                    {/* <span className={dateClasses.join(' ')}>\r\n                        {\r\n                            value.date ? moment(value.date).format('DD.MM') : null\r\n                        }\r\n                    </span> */}\r\n                    {\r\n                        type === TASK_TYPES.today\r\n                            ? <span\r\n                                onClick={upTask}\r\n                                className='task_up'>\r\n                                &#8597;\r\n                                </span>\r\n                            : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// export default SortableElement(Task)","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { selectTasks, getTasksThunk } from '../app/taskReducer';\r\nimport { Task } from '../components/Task/Task';\r\nimport { TASK_TYPES } from '../config/domain';\r\nimport { getDatesForPeriod } from '../config/helpers';\r\n\r\nimport './routes.css'\r\n\r\n\r\n\r\nexport const Plan = () => {\r\n\r\n    const { tasks, filtertype, search } = useSelector(selectTasks)\r\n    const dispatch = useDispatch()\r\n\r\n    // if (search !== '') {\r\n    //     planTasks = tasks.filter(task => task.name.toLowerCase().includes(search.toLowerCase()))\r\n    // }\r\n\r\n    const dates = getDatesForPeriod(14)\r\n\r\n    const todayTasks = tasks.filter(task => task.plan === 'today')\r\n    const inboxTasks = tasks.filter(task => !task.date)\r\n    const otherTasks = tasks.filter(task => task.date && task.plan !== 'today')\r\n\r\n    useEffect(() => {\r\n        const getTasks = async () => {\r\n            dispatch(getTasksThunk())\r\n        }\r\n        getTasks()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className='plantask_div'>\r\n                <div className='plantask_date'>Инбокс</div>\r\n                {\r\n                    inboxTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                            type={TASK_TYPES.plan}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            <div className='plantask_div'>\r\n                <div className='plantask_date'>СЕГОДНЯ</div>\r\n                {\r\n                    todayTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                            type={TASK_TYPES.plan}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            {\r\n                dates.map((date, index) => {\r\n                    const tasksForDate = otherTasks.filter(task => task.date === date.raw)\r\n\r\n                    return (\r\n                        <div className='plantask_div' key={index}>\r\n                            <div className='plantask_date'>{date.show}</div>\r\n                            {\r\n                                tasksForDate.map((task, index) => (\r\n                                    <Task\r\n                                        key={task.id}\r\n                                        index={index}\r\n                                        value={task}\r\n                                        type={TASK_TYPES.plan}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}","import moment from 'moment';\r\nimport { DATE_CONSTANTS } from './domain';\r\n\r\nexport const getTimeFromMins = mins => {\r\n    let hours = Math.trunc(mins/60);\r\n    let minutes = mins % 60;\r\n    return hours + '-' + minutes.toString().padStart(2, 0);\r\n};\r\n\r\nexport const getDatesForPeriod = period => {\r\n    const dates = []\r\n    for (let i = 1; i < period; i++) {\r\n        const date = moment().add(i, 'days')\r\n        const dateObject = { raw: date.format('YYYY-MM-DD'), show: date.format('DD.MM dddd') }\r\n        dates.push(dateObject)\r\n        // onlyDates.push(date.format('YYYY-MM-DD'))\r\n    }\r\n    return dates\r\n};\r\n\r\n\r\nexport const getDateFromConstant = date_constant => {\r\n    const objectFromDateConstant = DATE_CONSTANTS.find(item => item.eng === date_constant)\r\n    const days = objectFromDateConstant.days\r\n    const today = moment()\r\n    const result = today.add(days, 'days')\r\n    const formatResult = moment(result).format('YYYY-MM-DD')\r\n    return formatResult\r\n};","import { useSelector } from 'react-redux';\r\nimport { selectTasks } from '../../app/taskReducer';\r\nimport { Do } from '../Do/Do';\r\n\r\nimport './FocusTask.css'\r\n\r\n\r\nexport const FocusTask = () => {\r\n\r\n    // const dispatch = useDispatch()\r\n\r\n    const { currentTask } = useSelector(selectTasks)\r\n\r\n    return (\r\n        <div className='focustask'>\r\n            <Do />\r\n            <span className='focustask_heading'>{currentTask.name}</span>\r\n            {\r\n                currentTask.childname \r\n                ? <span>{` < ${currentTask.childname}`}</span> \r\n                : null\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\n\r\n\r\nimport { getTasksThunk, selectTasks, setCurrentTask } from '../app/taskReducer';\r\nimport { Button } from '../components/Button/Button';\r\nimport { FocusTask } from '../components/FocusTask/FocusTask'\r\n\r\n\r\nexport const Focus = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const { tasks, currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const [time, setTime] = useState(0)\r\n    console.log(\"🚀 ~ file: Focus.js ~ line 17 ~ Focus ~ time\", time)\r\n\r\n    // let timer = new moment.duration(1000).timer();\r\n\r\n    // let timer = setInterval(setTime(time + 1), 1000);\r\n\r\n    // const startTimer = () => {\r\n    //     console.log(time)\r\n    //     timer = setInterval(setTime(time + 1), 1000);\r\n    // }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const getTasks = async () => {\r\n            const newTasks = await dispatch(getTasksThunk())\r\n            const currentTask = newTasks.find(task => task.plan === 'today' && task.index === 0)\r\n            if (currentTask) {\r\n                dispatch(setCurrentTask(currentTask || null))\r\n            } else {\r\n                dispatch(setCurrentTask(null))\r\n            }\r\n        }\r\n        getTasks()\r\n    }, [tasks.length])\r\n\r\n    if (isFetching) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='focus_mode'>\r\n            {\r\n                currentTask\r\n                    ? <FocusTask />\r\n                    : <div>Нет задач на сегодня</div>\r\n            }\r\n            {/* <Button\r\n                title='Старт'\r\n                // click={startTimer}\r\n            /> */}\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Select } from 'antd';\r\n\r\nimport { selectTasks, getProjectsThunk, changeCurrentTask, getProjectThunk, setModal } from '../../app/taskReducer';\r\nimport './ParentTask.css'\r\n\r\n\r\nexport const ParentTask = ({ id, name }) => {\r\n\r\n    const [isParent, setIsParent] = useState(false)\r\n    const { projects, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const startChooseParent = async () => {\r\n        if (projects.length === 0) {\r\n            dispatch(getProjectsThunk())\r\n        }\r\n        setIsParent(true)\r\n    }\r\n\r\n    const handleChangeType = (value) => {\r\n        dispatch(changeCurrentTask({ type: 'child', value }))\r\n    }\r\n\r\n    const clickHandler = async () => {\r\n        const task = await dispatch(getProjectThunk(id))\r\n        dispatch(setModal({typeOfModal: 'edit', currentTask: task})) \r\n    }\r\n\r\n    const { Option } = Select;\r\n\r\n    if (isParent) {\r\n        return (\r\n            <Select\r\n                showSearch\r\n                style={{ width: '100%' }}\r\n                // onChange={value => handleChangeType(value, 'child')} value={currentTask.child}\r\n                onChange={handleChangeType}\r\n                // value={currentTask.child}\r\n                filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                }\r\n            >\r\n                {\r\n                    projects.map(task => <Option value={task.id}>{task.name}</Option>)\r\n                }\r\n            </Select>\r\n        )\r\n    }\r\n\r\n\r\n    if (!name) {\r\n        return (\r\n            <a\r\n                onClick={startChooseParent}\r\n            >\r\n                Добавить родителя\r\n            </a>)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className='parenttask'\r\n                onClick={clickHandler}\r\n\r\n            >\r\n                {name}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n// export const ParentTask = ({ task }) => {\r\n\r\n//     const dispacth = useDispatch()\r\n\r\n//     const clickHandler = () => {\r\n//         dispacth(setModal({typeOfModal: 'edit', currentTask: task}))\r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             <div\r\n//                 className='parenttask'\r\n//                 onClick={clickHandler}\r\n\r\n//             >\r\n//                 {task.name}\r\n//             </div>\r\n//         </>\r\n//     )\r\n// }","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { SortableElement, sortableHandle } from 'react-sortable-hoc';\r\n\r\nimport { setModal } from '../../app/taskReducer'\r\nimport './Subtask.css'\r\n\r\nconst DragHandle = sortableHandle(() => <span className='draghandler'>:::</span>);\r\n\r\n\r\nconst Subtask = ({ task, change }) => {\r\n\r\n    const [input, setInput] = useState(task.name)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const handleBlur = () => {\r\n        if (input !== '') {\r\n            change(task.id, input)\r\n        }\r\n    }\r\n\r\n    let dateFormat = ''\r\n    if (task.date) {\r\n        const dateFormatArray = task.date.split('-')\r\n        dateFormat = dateFormatArray[2] + '.' + dateFormatArray[1]\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className='subtask'>\r\n            <DragHandle />\r\n            <span>\r\n                {task.name}\r\n            </span>\r\n            {/* <input\r\n                className='subtask_input'\r\n                value={input}\r\n                onChange={e => setInput(e.target.value)}\r\n                onBlur={handleBlur}\r\n                autoFocus={task.name === ''}\r\n            /> */}\r\n            <div className='subtask_info'>\r\n                <span className='subtask_plan'>{dateFormat}</span>\r\n                <span\r\n                    className='subtask_go'\r\n                    onClick={() => dispatch(setModal({ typeOfModal: 'edit', currentTask: task }))}\r\n                >\r\n                    {'>'}\r\n                </span>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SortableElement(Subtask)","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { addSubtaskThunk } from '../../app/taskReducer';\r\nimport { CURRENT_TASK } from '../../config/domain';\r\n\r\nimport './Subtask.css'\r\n\r\n\r\nexport const SubtaskEdit = ({ name = '', close, goal, balance, child, plan }) => {\r\n\r\n    const [input, setInput] = useState(name)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13) {\r\n            dispatch(addSubtaskThunk({...CURRENT_TASK, goal: goal, balance: balance, child: child, name: input, plan: plan}))\r\n            close()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='subtask'>\r\n            <input\r\n                className='subtask_input'\r\n                value={input}\r\n                onChange={e => setInput(e.target.value)}\r\n                onKeyPress={saveKeyHandler}\r\n                autoFocus={name === ''}\r\n            />\r\n        </div>\r\n    );\r\n};","import React, { useState } from 'react';\r\nimport { DatePicker, Select, Button, Radio, Switch } from 'antd';\r\nimport moment from 'moment';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { sortableContainer } from 'react-sortable-hoc';\r\n\r\nimport { ParentTask } from '../ParentTask/ParentTask';\r\nimport Subtask from '../Subtask/Subtask';\r\nimport { SubtaskEdit } from '../Subtask/SubtaskEdit';\r\nimport { Do } from '../Do/Do';\r\n\r\nimport { changeCurrentTask, deleteTaskThunk, saveTaskThunk, selectTasks } from '../../app/taskReducer';\r\n\r\nimport './ModalForm.css'\r\nimport { getDateFromConstant } from '../../config/helpers';\r\nimport { DATE_CONSTANTS } from '../../config/domain';\r\n\r\n\r\nconst SortableContainer = sortableContainer(({ children }) => {\r\n    return <div>{children}</div>;\r\n});\r\n\r\n\r\nexport const ModalEdit = () => {\r\n\r\n\r\n    const { Option } = Select;\r\n    const { currentTask, tasks, isplan, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [isSubtask, setIsSubtask] = useState(false)\r\n\r\n    const handleChangeName = e => {\r\n        changeCurrentTask('name', e.target.value)\r\n        dispatch(changeCurrentTask({ type: 'name', value: e.target.value }))\r\n    }\r\n\r\n    const handleChangeType = (value, option) => {\r\n        console.log(\"🚀 ~ file: ModalEdit.js ~ line 43 ~ handleChangeType ~ value\", value, option)\r\n        // dispatch(changeCurrentTask({ type: option, value: value }))\r\n        dispatch(changeCurrentTask({ type: option, value: value.target.value }))\r\n    }\r\n\r\n    const handleChangeDate = (date, dateString) => {\r\n        console.log(\"🚀 ~ file: ModalEdit.js ~ line 39 ~ handleChangeDate ~ dateString\", dateString)\r\n\r\n        dispatch(changeCurrentTask({ type: 'date', value: dateString }))\r\n    }\r\n\r\n    const setDateFromConstants = (dateConstant) => {\r\n        const date = getDateFromConstant(dateConstant)\r\n        dispatch(changeCurrentTask({ type: 'date', value: date }))\r\n    }\r\n\r\n    // const keyPressHandler = e => {\r\n    //     if (e.keyCode === 13 && e.ctrlKey) {\r\n    //         setIsSubtask(true)\r\n    //     }\r\n    // }\r\n\r\n    const deleteHandler = () => {\r\n        dispatch(deleteTaskThunk(currentTask.id))\r\n    }\r\n\r\n    const saveCurrentTask = () => {\r\n        dispatch(saveTaskThunk(currentTask))\r\n    }\r\n\r\n    const sortHandler = async ({ oldIndex, newIndex }) => {\r\n        // setTasks(tasks => arrayMove(tasks, oldIndex, newIndex))\r\n        // await API.reindex(plan, oldIndex, newIndex)\r\n    }\r\n\r\n    const parentTasks = tasks.find(task => task.id === currentTask.child)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ParentTask\r\n                name={currentTask.parentname}\r\n                id={currentTask.parentid}\r\n            />\r\n            <div>\r\n                <div className='flex'>\r\n                    <Do task={currentTask} />\r\n                    <TextareaAutosize\r\n                        className='input_name'\r\n                        value={currentTask.name}\r\n                        onChange={handleChangeName}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className='input_block'>\r\n                <div className='input_div'>\r\n                    <div>Тип задачи</div>\r\n                    {/* <Select\r\n                        onChange={value => handleChangeType(value, 'type')}\r\n                        value={currentTask.type}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value=\"задача\">задача</Option>\r\n                        <Option value=\"проект\">проект</Option>\r\n                    </Select> */}\r\n                    <Radio.Group onChange={value => handleChangeType(value, 'type')} value={currentTask.type}>\r\n                        <Radio value={\"задача\"}>задача</Radio>\r\n                        <Radio value={\"проект\"}>проект</Radio>\r\n                    </Radio.Group>\r\n                </div>\r\n\r\n                <div className='input_div'>\r\n                    <div>Сфера жизни</div>\r\n                    <Select\r\n                        onChange={value => handleChangeType(value, 'balance')}\r\n                        value={currentTask.balance}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value=\"работа\">работа</Option>\r\n                        <Option value=\"проект\">проект</Option>\r\n                        <Option value=\"развитие\">развитие</Option>\r\n                        <Option value=\"семья\">семья</Option>\r\n                        <Option value=\"здоровье\">здоровье</Option>\r\n                        <Option value=\"быт\">быт</Option>\r\n                        <Option value=\"отдых\">отдых</Option>\r\n                    </Select>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='input_block'>\r\n                <div className='input_div'>\r\n                    <div>Цель</div>\r\n                    {/* <Select\r\n                        onChange={value => handleChangeType(value, 'goal')}\r\n                        value={currentTask.goal}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value={true}>Да</Option>\r\n                        <Option value={false}>Нет</Option>\r\n                    </Select> */}\r\n                    <Switch defaultChecked={currentTask.goal} onChange={value => handleChangeType(value, 'goal')} />\r\n                </div>\r\n                {\r\n                    // currentTask.type !== 'проект'\r\n                    //     ? <div className='input_div'>\r\n                    //         <div>Действие</div>\r\n                    //         <Select\r\n                    //             onChange={value => handleChangeType(value, 'action')}\r\n                    //             value={currentTask.action}\r\n                    //             style={{ width: 200 }}\r\n                    //             size='large'\r\n                    //         >\r\n                    //             <Option value=\"do\">лягушка</Option>\r\n                    //             {/* <Option value=\"wait\">простая</Option>\r\n                    //             <Option value=\"go\">go</Option> */}\r\n                    //             <Option value=\"call\">простая</Option>\r\n                    //         </Select>\r\n                    //     </div>\r\n                    //     : null\r\n                }\r\n                {/* <div className='input_div'>\r\n                    <div>Действие</div>\r\n                    <Select\r\n                        onChange={value => handleChangeType(value, 'action')}\r\n                        value={currentTask.action}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value=\"do\">do</Option>\r\n                        <Option value=\"wait\">wait</Option>\r\n                        <Option value=\"go\">go</Option>\r\n                        <Option value=\"call\">call</Option>\r\n                    </Select>\r\n                </div> */}\r\n            </div>\r\n            {\r\n                currentTask.type !== 'проект'\r\n                    ? <div className='input_block'>\r\n                        {/* <div className='input_div'>\r\n                            <div>Необходимое время</div>\r\n                            <Select\r\n                                onChange={value => handleChangeType(value, 'period')}\r\n                                value={currentTask.period}\r\n                                style={{ width: 200 }}\r\n                                size='large'\r\n                            >\r\n                                <Option value=\"5\">5</Option>\r\n                                <Option value=\"15\">15</Option>\r\n                                <Option value=\"30\">30</Option>\r\n                                <Option value=\"45\">45</Option>\r\n                                <Option value=\"60\">60</Option>\r\n                                <Option value=\"90\">90</Option>\r\n                                <Option value=\"120\">120</Option>\r\n                                <Option value=\"180\">180</Option>\r\n                                <Option value=\"240\">240</Option>\r\n                            </Select>\r\n                        </div> */}\r\n                        <div className='input_div'>\r\n                            <div>Дата</div>\r\n                            <DatePicker\r\n                                // value={currentTask.date ? moment(currentTask.date, 'YYYY-MM-DD') : null}\r\n                                value={currentTask.date ? moment(currentTask.date) : null}\r\n                                onChange={handleChangeDate}\r\n                                style={{ width: 200 }}\r\n                                size='large'\r\n                            />\r\n                            <div>\r\n                                {\r\n                                    DATE_CONSTANTS.map(item => <span key={item.eng} className='date_constant' onClick={() => setDateFromConstants(item.eng)}>{item.ru}</span>)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    : null\r\n            }\r\n\r\n            {/* <div className='input_block'>\r\n                <div className='input_div'>\r\n                    <div>Необходимое время</div>\r\n                    <Select\r\n                        onChange={value => handleChangeType(value, 'period')}\r\n                        value={currentTask.period}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value=\"5\">5</Option>\r\n                        <Option value=\"15\">15</Option>\r\n                        <Option value=\"30\">30</Option>\r\n                        <Option value=\"45\">45</Option>\r\n                        <Option value=\"60\">60</Option>\r\n                        <Option value=\"90\">90</Option>\r\n                        <Option value=\"120\">120</Option>\r\n                        <Option value=\"180\">180</Option>\r\n                        <Option value=\"240\">240</Option>\r\n                    </Select>\r\n                </div>\r\n                <div className='input_div'>\r\n                    <div>Дата</div>\r\n                    <DatePicker\r\n                        // value={currentTask.date ? moment(currentTask.date, 'YYYY-MM-DD') : null}\r\n                        value={currentTask.date ? moment(currentTask.date) : null}\r\n                        onChange={handleChangeDate}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    />\r\n                </div>\r\n            </div> */}\r\n            {/* {\r\n                currentTask.type !== 'проект'\r\n                    ? <div className='input_block'>\r\n                        <div className='input_div'>\r\n                            <div>Повторяющаяся</div>\r\n                            <Select\r\n                                onChange={value => handleChangeType(value, 'repeat')}\r\n                                value={currentTask.repeat}\r\n                                style={{ width: 200 }}\r\n                                size='large'\r\n                            >\r\n                                <Option value={false}>нет</Option>\r\n                                <Option value={true}>да</Option>\r\n                            </Select>\r\n                        </div>\r\n                        {\r\n                            currentTask.repeat\r\n                                ? <div className='input_div'>\r\n                                    <div>Повторяющаяся</div>\r\n                                    <Select\r\n                                        onChange={value => handleChangeType(value, 'repeatday')}\r\n                                        value={currentTask.repeatday}\r\n                                        style={{ width: 200 }}\r\n                                        size='large'\r\n                                    >\r\n                                        <Option value={1}>1</Option>\r\n                                        <Option value={2}>2</Option>\r\n                                        <Option value={3}>3</Option>\r\n                                        <Option value={7}>7</Option>\r\n                                        <Option value={30}>30</Option>\r\n                                    </Select>\r\n                                </div>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                    : null\r\n            } */}\r\n\r\n            {/* <div className='input_block'>\r\n                <div className='input_div'>\r\n                    <div>Повторяющаяся</div>\r\n                    <Select\r\n                        onChange={value => handleChangeType(value, 'repeat')}\r\n                        value={currentTask.repeat}\r\n                        style={{ width: 200 }}\r\n                        size='large'\r\n                    >\r\n                        <Option value={false}>нет</Option>\r\n                        <Option value={true}>да</Option>\r\n                    </Select>\r\n                </div>\r\n                {\r\n                    currentTask.repeat\r\n                        ? <div className='input_div'>\r\n                            <div>Повторяющаяся</div>\r\n                            <Select\r\n                                onChange={value => handleChangeType(value, 'repeatday')}\r\n                                value={currentTask.repeatday}\r\n                                style={{ width: 200 }}\r\n                                size='large'\r\n                            >\r\n                                <Option value={1}>1</Option>\r\n                                <Option value={2}>2</Option>\r\n                                <Option value={3}>3</Option>\r\n                                <Option value={30}>30</Option>\r\n                            </Select>\r\n                        </div>\r\n                        : null\r\n                }\r\n            </div> */}\r\n\r\n\r\n            {/* <div className='input_div'>\r\n                <div>План выполнить</div>\r\n                <Select\r\n                    onChange={value => handleChangeType(value, 'plan')}\r\n                    value={currentTask.plan}\r\n                    style={{ width: '100%' }}\r\n                    size='large'\r\n                >\r\n                    <Option value=\"inbox\">inbox</Option>\r\n                    <Option value=\"today\">today</Option>\r\n                    <Option value=\"week\">week</Option>\r\n                    <Option value=\"upcoming\">upcoming</Option>\r\n                    <Option value=\"later\">later</Option>\r\n                </Select>\r\n            </div> */}\r\n\r\n\r\n\r\n\r\n            {/* <div className='input_div'>\r\n                <div>План выполнить</div>\r\n                <Select onChange={value => handleChangeType(value, 'plan')} value={currentTask.plan}>\r\n                    <Option value=\"inbox\">inbox</Option>\r\n                    <Option value=\"today\">today</Option>\r\n                    <Option value=\"upcoming\">upcoming</Option>\r\n                    <Option value=\"later\">later</Option>\r\n                </Select>\r\n            </div>\r\n\r\n            {\r\n                currentTask.type !== 'проект'\r\n                    ? <>\r\n                        <div className='input_div'>\r\n                            <div>Необходимое время</div>\r\n                            <Select onChange={value => handleChangeType(value, 'period')} value={currentTask.period}>\r\n                                <Option value=\"5\">5</Option>\r\n                                <Option value=\"15\">15</Option>\r\n                                <Option value=\"30\">30</Option>\r\n                                <Option value=\"45\">45</Option>\r\n                                <Option value=\"60\">60</Option>\r\n                                <Option value=\"90\">90</Option>\r\n                                <Option value=\"120\">120</Option>\r\n                                <Option value=\"180\">180</Option>\r\n                                <Option value=\"240\">240</Option>\r\n                            </Select>\r\n                        </div>\r\n                        <div className='input_div'>\r\n                            <div>Действие</div>\r\n                            <Select onChange={value => handleChangeType(value, 'action')} value={currentTask.action}>\r\n                                <Option value=\"do\">do</Option>\r\n                                <Option value=\"wait\">wait</Option>\r\n                                <Option value=\"go\">go</Option>\r\n                                <Option value=\"call\">call</Option>\r\n                            </Select>\r\n                        </div>\r\n                        <div className='input_div'>\r\n                            <div>Повторяющаяся</div>\r\n                            <Select onChange={value => handleChangeType(value, 'repeat')} value={currentTask.repeat}>\r\n                                <Option value={false}>нет</Option>\r\n                                <Option value={true}>да</Option>\r\n                            </Select>\r\n                        </div>\r\n                        <div className='input_div'>\r\n                            <div>Дата</div>\r\n                            <DatePicker\r\n                                // value={currentTask.date ? moment(currentTask.date, 'YYYY-MM-DD') : null}\r\n                                value={currentTask.date ? moment(currentTask.date) : null}\r\n                                onChange={handleChangeDate}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                    : null\r\n            }\r\n            {\r\n                currentTask.plan === 'today' && isplan\r\n                    ? <div className='input_div'>\r\n                        <div>Почему дополняешь план?</div>\r\n                        <TextareaAutosize />\r\n                    </div>\r\n                    : null\r\n            }\r\n            {\r\n                currentTask.repeat\r\n                    ? <div className='input_div'>\r\n                        <div>Повторяющаяся</div>\r\n                        <Select onChange={value => handleChangeType(value, 'repeatday')} value={currentTask.repeatday}>\r\n                            <Option value={1}>1</Option>\r\n                            <Option value={2}>2</Option>\r\n                            <Option value={3}>3</Option>\r\n                            <Option value={30}>30</Option>\r\n                        </Select>\r\n                    </div>\r\n                    : null\r\n            } */}\r\n\r\n            {\r\n                currentTask.type === 'проект'\r\n                    ? <>\r\n                        <div className='subtask_block'>\r\n                            <div>Подзадачи</div>\r\n                            <div\r\n                                onClick={() => setIsSubtask(true)}\r\n                                className='subtask_button'\r\n                            >\r\n                                +\r\n                            </div>\r\n                        </div>\r\n\r\n                        <SortableContainer\r\n                            onSortEnd={sortHandler}\r\n                            useDragHandle\r\n                        >\r\n                            {currentTask.subtasks.map((subtask, index) => (\r\n                                <Subtask\r\n                                    task={subtask}\r\n                                    key={subtask.id}\r\n                                    index={index}\r\n                                />\r\n                            ))}\r\n                        </SortableContainer>\r\n                        {\r\n                            isSubtask\r\n                                ? <SubtaskEdit\r\n                                    close={() => setIsSubtask(false)}\r\n                                    goal={currentTask.goal}\r\n                                    balance={currentTask.balance}\r\n                                    child={currentTask.id}\r\n                                    plan='inbox'\r\n                                />\r\n                                : null\r\n                        }\r\n                    </>\r\n                    : null\r\n            }\r\n\r\n\r\n\r\n\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveCurrentTask}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n                <Button\r\n                    onClick={deleteHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Удалить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\nimport { Button } from 'antd';\r\n\r\nimport { addTaskThunk, selectTasks } from '../../app/taskReducer';\r\n\r\nimport './ModalForm.css'\r\n\r\nexport const ModalNew = () => {\r\n\r\n    const [name, setName] = useState('')\r\n\r\n    const { currentTask, isFetching } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const saveKeyHandler = event => {\r\n        if (event.charCode === 13 && event.ctrlKey) {\r\n            if (name !== '') {\r\n                dispatch(addTaskThunk({ ...currentTask, name: name }))\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveHandler = () => {\r\n        if (name !== '') {\r\n            dispatch(addTaskThunk({ ...currentTask, name: name }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onKeyPress={saveKeyHandler}\r\n        >\r\n            <TextareaAutosize\r\n                value={name}\r\n                className='input_name'\r\n                onChange={e => setName(e.target.value)}\r\n                autoFocus\r\n            />\r\n            {/* <input\r\n                value={name}\r\n                className='input_name'\r\n                onChange={e => setName(e.target.value)}\r\n                autoFocus\r\n            /> */}\r\n            <div className='button_block'>\r\n                <Button\r\n                    onClick={saveHandler}\r\n                    loading={isFetching}\r\n                >\r\n                    Сохранить\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\nimport { ModalEdit } from './ModalEdit';\r\nimport { ModalNew } from './ModalNew';\r\n\r\nimport './ModalForm.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectTasks, closeModal } from '../../app/taskReducer';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        width: '500px',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n};\r\n\r\nexport const ModalForm = () => {\r\n\r\n    const { modalIsOpen, typeOfModal } = useSelector(selectTasks)\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalIsOpen}\r\n            onRequestClose={() => dispatch(closeModal())}\r\n            ariaHideApp={false}\r\n            style={customStyles}\r\n        >\r\n            {\r\n                typeOfModal === 'new' ? <ModalNew /> : <ModalEdit />\r\n            }\r\n        </Modal>\r\n    )\r\n}","import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport './Card.css'\r\n\r\nexport const Card = ({ task, index }) => {\r\n\r\n    return (\r\n        <Draggable draggableId={task.id.toString()} index={index}>\r\n            {\r\n                provided => (\r\n                    <div\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                        className='kanban_card'\r\n                    >\r\n                        <div>{task.childname}</div>\r\n                        <div className='card_name'>{task.name}</div>\r\n                        <div>\r\n                            <span className='card_tag'>{task.period}</span>\r\n                            <span className='card_tag'>{task.balance}</span>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        </Draggable>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { Card } from '../Card/Card';\r\nimport { TaskList } from '../TaskList/TaskList';\r\nimport './Column.css'\r\n\r\nexport const Column = ({ title, column, tasks }) => {\r\n    if (title === 'today') {\r\n        console.log('olumn', tasks)\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className='column'>\r\n            <div>{title}</div>\r\n            <Droppable droppableId={column}>\r\n                {\r\n                    provided => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}\r\n                        >\r\n                            {\r\n                                tasks.map((task, index) => <Card key={task.id} task={task} index={index}/>)\r\n                            }\r\n                            {\r\n                                provided.placeholder\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n            </Droppable>\r\n\r\n        </div>\r\n    )\r\n}","import { PLANS } from '../config/domain'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addPlanThunk, changePlan, changePlanThunk, selectTasks, setModal, setSearch } from '../app/taskReducer';\r\nimport { Column } from '../components/Column/Column'\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\n\r\n\r\nexport const Kanban = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { tasks } = useSelector(selectTasks)\r\n\r\n    const dragHandler = result => {\r\n        console.log(\"🚀 ~ file: Kanban.js ~ line 16 ~ Kanban ~ result\", result)\r\n        const task_id = +result.draggableId\r\n        const oldPlan = PLANS[+result.source.droppableId]\r\n        const newPlan = PLANS[+result.destination.droppableId]\r\n        const oldIndex = result.source.index\r\n        const newIndex = result.destination.index\r\n        // dispatch(changePlan({id: result.draggableId, plan: PLANS[+result.destination.droppableId]}))\r\n        dispatch(changePlanThunk(task_id, oldPlan, newPlan, oldIndex, newIndex))\r\n    \r\n\r\n    }\r\n\r\n    // const onlyTasks = tasks.filter(task => task.type !== 'проект')\r\n\r\n    return (\r\n        <DragDropContext\r\n            onDragEnd={dragHandler}\r\n        >\r\n            <div className='kanban'>\r\n                {\r\n                    PLANS.map((item, index) => {\r\n                        \r\n                        const planTasks = tasks[item].filter(task => task.type !== 'проект')\r\n                        // const planTasks = onlyTasks.filter(task => task.plan === item)\r\n                        return (\r\n                            <Column key={index} column={index.toString()} title={item} tasks={planTasks} />\r\n                        )\r\n                    })\r\n                }\r\n                {/* {\r\n                    PLANS.map((item, index) => {\r\n                        const planTasks = onlyTasks.filter(task => task.plan === item)\r\n                        return (\r\n                            <Column key={index} column={index.toString()} title={item} tasks={planTasks} />\r\n                        )\r\n                    })\r\n                } */}\r\n            </div>\r\n        </DragDropContext>\r\n\r\n    )\r\n}","import axios from 'axios'\r\n\r\n// axios.defaults.baseURL = 'http://82.146.40.11:5002/api/';\r\n// axios.defaults.baseURL = 'http://localhost:3006/api/';\r\n\r\nexport const API = {\r\n    async getHabits(date) {\r\n        try {\r\n            const { data } = await axios.get('habits/' + date)\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async addHabitsHistory(habit_id, value, date) {\r\n        try {\r\n            const { data } = await axios.post('habits/history', { habit_id, value, date })\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async deleteHabitsHistory(habit_id, date) {\r\n        try {\r\n            const { data } = await axios.delete(`habits/history/${habit_id}/${date}`)\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async getHabitsScore() {\r\n        try {\r\n            const { data } = await axios.get('habits/score')\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n    async doGift(id) {\r\n        try {\r\n            const { data } = await axios.put('gifts/' + id)\r\n            return data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    },\r\n}","import { createSlice } from \"@reduxjs/toolkit\"\r\nimport { API } from '../api/habits'\r\nimport moment from 'moment';\r\n\r\n\r\nconst today = moment(new Date()).format('YYYY-MM-DD')\r\n\r\n\r\nexport const habitsSlice = createSlice({\r\n    name: 'habits',\r\n    initialState: {\r\n        isFetching: false,\r\n        habits: [],\r\n        values: [],\r\n        categories: [],\r\n        date: today,\r\n        score: [],\r\n        history: [],\r\n        totalToday: 0,\r\n        averageCountPerMonth: 0,\r\n        timeByCategory: [],\r\n        countHistory: [],\r\n        habitsScore: [],\r\n        totalSum: 0,\r\n        gifts: []\r\n    },\r\n    reducers: {\r\n        toggleFetching: state => {\r\n            state.isFetching = !state.isFetching\r\n        },\r\n        setHabits: (state, action) => {\r\n            state.habits = action.payload.habits\r\n            state.values = action.payload.value\r\n            state.score = action.payload.score\r\n            state.categories = action.payload.categories\r\n            state.history = action.payload.history\r\n            state.totalToday = action.payload.totalToday\r\n            state.countHistory = action.payload.countHistory\r\n            state.averageCountPerMonth = action.payload.averageCountPerMonth\r\n            state.timeByCategory = action.payload.timeByCategory\r\n            state.totalSum = action.payload.totalSum\r\n            state.gifts = action.payload.gifts\r\n        },\r\n        setValues: (state, action) => {\r\n            let newHabits = []\r\n            if (action.payload.value) {\r\n                newHabits = state.habits.map(item => item.id === action.payload.habit_id ? { ...item, value: action.payload.value } : item)\r\n            } else {\r\n                newHabits = state.habits.map(item => item.id === action.payload.habit_id ? { ...item, value: [] } : item)\r\n            }\r\n            state.habits = newHabits\r\n        },\r\n        setDate: (state, action) => {\r\n            state.date = action.payload\r\n        },\r\n        setHabitsScore: (state, action) => {\r\n            state.habitsScore = action.payload\r\n        },\r\n        doGift: (state, action) => {\r\n            const newGifts = state.gifts.filter(gift => gift.id !== action.payload)\r\n            state.gifts = newGifts\r\n        },\r\n        setHabitsAnalyze: (state, action) => {\r\n            state.habitsScore = action.payload\r\n            state.categories = action.payload.categories\r\n            state.history = action.payload.history\r\n            state.totalToday = action.payload.totalToday\r\n            state.countHistory = action.payload.countHistory\r\n            state.averageCountPerMonth = action.payload.averageCountPerMonth\r\n            state.timeByCategory = action.payload.timeByCategory\r\n            state.totalSum = action.payload.totalSum\r\n        },\r\n        \r\n    },\r\n});\r\n\r\n\r\n// actions\r\n\r\nexport const {\r\n    toggleFetching,\r\n    setHabits,\r\n    setDate,\r\n    setValues,\r\n    setHabitsScore,\r\n    setHabitsAnalyze,\r\n    doGift\r\n} = habitsSlice.actions;\r\n\r\n\r\n// selects\r\n\r\nexport const selectHabits = state => state.habits\r\n\r\n\r\n// thunk\r\n\r\nexport const getHabitsThunk = (date) => dispatch => {    \r\n    dispatch(toggleFetching())\r\n    return API.getHabits(date)\r\n        .then(response => {\r\n            dispatch(setHabits(response))\r\n            dispatch(setDate(date))\r\n            dispatch(toggleFetching())\r\n            return response\r\n        })\r\n}\r\n\r\nexport const addHabitsHistoryThunk = (habit_id, value, date) => dispatch => {\r\n    return API.addHabitsHistory(habit_id, value, date)\r\n        .then(response => {\r\n            dispatch(setValues({ habit_id, value }))\r\n            return response\r\n        })\r\n}\r\n\r\nexport const deleteHabitsHistoryThunk = (habit_id, date) => dispatch => {\r\n    return API.deleteHabitsHistory(habit_id, date)\r\n        .then(response => {\r\n            dispatch(setValues({ habit_id }))\r\n            return response\r\n        })\r\n}\r\n\r\nexport const getHabitsScoreThunk = () => dispatch => {\r\n    return API.getHabitsScore()\r\n        .then(response => {\r\n            dispatch(setHabitsScore(response))\r\n            return response\r\n        })\r\n}\r\n\r\nexport const getHabitsAnalyzeThunk = () => dispatch => {\r\n    return API.getHabitsAnalyze()\r\n        .then(response => {\r\n            dispatch(setHabitsAnalyze(response))\r\n            return response\r\n        })\r\n}\r\n\r\nexport const doGiftThunk = (id) => dispatch => {\r\n    return API.doGift(id)\r\n        .then(response => {\r\n            dispatch(doGift(id))\r\n            return response\r\n        })\r\n}\r\n\r\n\r\nexport default habitsSlice.reducer;","import React, { useState } from 'react';\r\nimport { Select } from 'antd';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addHabitsHistoryThunk, deleteHabitsHistoryThunk, selectHabits, setValues } from '../../app/habitsReducer';\r\n\r\nimport './Habit.css'\r\n\r\nconst { Option } = Select;\r\n\r\n\r\nexport const Habit = ({ id, name, type, value }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const { isFetching, values, date } = useSelector(selectHabits)\r\n\r\n    const changeHandler = value => {\r\n        if (value) {\r\n            dispatch(addHabitsHistoryThunk(id, value, date))\r\n        } else {\r\n            dispatch(deleteHabitsHistoryThunk(id, date))\r\n        }\r\n    }\r\n\r\n    const valuesForOptions = values\r\n        .filter(item => item.habit_id === id)\r\n        .map(item => item.name)\r\n\r\n\r\n    return (\r\n        <div\r\n            className='habit'\r\n        >\r\n            <div>\r\n                {name}\r\n            </div>\r\n            <div>\r\n                <Select\r\n                    mode={type === 'multi' ? \"multiple\" : null}\r\n                    style={{ width: '250px' }}\r\n                    onChange={changeHandler}\r\n                    value={value}\r\n                    allowClear\r\n                    key={value}\r\n                >\r\n                    {\r\n                        valuesForOptions.map(item => <Option key={item}>{item}</Option>)\r\n                    }\r\n                </Select>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\n\r\nimport './Fail.css'\r\n\r\n\r\n\r\nexport const Fail = ({ id, name, value }) => {\r\n\r\n    let classes = ['fail']\r\n\r\n    if (value > 6) {\r\n        classes.push('fail_urgent')\r\n    } else if (value > 2 && value < 7) {\r\n        classes.push('fail_middle')\r\n    }\r\n\r\n\r\n    return (\r\n        <div\r\n            className={classes.join(' ')}\r\n        >\r\n            <span>\r\n                {name}\r\n            </span>\r\n            <span>\r\n                {value}\r\n            </span>\r\n            {/* <div>\r\n                <span>\r\n                    {days}\r\n                </span>\r\n                <span>\r\n                    -\r\n            </span>\r\n                <span>\r\n                    {total}\r\n                </span>\r\n            </div> */}\r\n\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { Statistic, Card, Switch, Progress } from 'antd';\r\nimport { BarChart, Bar, Cell, XAxis, YAxis, Tooltip, Legend, PieChart, Pie } from 'recharts';\r\n\r\n\r\nimport { doGiftThunk, getHabitsThunk, selectHabits, setDate } from '../app/habitsReducer';\r\nimport { Habit } from '../components/Habit/Habit';\r\nimport { Fail } from '../components/Fails/Fail';\r\n\r\n\r\nconst DAY_PERIODS = ['утро', 'день', 'вечер']\r\n\r\n\r\nexport const Habits = () => {\r\n\r\n    // const [mode, setMode] = useState(true)\r\n    const [doneMode, setDoneMode] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n    const { habits, date, score, averageCountPerMonth, totalToday, totalSum, countHistory, gifts } = useSelector(selectHabits)\r\n\r\n    useEffect(() => {\r\n        const getHabits = async () => {\r\n            await dispatch(getHabitsThunk(date))\r\n        }\r\n        getHabits()\r\n    }, [date])\r\n\r\n\r\n    const changeDate = arrow => {\r\n        const today = moment(new Date()).format('YYYY-MM-DD')\r\n        if (today === date && arrow === -1) {\r\n            return\r\n        }\r\n        const newDate = moment(date).subtract(arrow, 'd').format('YYYY-MM-DD')\r\n        dispatch(setDate(newDate))\r\n    }\r\n\r\n    const totalScore = score.length > 0 && score.reduce((acc, cur) => acc + cur.days, 0)\r\n\r\n    const doGift = async id => {\r\n        await dispatch(doGiftThunk(id))\r\n    }\r\n\r\n\r\n    // let scoreForDisplay = score\r\n\r\n    // if (!mode) {\r\n    //     scoreForDisplay = [...score].sort((a, b) => b.total - a.total)\r\n    // }\r\n    const BASE = 10\r\n    const level = Math.round(Math.sqrt(BASE * (2 * totalSum + BASE / 4) + BASE / 2) / BASE)\r\n    // const levelPercent = totalSum % 1000 / 10\r\n    const nextLevel = level + 1\r\n    const expForLevel = Math.round((level * level + level) / 2 * BASE - (level * BASE))\r\n    const expForNextLevel = Math.round((nextLevel * nextLevel + nextLevel) / 2 * BASE - (nextLevel * BASE))\r\n    const levelPercent = Math.round((totalSum - expForLevel) / (expForNextLevel - expForLevel) * 100)\r\n    console.log(totalSum, expForLevel, expForNextLevel, expForLevel, expForLevel)\r\n    const habitsWithMode = doneMode ? habits.filter(habit => habit.value.length === 0) : habits\r\n\r\n\r\n    return (\r\n        <div className='habit_mode'>\r\n            <div>\r\n                <div className='block'>\r\n                    <div className='flex_around'>\r\n                        <div className='habit_date'>\r\n                            <span\r\n                                className='datechange'\r\n                                onClick={() => changeDate(1)}\r\n                            >\r\n                                {'<'}\r\n                            </span>\r\n                            <span>{date}</span>\r\n                            <span\r\n                                className='datechange'\r\n                                onClick={() => changeDate(-1)}\r\n                            >\r\n                                {'>'}\r\n                            </span>\r\n                        </div>\r\n                        <Switch\r\n                            // defaultChecked\r\n                            onChange={() => setDoneMode(!doneMode)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className='block'>\r\n                    <Card>\r\n                        <Statistic\r\n                            title=\"Сегодня / Месяц\"\r\n                            value={`${totalToday} / ${averageCountPerMonth}`}\r\n                            valueStyle={{ color: '#cf1322' }}\r\n                        />\r\n                    </Card>\r\n                </div>\r\n                <div className='block'>\r\n                    <Card>\r\n                        <Statistic\r\n                            title=\"Уровень / Всего очков\"\r\n                            value={`${level} / ${totalSum}`}\r\n                            valueStyle={{ color: '#cf1322' }}\r\n                        />\r\n                    </Card>\r\n                </div>\r\n                <div className='block'>\r\n                    <Progress\r\n                        percent={levelPercent}\r\n                        strokeWidth={20}\r\n                    />\r\n                </div>\r\n                <div className='block'>\r\n                    {\r\n                        gifts.length > 0 ? gifts.map(gift => <div className='gift' onClick={() => doGift(gift.id)}>&#9749; {gift.name}</div>) : null\r\n                    }\r\n                </div>\r\n                <div className='block'>\r\n                    {\r\n                        totalToday < averageCountPerMonth ? <div className='message'>СТАРАЙСЯ, САМУРАЙ</div> : null\r\n                    }\r\n                </div>\r\n\r\n\r\n\r\n                {/* <div>\r\n                    <BarChart\r\n                        width={300}\r\n                        height={180}\r\n                        data={countHistory}\r\n                    >\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Bar dataKey=\"value\" fill=\"#8884d8\" />\r\n                    </BarChart>\r\n                </div> */}\r\n\r\n\r\n\r\n\r\n            </div>\r\n            <div>\r\n                {/* {\r\n                    DAY_PERIODS.map(period => {\r\n\r\n                        let habitsFromPeriod = []\r\n\r\n                        if (doneMode) {\r\n                            habitsFromPeriod = habits.filter(habit => habit.period === period && habit.value.length === 0)\r\n                        } else {\r\n                            habitsFromPeriod = habits.filter(habit => habit.period === period)\r\n                        }\r\n\r\n                        // const habitsFromCategory = habits.filter(habit => habit.category === category && habit.value.length === 0)\r\n\r\n                        if (habitsFromPeriod.length > 0) {\r\n                            return (\r\n                                <div key={period} className='category_div'>\r\n                                    <div key={period} className='category_title'>{period}</div>\r\n                                    <div>\r\n                                        {\r\n                                            habitsFromPeriod.map(habit => (\r\n                                                <Habit\r\n                                                    key={habit.id}\r\n                                                    {...habit}\r\n                                                />\r\n                                            ))\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        }\r\n\r\n\r\n                    })\r\n                } */}\r\n\r\n\r\n\r\n                {\r\n                    habitsWithMode.map(habit => (\r\n                        <Habit\r\n                            key={habit.id}\r\n                            {...habit}\r\n                        />\r\n                    ))\r\n                }\r\n\r\n\r\n\r\n            </div>\r\n            <div>\r\n                <Card>\r\n                    <Statistic\r\n                        title=\"Штрафы\"\r\n                        value={totalScore}\r\n                        valueStyle={{ color: '#cf1322' }}\r\n                    />\r\n                </Card>\r\n                {\r\n                    score.map(item => <Fail key={item.id} {...item} value={item.days} />)\r\n                }\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}","import { NavLink } from 'react-router-dom';\r\n\r\nimport './MainHeader.css'\r\n\r\n\r\nexport const MainHeader = () => {\r\n\r\n    return (\r\n        <div className='mainheader'>\r\n            <div>\r\n                <NavLink className='mainheader_item' to='/projects'>Проекты</NavLink>                \r\n                <NavLink className='mainheader_item' to='/plan'>Общее планирование</NavLink>\r\n                <NavLink className='mainheader_item' to='/today'>Планирование дня</NavLink>\r\n                <NavLink className='mainheader_item' to='/do'>Выполнение</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useDispatch, useSelector } from 'react-redux';\r\nimport { selectHabits } from '../app/habitsReducer';\r\nimport './routes.css'\r\n\r\nexport const History = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { history } = useSelector(selectHabits)\r\n\r\n    const emptyArray = [...Array(30)]\r\n    console.log(\"🚀 ~ file: History.js ~ line 12 ~ History ~ emptyArray\", emptyArray)\r\n\r\n    return (\r\n        <div className='week_section'>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>1</th>\r\n                        {\r\n                            history.dates.map(item => <th className='table_head'>{item}</th>)\r\n                        }\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        history.historyTotal.map(item => {\r\n                            return (\r\n                                <tr>\r\n                                    <td>{item.name}</td>\r\n                                    {\r\n                                        emptyArray.map((emptyItem, index) => {\r\n                                            if (item.history.find(historyItem => historyItem.dayindex === index + 1)) {\r\n                                                return <td style={{backgroundColor: 'green'}}></td>\r\n                                            } else {\r\n                                                return <td></td>\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div >\r\n\r\n    )\r\n}","import { useDispatch, useSelector } from 'react-redux';\r\nimport { BarChart, Bar, Cell, XAxis, YAxis, Tooltip, Legend, PieChart, Pie } from 'recharts';\r\nimport { Statistic, Card, Progress } from 'antd';\r\nimport { useEffect } from 'react';\r\n\r\nimport { getHabitsAnalyzeThunk, selectHabits } from '../app/habitsReducer';\r\nimport './routes.css'\r\n\r\n\r\nexport const Analyze = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { countHistory, averageCountPerMonth, totalToday, timeByCategory, totalSum } = useSelector(selectHabits)\r\n\r\n    useEffect(() => {\r\n        const getHabitsAnalyze = async () => {\r\n            dispatch(getHabitsAnalyzeThunk())\r\n        }\r\n        getHabitsAnalyze()\r\n    }, [])\r\n\r\n\r\n    const level = Math.round(Math.sqrt(100*(2*totalSum + 25) + 50) / 100)\r\n    // const levelPercent = totalSum % 1000 / 10\r\n    const nextLevel = level + 1\r\n    const expForLevel = Math.round((level*level+level)/2*100-(level*100))\r\n    const expForNextLevel = Math.round((nextLevel*nextLevel+nextLevel)/2*100-(nextLevel*100))   \r\n    const levelPercent = Math.round((totalSum - expForLevel) / (expForNextLevel - expForLevel) * 100)\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <div className='analyze_wrapper'>\r\n            {/* <ResponsiveContainer width=\"100%\" height=\"100%\"> */}\r\n            <div>\r\n                <BarChart width={800} height={600} data={countHistory}>\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Bar dataKey=\"value\" fill=\"#8884d8\" />\r\n                </BarChart>\r\n            </div>\r\n            <div>\r\n                <Card>\r\n                    <Statistic\r\n                        title=\"Сегодня / Месяц\"\r\n                        value={`${totalToday} / ${averageCountPerMonth}`}\r\n                        valueStyle={{ color: '#cf1322' }}\r\n                    />\r\n                </Card>\r\n                <Card>\r\n                    <Statistic\r\n                        title=\"Уровень / Всего очков\"\r\n                        value={`${level} / ${totalSum}`}\r\n                        valueStyle={{ color: '#cf1322' }}\r\n                    />\r\n                </Card>\r\n                <div>\r\n                    {level}\r\n                    <Progress\r\n                        percent={levelPercent}\r\n                        strokeWidth={20}\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <PieChart width={400} height={400}>\r\n                        <Pie data={timeByCategory} dataKey=\"sum\" cx=\"50%\" cy=\"50%\" outerRadius={60} fill=\"#8884d8\" label />\r\n                        <Tooltip />\r\n                    </PieChart>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            {/* </ResponsiveContainer> */}\r\n        </div >\r\n\r\n    )\r\n}","import { useEffect } from 'react';\r\nimport { Table } from 'antd';\r\n\r\nimport { BALANCE, PLANS } from '../config/domain'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getHabitsScoreThunk, selectHabits } from '../app/habitsReducer';\r\n\r\n\r\n\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Привычка',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n    },\r\n    {\r\n        title: 'Процент',\r\n        dataIndex: 'percent',\r\n        key: 'percent',\r\n        sorter: (a, b) => a.percent - b.percent,\r\n    },\r\n    {\r\n      title: 'Выполнено',\r\n      dataIndex: 'done',\r\n      key: 'done',\r\n      sorter: (a, b) => a.done - b.done,\r\n    },\r\n];\r\n\r\n\r\nexport const HabitsScore = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { habitsScore } = useSelector(selectHabits)\r\n\r\n    useEffect(() => {\r\n        const getHabitsScore = async () => {\r\n            dispatch(getHabitsScoreThunk())\r\n        }\r\n        getHabitsScore()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className='plan_section'>\r\n            <Table\r\n                dataSource={habitsScore}\r\n                columns={columns}\r\n                pagination={{ position: ['none'], pageSize: 50 }}\r\n            />\r\n\r\n        </div>\r\n\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { sortableContainer } from 'react-sortable-hoc';\r\n// import arrayMove from 'array-move';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ru';\r\n\r\nimport { Switch } from 'antd';\r\n\r\nimport './Tasks.css'\r\n\r\n\r\nimport { Task } from '../Task/Task';\r\nimport { API } from '../../api/tasks';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changePlan, getPlanTasksThunk, getTasksThunk, selectTasks } from '../../app/taskReducer';\r\n\r\n\r\n\r\n\r\n// const SortableContainer = sortableContainer(({ children }) => {\r\n//     return <div>{children}</div>;\r\n// });\r\n\r\n\r\n\r\nexport const PlanTasks = () => {\r\n\r\n    const { tasks } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    // const sortHandler = async ({ oldIndex, newIndex }) => {\r\n    //     // dispatch(changePlan({ oldIndex, newIndex, oldPlan: plan, newPlan: plan }))\r\n    //     // setTasks(tasks => arrayMove(tasks, oldIndex, newIndex))\r\n    //     // await API.reindex(plan, oldIndex, newIndex)\r\n    // }\r\n\r\n    useEffect(() => {\r\n        const getTasks = async () => {\r\n            await dispatch(getTasksThunk())\r\n        }\r\n        getTasks()\r\n    }, [])\r\n\r\n    const today = new Date()\r\n    const dates = []\r\n    const onlyDates = []\r\n    for (let i = 1; i < 14; i++) {\r\n        const date = moment(today).add(i, 'days')\r\n        const dateObject = { raw: date.format('YYYY-MM-DD'), show: date.format('DD.MM dddd') }\r\n        dates.push(dateObject)\r\n        onlyDates.push(date.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    const onlyTasks = tasks.filter(task => task.type === 'задача')\r\n    const onlyPlanTasks = onlyTasks.filter(task => task.plan === 'plan')\r\n    const todayTasks = onlyTasks.filter(task => moment(task.date).isBefore(moment(today)))\r\n    // const yesterdayTasks = onlyTasks.filter(task => moment(task.date).isBefore(moment(today).subtract(1, 'days')))\r\n    // const todayTasks= onlyTasks.filter(task => moment(task.date).format('YYYY-MM-DD') === moment(today).format('YYYY-MM-DD'))\r\n    // .sort((a, b) => a.index - b.index ? 1 : -1)\r\n    const otherTasks = onlyPlanTasks.filter(task => !onlyDates.includes(task.date))\r\n    const inboxTasks = onlyTasks.filter(task => task.date === 'inbox')\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* <SortableContainer\r\n                onSortEnd={sortHandler}\r\n                useDragHandle\r\n            >\r\n                {plantasks.map((item, index) => (\r\n                    <div className='plantask_div'>\r\n                        <div className='plantask_date'>{item.date}</div>\r\n                        {\r\n                            item.tasks.map(task => (\r\n                                <Task\r\n                                    key={task.id}\r\n                                    index={index}\r\n                                    value={task}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n\r\n                ))}\r\n            </SortableContainer> */}\r\n            \r\n            <div className='plantask_div'>\r\n                <div className='plantask_date'>Инбокс</div>\r\n                {\r\n                    inboxTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            <div className='plantask_div'>\r\n                <div className='plantask_date'>СЕГОДНЯ</div>\r\n                {\r\n                    todayTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            \r\n            \r\n            {\r\n                dates.map(date => {\r\n                    const tasksForDate = onlyTasks.filter(task => task.date === date.raw)\r\n\r\n                    return (\r\n                        <div className='plantask_div'>\r\n                            <div className='plantask_date'>{date.show}</div>\r\n                            {\r\n                                tasksForDate.map((task, index) => (\r\n                                    <Task\r\n                                        key={task.id}\r\n                                        index={index}\r\n                                        value={task}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            <div className='plantask_div'>\r\n                <div className='plantask_date'>Остальное</div>\r\n                {\r\n                    otherTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Progress } from 'antd';\r\n\r\nimport './Tasks.css'\r\n\r\n\r\nimport { Task } from '../Task/Task';\r\nimport { API } from '../../api/tasks';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getTodayTasksThunk, selectTasks } from '../../app/taskReducer';\r\n\r\n\r\n\r\n\r\nexport const DoTasks = () => {\r\n\r\n    const { todaytasks, doneTasks } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const getTasks = async () => {\r\n            await dispatch(getTodayTasksThunk())\r\n        }\r\n        getTasks()\r\n    }, [])\r\n\r\n    const percent = Math.floor(doneTasks.length / (todaytasks.length + doneTasks.length) * 100)\r\n\r\n    // if (!todaytasks[0]) return null\r\n\r\n    return (\r\n        <div>\r\n            <div className='block'>\r\n                <Progress\r\n                    percent={percent}\r\n                    strokeWidth={20}\r\n                />\r\n            </div>\r\n            {\r\n                !todaytasks[0]\r\n                    ? <div>Отлично!</div>\r\n                    : <Task\r\n                        value={todaytasks[0]}\r\n                    />\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Switch } from 'antd';\r\n\r\nimport './Tasks.css'\r\n\r\n\r\nimport { Task } from '../Task/Task';\r\nimport { API } from '../../api/tasks';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getProjectsThunk, getTodayTasksThunk, selectTasks } from '../../app/taskReducer';\r\nimport { BALANCE } from '../../config/domain';\r\n\r\n\r\n\r\n\r\nexport const Projects = () => {\r\n\r\n    const { projects } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const getTasks = async () => {\r\n            await dispatch(getProjectsThunk())\r\n        }\r\n        getTasks()\r\n    }, [])\r\n\r\n    if (projects.length === 0) return null\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                BALANCE.map(item => {\r\n                    const tasks = projects.filter(task => task.balance === item)\r\n                    return (\r\n                        <div className='plantask_div'>\r\n                            <div className='plantask_date'>{item}</div>\r\n                            {\r\n                                tasks.map((task, index) => (\r\n                                    <Task\r\n                                        key={task.id}\r\n                                        index={index}\r\n                                        value={task}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            {/* {\r\n                projects.map((task, index) => (\r\n                    <Task\r\n                        key={task.id}\r\n                        index={index}\r\n                        value={task}\r\n                    />\r\n                ))\r\n            } */}\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { sortableContainer } from 'react-sortable-hoc';\r\n// import arrayMove from 'array-move';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ru';\r\n\r\nimport { Switch } from 'antd';\r\n\r\n// import './Tasks.css'\r\n\r\n\r\nimport { Task } from '../components/Task/Task';\r\nimport { API } from '../api/tasks';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changePlan, getPlanTasksThunk, getTasksThunk, getTodayTasksThunk, selectTasks } from '../app/taskReducer';\r\n\r\n\r\n\r\n\r\n// const SortableContainer = sortableContainer(({ children }) => {\r\n//     return <div>{children}</div>;\r\n// });\r\n\r\n\r\n\r\nexport const PlanToday = () => {\r\n\r\n    const { todaytasks } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    // const sortHandler = async ({ oldIndex, newIndex }) => {\r\n    //     // dispatch(changePlan({ oldIndex, newIndex, oldPlan: plan, newPlan: plan }))\r\n    //     // setTasks(tasks => arrayMove(tasks, oldIndex, newIndex))\r\n    //     // await API.reindex(plan, oldIndex, newIndex)\r\n    // }\r\n\r\n    useEffect(() => {\r\n        const getTasks = async () => {\r\n            // await dispatch(getTasksThunk())\r\n            await dispatch(getTodayTasksThunk())\r\n        }\r\n        getTasks()\r\n    }, [])\r\n\r\n    // const today = new Date()\r\n    // const dates = []\r\n    // const onlyDates = []\r\n    // for (let i = 1; i < 14; i++) {\r\n    //     const date = moment(today).add(i, 'days')\r\n    //     const dateObject = { raw: date.format('YYYY-MM-DD'), show: date.format('DD.MM dddd') }\r\n    //     dates.push(dateObject)\r\n    //     onlyDates.push(date.format('YYYY-MM-DD'))\r\n    // }\r\n\r\n    // const onlyTasks = tasks.filter(task => task.type === 'задача')\r\n    // const onlyPlanTasks = onlyTasks.filter(task => task.plan === 'plan')\r\n    // const todayTasks = onlyTasks.filter(task => moment(task.date).isBefore(moment(today)))\r\n\r\n    // const yesterdayTasks = onlyTasks.filter(task => moment(task.date).isBefore(moment(today).subtract(1, 'days')))\r\n    // const todayTasks= onlyTasks.filter(task => moment(task.date).format('YYYY-MM-DD') === moment(today).format('YYYY-MM-DD'))\r\n    // .sort((a, b) => a.index - b.index ? 1 : -1)\r\n\r\n    // const otherTasks = onlyPlanTasks.filter(task => !onlyDates.includes(task.date))\r\n    // const inboxTasks = onlyTasks.filter(task => task.plan === 'inbox')\r\n\r\n\r\n    return (\r\n        <div>            \r\n            {/* <div className='plantask_div'>\r\n                <div className='plantask_date'>Инбокс</div>\r\n                {\r\n                    inboxTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                        />\r\n                    ))\r\n                }\r\n            </div> */}\r\n            <div className='plantask_div'>\r\n                <div className='plantask_date'>СЕГОДНЯ</div>\r\n                {\r\n                    todaytasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n            \r\n            \r\n            {/* {\r\n                dates.map(date => {\r\n                    const tasksForDate = onlyTasks.filter(task => task.date === date.raw)\r\n\r\n                    return (\r\n                        <div className='plantask_div'>\r\n                            <div className='plantask_date'>{date.show}</div>\r\n                            {\r\n                                tasksForDate.map((task, index) => (\r\n                                    <Task\r\n                                        key={task.id}\r\n                                        index={index}\r\n                                        value={task}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            <div className='plantask_div'>\r\n                <div className='plantask_date'>Остальное</div>\r\n                {\r\n                    otherTasks.map((task, index) => (\r\n                        <Task\r\n                            key={task.id}\r\n                            index={index}\r\n                            value={task}\r\n                        />\r\n                    ))\r\n                }\r\n            </div> */}\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\n\r\n\r\nimport { getPlanThunk, getTasksThunk, selectTasks, setModal } from './app/taskReducer'\r\nimport { Plan } from './routes/Plan';\r\nimport { Focus } from './routes/Focus';\r\nimport { ModalForm } from './components/ModalForm/ModalForm';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './App.css'\r\nimport { HotKeys, GlobalHotKeys } from 'react-hotkeys';\r\nimport { CURRENT_TASK } from './config/domain';\r\nimport { Kanban } from './routes/Kanban';\r\nimport { Habits } from './routes/Habits';\r\nimport { MainHeader } from './components/MainHeader/MainHeader';\r\nimport { History } from './routes/History';\r\nimport { Analyze } from './routes/Analyze';\r\nimport { HabitsScore } from './routes/HabitsScore';\r\nimport { PlanTasks } from './components/Tasks/PlanTasks';\r\nimport { DoTasks } from './components/Tasks/DoTasks';\r\nimport { Projects } from './components/Tasks/Projects';\r\nimport { PlanToday } from './pages/PlanToday';\r\n\r\nfunction App() {\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const { plan, timer } = useSelector(selectTasks)\r\n\r\n  const today = moment(new Date()).format('YYYY-MM-DD')\r\n\r\n  // useEffect(() => {\r\n  //   dispatch(getTasksThunk())\r\n  //   dispatch(getPlanThunk(today))\r\n  // }, [plan])\r\n\r\n  // useEffect(() => {\r\n  //   document.title = timer;\r\n  // }, [timer])\r\n\r\n  const keyMap = {\r\n    MOVE_UP: \"ctrl+enter\"\r\n  };\r\n\r\n  const handlers = {\r\n    MOVE_UP: event => dispatch(setModal({ typeOfModal: 'new', currentTask: CURRENT_TASK }))\r\n  };\r\n\r\n  return (\r\n    <GlobalHotKeys keyMap={keyMap} handlers={handlers}>\r\n      <div className='App'>\r\n        <div className='wrapper'>\r\n          <MainHeader />\r\n          <Switch>\r\n            <Route exact path='/' component={PlanTasks} />\r\n            {/* <Route exact path='/plan' component={PlanTasks} /> */}\r\n            <Route exact path='/plan' component={Plan} />\r\n            <Route exact path='/today' component={PlanToday} />\r\n            <Route exact path='/do' component={DoTasks} />\r\n            <Route exact path='/projects' component={Projects} />\r\n            <Route path='/focus' component={Focus} />\r\n            <Route path='/kanban' component={Kanban} />\r\n            <Route path='/habits' component={Habits} />\r\n            <Route path='/history' component={History} />\r\n            <Route path='/analyze' component={Analyze} />\r\n            <Route path='/score' component={HabitsScore} />\r\n          </Switch>\r\n          <ModalForm />\r\n        </div>\r\n      </div>\r\n\r\n    </GlobalHotKeys>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport habitsReducer from './habitsReducer';\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    state: taskReducer,\r\n    habits: habitsReducer\r\n  },\r\n  middleware: getDefaultMiddleware(),\r\n  devTools: process.env.NODE_ENV !== 'production', // по необходимости\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}